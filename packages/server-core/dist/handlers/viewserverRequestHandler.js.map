{
  "version": 3,
  "sources": ["../../src/handlers/viewserverRequestHandler.ts"],
  "sourcesContent": ["import MessageQueue from '../message-queue.js';\nimport { findHandler as handlerFor, killSubscriptions } from '../requestHandlers.js';\nimport { updateLoop } from '../updateLoop.js';\nimport { uuid } from '../uuid.js';\nimport { TokenStore } from '../tokenStore.js';\n\nexport const requestHandler = (options, logger) => (localWebsocketConnection) => {\n  const { HEARTBEAT_FREQUENCY, PRIORITY_UPDATE_FREQUENCY, CLIENT_UPDATE_FREQUENCY } = options;\n  const sessionId = uuid();\n\n  console.log(\n    `Server.websocketRequestHandler: connection request from new client session=#${sessionId}`\n  );\n\n  const _update_queue = new MessageQueue();\n\n  // Note: these loops are all running per client, this will get expensive\n  const HEARTBEAT = JSON.stringify({ type: 'HB', vsHostName: 'localhost' });\n  const stopHeartBeats = updateLoop(\n    'HeartBeat',\n    localWebsocketConnection,\n    HEARTBEAT_FREQUENCY,\n    () =>\n      `{\"requestId\":\"NA\",\"sessionId\":\"${sessionId}\",\"user\":\"\",\"token\":\"\",\"body\":{\"type\":\"HB\", \"ts\": 12356} }`\n  );\n  const stopPriorityUpdates = updateLoop(\n    'Priority Updates',\n    localWebsocketConnection,\n    PRIORITY_UPDATE_FREQUENCY,\n    priorityQueueReader\n  );\n  const stopUpdates = updateLoop(\n    'Regular Updates',\n    localWebsocketConnection,\n    CLIENT_UPDATE_FREQUENCY,\n    queueReader\n  );\n\n  localWebsocketConnection.on('message', function (msg) {\n    const json = JSON.parse(msg);\n    console.log(`message in ${msg}`);\n    const {\n      requestId,\n      token,\n      user,\n      module,\n      body: { type, ...message }\n    } = json;\n\n    if (type === 'HB_RESP') {\n      checkHeartBeat(sessionId, requestId, message);\n    } else if (type === 'LOGIN') {\n      login(sessionId, requestId, message, _update_queue);\n    } else {\n      // some handlers are stateful (eg tableHandler). They must be notified\n      // when connection closes (maybe with delay to allow for temp disconenction)\n      const handler = handlerFor(type);\n\n      if (handler) {\n        handler(sessionId, requestId, message, _update_queue);\n      } else {\n        console.log(`server: dont know how to handle ${type} message`);\n      }\n    }\n  });\n\n  localWebsocketConnection.on('close', function (msg) {\n    console.log('>>> viewserver, local CONNECTION closed');\n\n    // how do we clear up the open subscription(s)\n    // keep  alist od all active handlers and notify them\n\n    stopHeartBeats();\n    stopPriorityUpdates();\n    stopUpdates();\n\n    killSubscriptions(sessionId, _update_queue);\n    // kill the update queue\n  });\n\n  function PRIORITY1(msg) {\n    return msg.priority === 1;\n  }\n\n  function priorityQueueReader() {\n    const queue = _update_queue.extract(PRIORITY1);\n    if (queue.length > 0) {\n      return queue;\n    } else {\n      return null;\n    }\n  }\n\n  function queueReader() {\n    const queue = _update_queue.extractAll();\n    if (queue.length > 0) {\n      return queue;\n    } else {\n      return null;\n    }\n  }\n};\n\nfunction login(sessionId, requestId, request, queue) {\n  const { token } = request;\n  if (TokenStore.hasToken(token)) {\n    TokenStore.setSession(token, sessionId);\n    queue.push({\n      requestId,\n      sessionId,\n      token,\n      user: 'user',\n      priority: 1,\n      body: {\n        type: 'LOGIN_SUCCESS',\n        token\n      }\n    });\n  } else {\n    console.error(`login attempt with unrecognised token`);\n  }\n}\n\nfunction checkHeartBeat(sessionId, requestId, request, queue) {\n  console.log('heartbeat received');\n}\n"],
  "mappings": "AAAA,OAAO,kBAAkB;AACzB,SAAS,eAAe,YAAY,yBAAyB;AAC7D,SAAS,kBAAkB;AAC3B,SAAS,YAAY;AACrB,SAAS,kBAAkB;AAEpB,MAAM,iBAAiB,CAAC,SAAS,WAAW,CAAC,6BAA6B;AAC/E,QAAM,EAAE,qBAAqB,2BAA2B,wBAAwB,IAAI;AACpF,QAAM,YAAY,KAAK;AAEvB,UAAQ;AAAA,IACN,+EAA+E;AAAA,EACjF;AAEA,QAAM,gBAAgB,IAAI,aAAa;AAGvC,QAAM,YAAY,KAAK,UAAU,EAAE,MAAM,MAAM,YAAY,YAAY,CAAC;AACxE,QAAM,iBAAiB;AAAA,IACrB;AAAA,IACA;AAAA,IACA;AAAA,IACA,MACE,kCAAkC;AAAA,EACtC;AACA,QAAM,sBAAsB;AAAA,IAC1B;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACA,QAAM,cAAc;AAAA,IAClB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,2BAAyB,GAAG,WAAW,SAAU,KAAK;AACpD,UAAM,OAAO,KAAK,MAAM,GAAG;AAC3B,YAAQ,IAAI,cAAc,KAAK;AAC/B,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,MAAM,EAAE,SAAS,QAAQ;AAAA,IAC3B,IAAI;AAEJ,QAAI,SAAS,WAAW;AACtB,qBAAe,WAAW,WAAW,OAAO;AAAA,IAC9C,WAAW,SAAS,SAAS;AAC3B,YAAM,WAAW,WAAW,SAAS,aAAa;AAAA,IACpD,OAAO;AAGL,YAAM,UAAU,WAAW,IAAI;AAE/B,UAAI,SAAS;AACX,gBAAQ,WAAW,WAAW,SAAS,aAAa;AAAA,MACtD,OAAO;AACL,gBAAQ,IAAI,mCAAmC,cAAc;AAAA,MAC/D;AAAA,IACF;AAAA,EACF,CAAC;AAED,2BAAyB,GAAG,SAAS,SAAU,KAAK;AAClD,YAAQ,IAAI,yCAAyC;AAKrD,mBAAe;AACf,wBAAoB;AACpB,gBAAY;AAEZ,sBAAkB,WAAW,aAAa;AAAA,EAE5C,CAAC;AAED,WAAS,UAAU,KAAK;AACtB,WAAO,IAAI,aAAa;AAAA,EAC1B;AAEA,WAAS,sBAAsB;AAC7B,UAAM,QAAQ,cAAc,QAAQ,SAAS;AAC7C,QAAI,MAAM,SAAS,GAAG;AACpB,aAAO;AAAA,IACT,OAAO;AACL,aAAO;AAAA,IACT;AAAA,EACF;AAEA,WAAS,cAAc;AACrB,UAAM,QAAQ,cAAc,WAAW;AACvC,QAAI,MAAM,SAAS,GAAG;AACpB,aAAO;AAAA,IACT,OAAO;AACL,aAAO;AAAA,IACT;AAAA,EACF;AACF;AAEA,SAAS,MAAM,WAAW,WAAW,SAAS,OAAO;AACnD,QAAM,EAAE,MAAM,IAAI;AAClB,MAAI,WAAW,SAAS,KAAK,GAAG;AAC9B,eAAW,WAAW,OAAO,SAAS;AACtC,UAAM,KAAK;AAAA,MACT;AAAA,MACA;AAAA,MACA;AAAA,MACA,MAAM;AAAA,MACN,UAAU;AAAA,MACV,MAAM;AAAA,QACJ,MAAM;AAAA,QACN;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH,OAAO;AACL,YAAQ,MAAM,uCAAuC;AAAA,EACvD;AACF;AAEA,SAAS,eAAe,WAAW,WAAW,SAAS,OAAO;AAC5D,UAAQ,IAAI,oBAAoB;AAClC;",
  "names": []
}
