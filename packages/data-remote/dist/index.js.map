{"version":3,"file":"index.js","sources":["../src/constants.js","../src/remote-websocket-connection.js","../src/messages.js","../src/view/remote-server-proxy.js","../src/view/remote-subscription.js","../src/view/remote-data-view.js"],"sourcesContent":["let _connectionId = 0;\n\nexport const connectionId = {\n  get nextValue(){\n    return _connectionId++;\n  }\n}\n\nexport const msgType = {\n  connect : 'connect',\n  connectionStatus : 'connection-status',\n  rowData : 'rowData',\n  rowSet: 'rowset',\n  select : 'select',\n  selected: 'selected',\n\n\n  addSubscription: 'AddSubscription',\n  collapseGroup : 'CollapseGroup',\n  columnList : 'ColumnList',\n  data : 'data',\n  expandGroup : 'ExpandGroup',\n  filter : 'filter',\n  filterData : 'filterData',\n  getFilterData : 'GetFilterData',\n  getSearchData : 'GetSearchData',\n  groupBy : 'groupBy',\n  modifySubscription : 'ModifySubscription',\n  searchData : 'searchData',\n  setColumns: 'setColumns',\n  setGroupState : 'setGroupState',\n  setViewRange : 'setViewRange',\n  size : 'size',\n  snapshot : 'snapshot',\n  sort : 'sort',\n  subscribed : 'Subscribed',\n  tableList : 'TableList',\n  unsubscribe : 'TerminateSubscription',\n  viewRangeChanged : 'ViewRangeChanged',\n}\n\nexport const logColor = {\n  plain : 'color: black; font-weight: normal',\n  blue : 'color: blue; font-weight: bold',\n  brown : 'color: brown; font-weight: bold',\n  green : 'color: green; font-weight: bold',\n}\n\nconst {plain} = logColor;\nexport const createLogger = (source, labelColor=plain, msgColor=plain) => ({\n  log: (msg, args='') => console.log(`[${Date.now()}]%c[${source}] %c${msg}`,labelColor, msgColor, args),\n  warn: (msg) => console.warn(`[${source}] ${msg}`)\n})\n","\nexport default class Connection {\n\n  static connect(connectionString, callback) {\n    return new Promise(function (resolve) {\n        const connection = new Connection(connectionString, msg => {\n          const {type} = msg;\n          if (type === 'connection-status'){\n            resolve(connection)\n          } else if (type === 'HB'){\n\n          } else {\n            callback(msg)\n          }\n        });\n    });\n  }\n\n  constructor(connectionString, callback) {\n      this._callback = callback;\n      const ws = new WebSocket('ws://' + connectionString);\n      ws.onopen = () => {\n        console.log('%câš¡','font-size: 24px;color: green;font-weight: bold;');\n          callback({type : 'connection-status',  status: 'connected' });\n      };\n\n      ws.onmessage = evt => {\n        const message = JSON.parse(evt.data);\n        // console.log(`%c<<< [${new Date().toISOString().slice(11,23)}]  (WebSocket) ${message.type || JSON.stringify(message)}`,'color:white;background-color:blue;font-weight:bold;');\n        if (Array.isArray(message)){\n          message.map(callback)\n        } else {\n          callback(message);\n        }\n      }\n\n      ws.onerror = evt => websocketError(callback, evt);\n      ws.onclose = evt => websocketClosed(callback, evt);\n      this.ws = ws;\n  }\n\n  send(message) {\n      // console.log(`%c>>>  (WebSocket) ${JSON.stringify(message)} bufferedAmount ${this.ws.bufferedAmount}`,'color:yellow;background-color:blue;font-weight:bold;');\n      this.ws.send(JSON.stringify(message));\n  }\n\n}\n\nfunction websocketError(callback) {\n  callback({type:'websocket.websocketError'});\n}\n\nfunction websocketClosed(callback) {\n  callback({type:'websocket.websocketClosed'});\n}\n","export const ServerApiMessageTypes = {\n  addSubscription: 'AddSubscription',\n  setColumns: 'setColumns'\n}\n\nexport const CONNECT = 'connect';\nexport const COLUMN_LIST = 'ColumnList';\nexport const DATA = 'data';\nexport const FILTER_DATA = 'filterData';\nexport const GROUP_BY = 'groupBy';\nexport const TABLE_LIST = 'TableList';\nexport const UNSUBSCRIBE = 'TerminateSubscription';\nexport const MODIFY_SUBSCRIPTION = 'ModifySubscription';\nexport const SUBSCRIBED = 'Subscribed';\nexport const SET_VIEWPORT_RANGE = 'setViewRange';\nexport const SORT = 'sort';\nexport const FILTER = 'filter';\nexport const SELECT = 'select';\nexport const SET_GROUP_STATE = 'setGroupState';\nexport const VIEWPORT_RANGE_CHANGED = 'ViewRangeChanged';\nexport const EXPAND_GROUP = 'ExpandGroup';\nexport const COLLAPSE_GROUP = 'CollapseGroup';\nexport const GET_FILTER_DATA = 'GetFilterData';\nexport const GET_SEARCH_DATA = 'GetSearchData';\nexport const SEARCH_DATA = 'searchData';\nexport const SNAPSHOT = 'snapshot';\n\nexport const RowData = 'rowData';\nexport const Size = 'size';\nexport const FilterData = 'filterData';\nexport const TableList = 'table-list';\nexport const ConnectionStatus = 'connection-status';\n","import Connection from '../remote-websocket-connection';\nimport * as Message from '../messages.js';\nimport { ServerApiMessageTypes as API } from '../messages.js';\nimport { createLogger, logColor } from '../constants';\n\nconst logger = createLogger('RemoteServerProxy', logColor.blue);\n\nfunction partition(array, test, pass = [], fail = []) {\n\n    for (let i = 0, len = array.length; i < len; i++) {\n        (test(array[i], i) ? pass : fail).push(array[i]);\n    }\n\n    return [pass, fail];\n}\n\n// we use one ServerProxy per client (i.e per browser instance)\n// This is created as a singleton in the (remote-data) view\nexport class ServerProxy {\n\n    constructor(clientCallback) {\n        this.connection = null;\n        this.connectionStatus = 'not-connected';\n\n        this.queuedRequests = [];\n        this.viewportStatus = {};\n        this.pendingSubscriptionRequests = {};\n        this.postMessageToClient = clientCallback;\n\n    }\n\n    handleMessageFromClient(message) {\n        this.sendIfReady(message, this.viewportStatus[message.viewport] === 'subscribed');\n    }\n\n    sendIfReady(message, isReady) {\n        // TODO implement the message queuing in remote data view\n        if (isReady) {\n            this.sendMessageToServer(message);\n        } else {\n            this.queuedRequests.push(message);\n        }\n\n        return isReady;\n\n    }\n\n    // if we're going to support multiple connections, we need to save them against connectionIs\n    async connect({ connectionString, connectionId = 0 }) {\n\n        logger.log(`<connect> connectionString: ${connectionString} connectionId: ${connectionId}`)\n        this.connectionStatus = 'connecting';\n        this.connection = await Connection.connect(connectionString, msg => this.handleMessageFromServer(msg));\n        this.onReady(connectionId);\n    }\n\n    subscribe(message) {\n        const isReady = this.connectionStatus === 'ready';\n        const { viewport } = message;\n        this.pendingSubscriptionRequests[viewport] = message;\n        this.viewportStatus[viewport] = 'subscribing';\n        this.sendIfReady( message, isReady);\n    }\n\n    subscribed(/* server message */ message) {\n        const { viewport } = message;\n        if (this.pendingSubscriptionRequests[viewport]) {\n\n            const request = this.pendingSubscriptionRequests[viewport];\n            // const {table, columns, sort, filter, groupBy} = request;\n            let { range } = request;\n            logger.log(`<handleMessageFromServer> SUBSCRIBED create subscription range ${range.lo} - ${range.hi}`)\n\n            this.pendingSubscriptionRequests[viewport] = undefined;\n            this.viewportStatus[viewport] = 'subscribed';\n\n            const byViewport = vp => item => item.viewport === vp;\n            const byMessageType = msg => msg.type === Message.SET_VIEWPORT_RANGE;\n            const [messagesForThisViewport, messagesForOtherViewports] = partition(this.queuedRequests, byViewport(viewport));\n            const [rangeMessages, otherMessages] = partition(messagesForThisViewport, byMessageType);\n\n            this.queuedRequests = messagesForOtherViewports;\n            rangeMessages.forEach(msg => {\n\n                range = msg.range;\n\n            });\n\n            if (otherMessages.length) {\n                console.log(`we have ${otherMessages.length} messages still to process`);\n            }\n\n        }\n\n    }\n\n    onReady(connectionId) {\n        this.connectionStatus = 'ready';\n        // messages which have no dependency on previous subscription\n        logger.log(`%c onReady ${JSON.stringify(this.queuedRequests)}`, 'background-color: brown;color: cyan')\n\n        const byReadyToSendStatus = msg => msg.viewport === undefined || msg.type === API.addSubscription;\n        const [readyToSend, remainingMessages] = partition(this.queuedRequests, byReadyToSendStatus);\n        // TODO roll setViewRange messages into subscribe messages\n        readyToSend.forEach(msg => this.sendMessageToServer(msg));\n        this.queuedRequests = remainingMessages;\n        this.postMessageToClient({ type: 'connection-status', status: 'ready', connectionId });\n    }\n\n    sendMessageToServer(message) {\n        const { clientId } = this.connection;\n        this.connection.send({ clientId, message });\n    }\n\n    handleMessageFromServer(message) {\n        const { type, viewport } = message;\n\n        switch (type) {\n\n            case Message.SUBSCRIBED:\n                this.subscribed(message);\n                break;\n\n            case Message.FILTER_DATA:\n            case Message.SEARCH_DATA:\n                const { data: filterData } = message;\n                // const { rowset: data } = subscription.putData(type, filterData);\n\n                // if (data.length || filterData.size === 0) {\n                this.postMessageToClient({\n                    type,\n                    viewport,\n                    [type]: filterData\n                });\n                // }\n\n                break;\n\n            default:\n                this.postMessageToClient(message);\n\n        }\n\n    }\n\n}","import {msgType as Msg} from '../constants';\n\n// This is given to client on subscription and acts as a conduit between client and server\n// client calls api methods directly, the view calls postMessageToClient when it receives\n// responses from server. \nexport default class RemoteSubscription {\n  constructor(viewport, postMessageToServer, postMessageToClient){\n      this.viewport = viewport;\n      this.postMessageToServer = postMessageToServer;\n      this.postMessageToClient = postMessageToClient;\n  }\n\n\n  getFilterData(column, searchText, range){\n    this.postMessageToServer({\n          viewport: this.viewport,\n          type: Msg.getFilterData,\n          column,\n          searchText,\n          range\n      })\n  }\n}\n","import { DataTypes, columnUtils } from '@heswell/data';\nimport {uuid} from '@heswell/utils';\nimport {\n  msgType as Msg, createLogger, logColor,\n  connectionId as _connectionId,\n} from '../constants';\n\nimport { ServerProxy } from './remote-server-proxy';\nimport RemoteSubscription from './remote-subscription';\n\nconst { metaData } = columnUtils;\nconst logger = createLogger('RemoteDataView', logColor.blue);\n\n/*----------------------------------------------------------------\n  Set up the Server Proxy\n  ----------------------------------------------------------------*/\n  // TODO isn't it more natural to pass messageFromTheServer to subscribe ?\nconst serverProxy = new ServerProxy(messageFromTheServer);\n\nconst postMessageToServer = async (message) => {\n  serverProxy.handleMessageFromClient(message);\n}\n\nfunction messageFromTheServer({ type: msgType, ...message }) {\n  switch (msgType) {\n    case Msg.connectionStatus:\n      logger.log(`<==   ${msgType}`)\n      onConnected(message);\n      break;\n    case Msg.snapshot:\n    case Msg.rowSet: \n    case Msg.selected:\n    case Msg.filterData:\n      subscriptions[message.viewport].postMessageToClient(message);\n      break;\n    default:\n      logger.warn(`does not yet handle ${msgType}`);\n  }\n}\n\nconst defaultRange = { lo: 0, hi: 0 };\n\n/*----------------------------------------------------------------\n  connection/subscription management\n  ----------------------------------------------------------------*/\nconst clientId = uuid(); // what purpose does this serve ?\nconst connections = {};\nconst subscriptions = {};\nconst pendingPromises = {};\nlet defaultConnection = { status: 'pending' };\nlet pendingConnection = new Promise((resolve, reject) => {\n  defaultConnection.resolve = resolve;\n  defaultConnection.reject = reject;\n});\n\nconst getDefaultConnection = () => pendingConnection;\n\n\n/*----------------------------------------------------------------\n A RemoteDataView manages a single subscription via the ServerProxy\n  ----------------------------------------------------------------*/\nexport default class RemoteDataView  {\n\n  constructor({url, tableName}) {\n    connect(url);\n    this.columns = null;\n    this.meta = null;\n\n    this.tableName = tableName;\n    this.subscription = null;\n    this.viewport = null;\n    this.filterDataCallback = null;\n    this.filterDataMessage = null;\n  }\n\n  subscribe({\n    viewport = uuid(),\n    tableName = this.tableName,\n    columns,\n    range = defaultRange,\n    ...options\n  }, callback) {\n\n    if (!tableName) throw Error(\"RemoteDataView subscribe called without table name\");\n    if (!columns) throw Error(\"RemoteDataView subscribe called without columns\");\n\n    this.viewport = viewport;\n    this.tableName = tableName;\n    this.columns = columns;\n    this.meta = metaData(columns);\n    logger.log(`range = ${JSON.stringify(range)}`)\n\n    this.subscription = subscribe({\n      ...options,\n      viewport,\n      tablename: tableName,\n      columns,\n      range\n    }, /* postMessageToClient */(message) => {\n\n      const { filterData, data } = message;\n      if (data && data.rows) {\n        callback(data);\n      } else if (filterData && this.filterDataCallback) {\n        this.filterDataCallback(message)\n      } else if (filterData) {\n        // experiment - need to store the column as well\n        this.filterDataMessage = message;\n      } else if (data && data.selected){\n        // TODO think about this\n        const {selected, deselected} = data;\n        callback({range, selected, deselected});\n      }\n\n    });\n\n  }\n\n  unsubscribe() {\n\n  }\n\n  setRange(lo, hi) {\n    postMessageToServer({\n      viewport: this.viewport,\n      type: Msg.setViewRange,\n      range: { lo, hi },\n      dataType: DataTypes.ROW_DATA\n    });\n  }\n\n  select(idx, _row, rangeSelect, keepExistingSelection){\n    postMessageToServer({\n      viewport: this.viewport,\n      type: Msg.select,\n      idx,\n      rangeSelect,\n      keepExistingSelection\n    })\n  }\n\n  group(columns) {\n    postMessageToServer({\n      viewport: this.viewport,\n      type: Msg.groupBy,\n      groupBy: columns\n    });\n  }\n\n  setGroupState(groupState) {\n    postMessageToServer({\n      viewport: this.viewport,\n      type: Msg.setGroupState,\n      groupState\n    });\n  }\n\n  sort(columns) {\n    postMessageToServer({\n      viewport: this.viewport,\n      type: Msg.sort,\n      sortCriteria: columns\n    });\n  }\n\n  filter(filter, dataType = DataTypes.ROW_DATA, incremental=false) {\n    postMessageToServer({\n      viewport: this.viewport,\n      type: Msg.filter,\n      dataType,\n      filter,\n      incremental\n    })\n  }\n\n  getFilterData(column, searchText) {\n    if (this.subscription) {\n      this.subscription.getFilterData(column, searchText);\n    }\n  }\n\n  subscribeToFilterData(column, range, callback) {\n    logger.log(`<subscribeToFilterData>`)\n    this.filterDataCallback = callback;\n    this.setFilterRange(range.lo, range.hi);\n    if (this.filterDataMessage) {\n      callback(this.filterDataMessage);\n      // do we need to nullify now ?\n    }\n\n  }\n\n  unsubscribeFromFilterData() {\n    logger.log(`<unsubscribeFromFilterData>`)\n    this.filterDataCallback = null;\n  }\n\n  // To support multiple open filters, we need a column here\n  setFilterRange(lo, hi) {\n    console.log(`setFilerRange ${lo}:${hi}`)\n    postMessageToServer({\n      viewport: this.viewport,\n      type: Msg.setViewRange,\n      dataType: DataTypes.FILTER_DATA,\n      range: { lo, hi }\n    })\n\n  }\n\n}\n\n\n/*--------------------------------------------------------\n\n  Connecting to the server\n\n  --------------------------------------------------------*/\nexport const connect = (\n  connectionString,\n  isDefaultConnection = true && defaultConnection.status === 'pending'\n) => {\n  if (isDefaultConnection) {\n    // is it possible that defaultConnection.status could be pending, yet we have already \n    // resolved this connection ?\n\n    // if we're already connected on the default connection ...\n    // \n    // else ...\n\n    defaultConnection.status = 'connecting';\n  }\n  logger.log(`connect ${connectionString} isDefaultConnection: ${isDefaultConnection}`)\n  // connections[connectionString] set to a promise. However will be replaced with\n  // the actual connection once connected, That can't be right\n  return connections[connectionString] || (\n    connections[connectionString] = new Promise(async (resolve, reject) => {\n      const connectionId = `connection-${_connectionId.nextValue}`;\n      const timeoutHandle = setTimeout(() => {\n        delete pendingPromises[connectionId];\n        reject(new Error('timed out waiting for server response'));\n      }, 5000);\n      pendingPromises[connectionId] = {\n        resolve,\n        reject,\n        connectionString,\n        timeoutHandle,\n        // do we want this to be true ONLY if this was the first request ?\n        isDefaultConnection\n      };\n      logger.log(JSON.stringify({ type: Msg.connect, clientId, connectionId, connectionString }))\n      serverProxy.connect({ connectionId, connectionString });\n    })\n  )\n}\n\nfunction onConnected(message) {\n  if (message.status === 'ready') {\n    const { connectionId } = message;\n    if (pendingPromises[connectionId]) {\n      // TODO handle reject here as well\n      const { resolve, connectionString, timeoutHandle, isDefaultConnection } = pendingPromises[connectionId];\n      clearTimeout(timeoutHandle);\n      delete pendingPromises[connectionId];\n      const connection = connections[connectionString] = RemoteConnectionAPI(connectionId, postMessageToServer);\n      resolve(connection);\n      if (isDefaultConnection && defaultConnection.status !== 'connected') {\n        defaultConnection.status = 'connected';\n        defaultConnection.resolve(connection);\n      }\n    }\n  }\n}\n\n/*--------------------------------------------------------\n\n  Subscribing to services\n\n  --------------------------------------------------------*/\nexport function subscribe(options, clientCallback) {\n  logger.log(`<subscribe> vp ${options.viewport} table ${options.tablename}`)\n  const viewport = options.viewport;\n  // This remoteview is specific to this viewport, no need for mapping\n  const subscription = subscriptions[viewport] = new RemoteSubscription(viewport, postMessageToServer, clientCallback)\n\n  // subscription blocks here until connection is resolved (to an instance of ServerApi)\n  getDefaultConnection().then(remoteConnection => {\n    logger.log(`>>>>> now we have a remoteConnection, we can subscribe`)\n    remoteConnection.subscribe(options, viewport);\n  });\n\n  return subscription;\n}\n\nconst RemoteConnectionAPI = (connectionId, postMessage) => ({\n\n  disconnect() {\n    console.log(`disconnect ${connectionId}`)\n  },\n\n  subscribe(message, viewport) {\n    // From here, the serverProxy will maintain the association between connection\n    // and viewport, we only have to supply viewport\n    logger.log(`[RemoteConnection]<subscribe>  ===>  SW   vp: ${viewport}`)\n    serverProxy.subscribe({\n      connectionId,\n      viewport,\n      type: Msg.addSubscription,\n      ...message\n    });\n  },\n\n  query: (type, params = null) => new Promise((resolve, reject) => {\n    const requestId = uuid.v1();\n    postMessage({ requestId, type, params });\n    const timeoutHandle = setTimeout(() => {\n      delete pendingPromises[requestId];\n      reject(Error('query timed out waiting for server response'));\n    }, 5000);\n    pendingPromises[requestId] = { resolve, reject, timeoutHandle };\n  })\n\n});\n\n"],"names":["Message.SET_VIEWPORT_RANGE","API","Message.SUBSCRIBED","Message.FILTER_DATA","Message.SEARCH_DATA","Msg","logger","msgType","connectionId","_connectionId"],"mappings":"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"}