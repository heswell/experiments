{"version":3,"file":"index.js","sources":["../src/constants.js","../src/remote-websocket-connection.js","../src/connection-manager.js","../src/remote-data-view.js"],"sourcesContent":["let _connectionId = 0;\n\nexport const connectionId = {\n  get nextValue(){\n    return _connectionId++;\n  }\n}\n\nexport const msgType = {\n  connect : 'connect',\n  connectionStatus : 'connection-status',\n  getFilterData : 'GetFilterData',\n  rowData : 'rowData',\n  rowSet: 'rowset',\n  select : 'select',\n  selected: 'selected',\n  snapshot : 'snapshot',\n  update: 'update',\n\n  addSubscription: 'AddSubscription',\n  collapseGroup : 'CollapseGroup',\n  columnList : 'ColumnList',\n  data : 'data',\n  expandGroup : 'ExpandGroup',\n  filter : 'filter',\n  filterData : 'filterData',\n  getSearchData : 'GetSearchData',\n  groupBy : 'groupBy',\n  modifySubscription : 'ModifySubscription',\n  searchData : 'searchData',\n  setColumns: 'setColumns',\n  setGroupState : 'setGroupState',\n  setViewRange : 'setViewRange',\n  size : 'size',\n  sort : 'sort',\n  subscribed : 'Subscribed',\n  tableList : 'TableList',\n  unsubscribe : 'TerminateSubscription',\n  viewRangeChanged : 'ViewRangeChanged',\n}\n","import { createLogger, logColor } from '@heswell/utils';\nimport { ConnectionStatus } from './messages';\n\nconst logger = createLogger('WebsocketConnection', logColor.brown);\n\nconst connectionAttempts = {};\n\nconst setWebsocket = Symbol('setWebsocket');\nconst connectionCallback = Symbol('connectionCallback');\nconst destroyConnection = Symbol('destroyConnection');\n\nexport default async function connect(connectionString, callback, connectionStatusCallback) {\n    return makeConnection(connectionString, msg => {\n      const {type} = msg;\n      if (type === 'connection-status'){\n        connectionStatusCallback(msg);\n      } else if (type === 'HB'){\n          console.log(`swallowing HB in WebsocketConnection`);\n      } else if (type === 'Welcome'){\n        // Note: we are actually resolving the connection before we get this session message\n        logger.log(`Session established clientId: ${msg.clientId}`)\n      } else {\n        callback(msg)\n      }\n    });\n}\n\nasync function reconnect(connection){\n  console.log(`reconnect connection at ${connection.url}`)\n  makeConnection(connection.url, connection[connectionCallback], connection);\n}\n\nasync function makeConnection(url, callback, connection){\n\n  const connectionStatus = connectionAttempts[url] || (connectionAttempts[url] = {\n    attemptsRemaining: 5,\n    status: 'not-connected'\n  });\n\n  try {\n    callback({type: 'connection-status', status: 'connecting'});\n    const reconnecting = typeof connection !== 'undefined';\n    const ws = await createWebsocket(url);\n\n    console.log(`%c⚡ %c${url}`, 'font-size: 24px;color: green;font-weight: bold;','color:green; font-size: 14px;');\n    \n    if (reconnecting){\n      connection[setWebsocket](ws);\n    } else {\n      connection = new Connection(ws, url, callback);\n    }\n\n    callback({type: 'connection-status', status: reconnecting ? 'reconnected' : 'connected'});\n\n    return connection;\n  \n  } catch(evt){\n    const retry = --connectionStatus.attemptsRemaining > 0;\n    callback({type: 'connection-status', status: 'not-connected', reason: 'failed to connect', retry});\n    if (retry){\n      return makeConnectionIn(url, callback, connection, 10000);\n    }\n  }\n}\n\nconst makeConnectionIn = (url, callback, connection, delay) => new Promise(resolve => {\n  setTimeout(() => {\n    resolve(makeConnection(url, callback, connection))\n  }, delay)\n}); \n\nconst createWebsocket = connectionString => new Promise((resolve, reject) => {\n  //TODO add timeout\n    const ws = new WebSocket('ws://' + connectionString);\n    ws.onopen = () => resolve(ws);\n    ws.onerror = evt => reject(evt);  \n});\n\n\nclass Connection {\n\n  constructor(ws, url, callback) {\n\n    this.url = url;\n    this[connectionCallback] = callback;\n\n    this[setWebsocket](ws);\n\n  }\n\n  [setWebsocket](ws){\n\n    const callback = this[connectionCallback];\n\n    ws.onmessage = evt => {\n      const message = JSON.parse(evt.data);\n      // console.log(`%c<<< [${new Date().toISOString().slice(11,23)}]  (WebSocket) ${message.type || JSON.stringify(message)}`,'color:white;background-color:blue;font-weight:bold;');\n      if (Array.isArray(message)){\n        message.map(callback)\n      } else {\n        callback(message);\n      }\n    }\n\n    ws.onerror = evt => {\n      console.log(`%c⚡ %c${this.url}`, 'font-size: 24px;color: red;font-weight: bold;','color:red; font-size: 14px;');\n      callback({type: 'connection-status', status: 'disconnected', reason: 'error'});\n      reconnect(this);\n      this.send = queue;\n    }\n\n    ws.onclose = evt => {\n      console.log(`%c⚡ %c${this.url}`, 'font-size: 24px;color: orange;font-weight: bold;','color:orange; font-size: 14px;');\n      callback({type: 'connection-status', status: 'disconnected', reason: 'close'});\n      reconnect(this);\n      this.send = queue;\n    }\n\n    const send = msg => {\n      ws.send(JSON.stringify(msg));\n    }\n\n    const queue = msg => {\n      console.log(`queuing message ${JSON.stringify(msg)}`)\n    }\n\n    const abort = msg => {\n      throw Error('This connection is dead');\n    }\n\n    this.send = send;\n\n  }\n\n  [destroyConnection](){\n    console.log(`destroy !!!!!`)\n  }\n}\n\n","import { connectionId as _connectionId } from './constants';\nimport { createLogger, logColor, EventEmitter, invariant } from '@heswell/utils';\nimport connect from './remote-websocket-connection';\n\nconst serverProxies = new WeakMap();\nconst servers = new WeakMap();\n\nconst logger = createLogger('ConnectionManager', logColor.green);\n\nconst getServerProxy = async serverName => {\n  console.log(`request for proxy class for ${serverName}`,serverProxies[serverName])\n\n  return serverProxies[serverName] || (serverProxies[serverName] =\n    import(/* webpackIgnore: true */`./server-proxy/${serverName}.js`));\n}\nconst connectServer = async (serverName, url, onConnectionStatusMessage) => {\n  \n  return servers[url] || (servers[url] = new Promise(async (resolve, reject) => {\n    const proxyModule = getServerProxy(serverName);\n    const pendingConnection = connect(\n      url,\n      // if this was called during connect, we would get a ReferenceError, but it will\n      // never be called until subscriptions have been made, so this is safe.\n      msg => server.handleMessageFromServer(msg),\n      msg => {\n        onConnectionStatusMessage(msg);\n        if (msg.status === 'disconnected'){\n          server.disconnected();\n        } else if (msg.status === 'reconnected'){\n          server.resubscribeAll();\n        } \n      }\n    );\n    \n    const [{ServerProxy}, connection] = [await proxyModule, await pendingConnection];\n    invariant(typeof ServerProxy === 'function', 'Unable to load ServerProxy class for ${serverName}');\n    invariant(connection !== undefined, 'unable to open connection to ${url}');\n    // if the connection breaks, the serverPrtoxy will continue top 'send' messages \n    const server = new ServerProxy(connection);\n    \n    // How do we handle authentication, login\n    if (typeof server.authenticate === 'function'){\n      await server.authenticate('steve', 'pword');\n    }\n    if (typeof server.login === 'function'){\n      await server.login();\n    }\n\n    resolve(server);\n  }))\n}\n  \nclass ConnectionManager extends EventEmitter {\n\n  async connect(url, serverName){\n    logger.log(`ConnectionManager.connect ${serverName} ${url}`);\n    return connectServer(\n      serverName, \n      url, \n      msg => this.onConnectionStatusChanged(serverName, url, msg)\n    );\n  }\n\n  onConnectionStatusChanged(serverName, url, msg){\n    const {status} = msg;\n    logger.log(`connectionStatusChanged server ${serverName}, url ${url} status ${status}`)\n    this.emit('connection-status', msg);\n  }\n\n}\n\nexport default new ConnectionManager();","import { DataTypes, columnUtils } from '@heswell/data';\nimport {uuid, createLogger, logColor} from '@heswell/utils';\nimport {\n  msgType as Msg,\n  connectionId as _connectionId,\n} from './constants';\n\n// TODO make this dynamic\nimport ConnectionManager from './connection-manager';\n\nconst { metaData } = columnUtils;\nconst logger = createLogger('RemoteDataView', logColor.blue);\n\nexport const AvailableProxies = {\n  Viewserver: 'viewserver', \n  Vuu: 'vuu'\n}\n\nconst NullServer = {\n  handleMessageFromClient: message => console.log(`%cNullServer.handleMessageFromClient ${JSON.stringify(message)}`,'color:red')\n}\n\nconst defaultRange = { lo: 0, hi: 0 };\n\n/*-----------------------------------------------------------------\n A RemoteDataView manages a single subscription via the ServerProxy\n  ----------------------------------------------------------------*/\nexport default class RemoteDataView  {\n\n  constructor({tableName, serverName = AvailableProxies.Viewserver, url}) {\n\n    this.url = url;\n    this.serverName = serverName;\n    this.tableName = tableName;\n\n    this.server = NullServer;  \n    this.columns = null;\n    this.meta = null;\n    this.subscription = null;\n    this.viewport = null;\n    this.filterDataCallback = null;\n    this.filterDataMessage = null;\n  }\n\n  async subscribe({\n    viewport = uuid(),\n    tableName = this.tableName,\n    columns,\n    range = defaultRange\n  }, callback) {\n\n    if (!tableName) throw Error(\"RemoteDataView subscribe called without table name\");\n    if (!columns) throw Error(\"RemoteDataView subscribe called without columns\");\n\n    this.viewport = viewport;\n    this.tableName = tableName;\n    this.columns = columns;\n    this.meta = metaData(columns);\n    logger.log(`range = ${JSON.stringify(range)}`)\n\n    this.server = await ConnectionManager.connect(this.url, this.serverName);\n\n    this.server.subscribe({\n        viewport,\n        tablename: tableName,\n        columns,\n        range\n      }, message => {\n          const { filterData/*, data, updates*/ } = message;\n          if (filterData && this.filterDataCallback) {\n            this.filterDataCallback(message)\n          } else {\n            callback(message)\n          }\n      });\n\n    // could we pass all this into the call above ?\n    // this.subscription = subscribe({\n    //   ...options,\n    //   viewport,\n    //   tablename: tableName,\n    //   columns,\n    //   range\n    // }, /* postMessageToClient */(message) => {\n\n    //   const { filterData, data, updates } = message;\n    //   if ((data && data.rows) || updates) {\n    //     callback(data || message);\n    //   } else if (filterData && this.filterDataCallback) {\n    //     this.filterDataCallback(message)\n    //   } else if (filterData) {\n    //     // experiment - need to store the column as well\n    //     this.filterDataMessage = message;\n    //   } else if (data && data.selected){\n    //     // TODO think about this\n    //     const {selected, deselected} = data;\n    //     callback({range, selected, deselected});\n    //   }\n\n    // });\n\n  }\n\n  unsubscribe() {\n\n  }\n\n  setRange(lo, hi) {\n    this.server.handleMessageFromClient({\n      viewport: this.viewport,\n      type: Msg.setViewRange,\n      range: { lo, hi },\n      dataType: DataTypes.ROW_DATA\n    });\n  }\n\n  select(idx, _row, rangeSelect, keepExistingSelection){\n    this.server.handleMessageFromClient({\n      viewport: this.viewport,\n      type: Msg.select,\n      idx,\n      rangeSelect,\n      keepExistingSelection\n    })\n  }\n\n  group(columns) {\n    this.server.handleMessageFromClient({\n      viewport: this.viewport,\n      type: Msg.groupBy,\n      groupBy: columns\n    });\n  }\n\n  setGroupState(groupState) {\n    this.server.handleMessageFromClient({\n      viewport: this.viewport,\n      type: Msg.setGroupState,\n      groupState\n    });\n  }\n\n  sort(columns) {\n    this.server.handleMessageFromClient({\n      viewport: this.viewport,\n      type: Msg.sort,\n      sortCriteria: columns\n    });\n  }\n\n  filter(filter, dataType = DataTypes.ROW_DATA, incremental=false) {\n    this.server.handleMessageFromClient({\n      viewport: this.viewport,\n      type: Msg.filter,\n      dataType,\n      filter,\n      incremental\n    })\n  }\n\n  getFilterData(column, searchText) {\n    console.log(`[RemoteDataView] getFilterData`)\n    this.server.handleMessageFromClient({\n      viewport: this.viewport,\n      type: Msg.getFilterData,\n      column,\n      searchText\n    });\n  }\n\n  subscribeToFilterData(column, range, callback) {\n    logger.log(`<subscribeToFilterData> ${column.name}`)\n    this.filterDataCallback = callback;\n    this.setFilterRange(range.lo, range.hi);\n    if (this.filterDataMessage) {\n      callback(this.filterDataMessage);\n      // do we need to nullify now ?\n    }\n\n  }\n\n  unsubscribeFromFilterData() {\n    logger.log(`<unsubscribeFromFilterData>`)\n    this.filterDataCallback = null;\n  }\n\n  // To support multiple open filters, we need a column here\n  setFilterRange(lo, hi) {\n    console.log(`setFilerRange ${lo}:${hi}`)\n    this.server.handleMessageFromClient({\n      viewport: this.viewport,\n      type: Msg.setViewRange,\n      dataType: DataTypes.FILTER_DATA,\n      range: { lo, hi }\n    })\n\n  }\n\n}\n\n"],"names":["logger","ConnectionManager","Msg"],"mappings":"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"}