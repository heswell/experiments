{"version":3,"file":"viewserver.js","sources":["../../src/remote-websocket-connection.js","../../src/servers/viewserver/messages.js","../../src/messages.js","../../src/constants.js","../../src/servers/viewserver/server-proxy.js"],"sourcesContent":["\nexport default class Connection {\n\n  static connect(connectionString, callback) {\n    return new Promise(function (resolve) {\n        const connection = new Connection(connectionString, msg => {\n          const {type} = msg;\n          // TODO check the connection status is actually connected\n          if (type === 'connection-status'){\n            resolve(connection)\n          } else if (type === 'HB'){\n\n          } else {\n            callback(msg)\n          }\n        });\n    });\n  }\n\n  constructor(connectionString, callback) {\n      const ws = new WebSocket('ws://' + connectionString);\n      ws.onopen = () => {\n        console.log('%câš¡','font-size: 24px;color: green;font-weight: bold;');\n          callback({type : 'connection-status',  status: 'connected' });\n      };\n\n      ws.onmessage = evt => {\n        const message = JSON.parse(evt.data);\n        // console.log(`%c<<< [${new Date().toISOString().slice(11,23)}]  (WebSocket) ${message.type || JSON.stringify(message)}`,'color:white;background-color:blue;font-weight:bold;');\n        if (Array.isArray(message)){\n          message.map(callback)\n        } else {\n          callback(message);\n        }\n      }\n\n      ws.onerror = evt => {\n        console.error(`websocket error`, evt)\n        callback({type: 'connection-status', status: 'disconnected', reason: 'error'});\n      }\n      ws.onclose = evt => {\n        console.warn(`websocket closed`, evt)\n        callback({type: 'connection-status', status: 'disconnected', reason: 'close'});\n      }\n      this.send = message => ws.send(JSON.stringify(message))\n  }\n}","export const FILTER_DATA = 'filterData';\nexport const SEARCH_DATA = 'searchData';\nexport const SELECTED = 'selected';\nexport const SET_VIEWPORT_RANGE = 'setViewRange';\nexport const SNAPSHOT = 'snapshot';\nexport const SUBSCRIBED = 'Subscribed';\n","export const ServerApiMessageTypes = {\n  addSubscription: 'AddSubscription',\n  setColumns: 'setColumns'\n}\n\nexport const CONNECT = 'connect';\nexport const COLUMN_LIST = 'ColumnList';\nexport const DATA = 'data';\nexport const FILTER_DATA = 'filterData';\nexport const GROUP_BY = 'groupBy';\nexport const TABLE_LIST = 'TableList';\nexport const UNSUBSCRIBE = 'TerminateSubscription';\nexport const MODIFY_SUBSCRIPTION = 'ModifySubscription';\nexport const SUBSCRIBED = 'Subscribed';\nexport const SET_VIEWPORT_RANGE = 'setViewRange';\nexport const SORT = 'sort';\nexport const FILTER = 'filter';\nexport const SELECT = 'select';\nexport const SET_GROUP_STATE = 'setGroupState';\nexport const VIEWPORT_RANGE_CHANGED = 'ViewRangeChanged';\nexport const EXPAND_GROUP = 'ExpandGroup';\nexport const COLLAPSE_GROUP = 'CollapseGroup';\nexport const GET_FILTER_DATA = 'GetFilterData';\nexport const GET_SEARCH_DATA = 'GetSearchData';\nexport const SEARCH_DATA = 'searchData';\nexport const SNAPSHOT = 'snapshot';\n\nexport const RowData = 'rowData';\nexport const Size = 'size';\nexport const FilterData = 'filterData';\nexport const TableList = 'table-list';\nexport const ConnectionStatus = 'connection-status';\n","let _connectionId = 0;\n\nexport const connectionId = {\n  get nextValue(){\n    return _connectionId++;\n  }\n}\n\nexport const msgType = {\n  connect : 'connect',\n  connectionStatus : 'connection-status',\n  rowData : 'rowData',\n  rowSet: 'rowset',\n  select : 'select',\n  selected: 'selected',\n  snapshot : 'snapshot',\n  update: 'update',\n\n  addSubscription: 'AddSubscription',\n  collapseGroup : 'CollapseGroup',\n  columnList : 'ColumnList',\n  data : 'data',\n  expandGroup : 'ExpandGroup',\n  filter : 'filter',\n  filterData : 'filterData',\n  getFilterData : 'GetFilterData',\n  getSearchData : 'GetSearchData',\n  groupBy : 'groupBy',\n  modifySubscription : 'ModifySubscription',\n  searchData : 'searchData',\n  setColumns: 'setColumns',\n  setGroupState : 'setGroupState',\n  setViewRange : 'setViewRange',\n  size : 'size',\n  sort : 'sort',\n  subscribed : 'Subscribed',\n  tableList : 'TableList',\n  unsubscribe : 'TerminateSubscription',\n  viewRangeChanged : 'ViewRangeChanged',\n}\n\nexport const logColor = {\n  plain : 'color: black; font-weight: normal',\n  blue : 'color: blue; font-weight: bold',\n  brown : 'color: brown; font-weight: bold',\n  green : 'color: green; font-weight: bold',\n}\n\nconst {plain} = logColor;\nexport const createLogger = (source, labelColor=plain, msgColor=plain) => ({\n  log: (msg, args='') => console.log(`[${Date.now()}]%c[${source}] %c${msg}`,labelColor, msgColor, args),\n  warn: (msg) => console.warn(`[${source}] ${msg}`)\n})\n","import Connection from '../../remote-websocket-connection';\nimport * as Message from './messages.js';\nimport { ServerApiMessageTypes as API } from '../../messages.js';\nimport { createLogger, logColor } from '../../constants';\n\nconst logger = createLogger('ViewsServerProxy', logColor.blue);\n\nfunction partition(array, test, pass = [], fail = []) {\n\n    for (let i = 0, len = array.length; i < len; i++) {\n        (test(array[i], i) ? pass : fail).push(array[i]);\n    }\n\n    return [pass, fail];\n}\n\n/*\n    query: (type, params = null) => new Promise((resolve, reject) => {\n      const requestId = uuid.v1();\n      postMessage({ requestId, type, params });\n      const timeoutHandle = setTimeout(() => {\n        delete pendingPromises[requestId];\n        reject(Error('query timed out waiting for server response'));\n      }, 5000);\n      pendingPromises[requestId] = { resolve, reject, timeoutHandle };\n    })\n\n    */\n// we use one ServerProxy per client (i.e per browser instance)\n// This is created as a singleton in the (remote-data) view\n// TODO don'r we need to create one per server connected to ?\nexport class ServerProxy {\n\n    constructor() {\n        this.connection = null;\n        this.connectionStatus = 'not-connected';\n\n        this.queuedRequests = [];\n        this.viewportStatus = {};\n        this.postMessageToClient = null;\n\n    }\n\n    handleMessageFromClient(message) {\n        this.sendIfReady(message, this.viewportStatus[message.viewport].status === 'subscribed');\n    }\n\n    sendIfReady(message, isReady) {\n        // TODO implement the message queuing in remote data view\n        if (isReady) {\n            this.sendMessageToServer(message);\n        } else {\n            this.queuedRequests.push(message);\n        }\n\n        return isReady;\n\n    }\n\n    // if we're going to support multiple connections, we need to save them against connectionIs\n    async connect({ connectionString, connectionId = 0 }) {\n\n        logger.log(`<connect> connectionString: ${connectionString} connectionId: ${connectionId}`)\n        this.connectionStatus = 'connecting';\n        this.connection = await Connection.connect(connectionString, msg => this.handleMessageFromServer(msg));\n        this.onReady(connectionId);\n    }\n\n    subscribe(message, callback) {\n        const isReady = this.connectionStatus === 'ready';\n        const { viewport } = message;\n        this.viewportStatus[viewport] = {\n            status: 'subscribing',\n            request: message,\n            callback\n        }\n        this.sendIfReady( {\n            type: API.addSubscription,\n            ...message\n        }, isReady);\n    }\n\n    subscribed(/* server message */ message) {\n        const { viewport } = message;\n        if (this.viewportStatus[viewport]) {\n\n            const {request, callback} = this.viewportStatus[viewport];\n            // const {table, columns, sort, filter, groupBy} = request;\n            let { range } = request;\n            logger.log(`<handleMessageFromServer> SUBSCRIBED create subscription range ${range.lo} - ${range.hi}`)\n\n            this.viewportStatus[viewport].status = 'subscribed';\n\n            const byViewport = vp => item => item.viewport === vp;\n            const byMessageType = msg => msg.type === Message.SET_VIEWPORT_RANGE;\n            const [messagesForThisViewport, messagesForOtherViewports] = partition(this.queuedRequests, byViewport(viewport));\n            const [rangeMessages, otherMessages] = partition(messagesForThisViewport, byMessageType);\n\n            this.queuedRequests = messagesForOtherViewports;\n            rangeMessages.forEach(msg => {\n\n                range = msg.range;\n\n            });\n\n            if (otherMessages.length) {\n                console.log(`we have ${otherMessages.length} messages still to process`);\n            }\n\n        }\n\n    }\n\n    onReady(connectionId) {\n        this.connectionStatus = 'ready';\n        // messages which have no dependency on previous subscription\n        logger.log(`%c onReady ${JSON.stringify(this.queuedRequests)}`, 'background-color: brown;color: cyan')\n\n        const byReadyToSendStatus = msg => msg.viewport === undefined || msg.type === API.addSubscription;\n        const [readyToSend, remainingMessages] = partition(this.queuedRequests, byReadyToSendStatus);\n        // TODO roll setViewRange messages into subscribe messages\n        readyToSend.forEach(msg => this.sendMessageToServer(msg));\n        this.queuedRequests = remainingMessages;\n        //this.postMessageToClient({ type: 'connection-status', status: 'ready', connectionId });\n    }\n\n    sendMessageToServer(message) {\n        const { clientId } = this.connection;\n        this.connection.send({ clientId, message });\n    }\n\n    handleMessageFromServer(message) {\n        const { type, viewport } = message;\n\n        if (viewport){\n            const {callback: postMessageToClient} = this.viewportStatus[viewport];\n\n            switch (type) {\n    \n                case Message.SUBSCRIBED:\n                    this.subscribed(message);\n                    break;\n    \n                case Message.FILTER_DATA:\n                case Message.SEARCH_DATA:\n                    const { data: filterData } = message;\n                    // const { rowset: data } = subscription.putData(type, filterData);\n    \n                    // if (data.length || filterData.size === 0) {\n                    postMessageToClient({\n                        type,\n                        viewport,\n                        [type]: filterData\n                    });\n                    // }\n    \n                    break;\n                    \n                case 'rowset':    \n                case 'selected':\n                case Message.SNAPSHOT:{\n                    postMessageToClient(message.data);\n                }\n                    break;\n                case 'update':\n                    postMessageToClient(message);\n                    break;\n                default:\n                    if (type !== 'update'){\n                        console.log(`[ServerProxy] message received ${JSON.stringify(message)}`)\n                    }\n                    // postMessageToClient(message);\n    \n            }\n    \n        } else {\n            console.log(`message with no viewport ${JSON.stringify(message)}`)\n        }\n\n    }\n\n}"],"names":["API","Message.SET_VIEWPORT_RANGE","Message.SUBSCRIBED","Message.FILTER_DATA","Message.SEARCH_DATA","Message.SNAPSHOT"],"mappings":"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"}