{"version":3,"file":"vuu.js","sources":["../../src/remote-websocket-connection.js","../../src/servers/vuu/messages.js","../../src/messages.js","../../src/constants.js","../../src/servers/vuu/server-proxy.js"],"sourcesContent":["\nexport default class Connection {\n\n  static connect(connectionString, callback) {\n    return new Promise(function (resolve) {\n        const connection = new Connection(connectionString, msg => {\n          const {type} = msg;\n          // TODO check the connection status is actually connected\n          if (type === 'connection-status'){\n            resolve(connection)\n          } else if (type === 'HB'){\n\n          } else {\n            callback(msg)\n          }\n        });\n    });\n  }\n\n  constructor(connectionString, callback) {\n      const ws = new WebSocket('ws://' + connectionString);\n      ws.onopen = () => {\n        console.log('%câš¡','font-size: 24px;color: green;font-weight: bold;');\n          callback({type : 'connection-status',  status: 'connected' });\n      };\n\n      ws.onmessage = evt => {\n        const message = JSON.parse(evt.data);\n        // console.log(`%c<<< [${new Date().toISOString().slice(11,23)}]  (WebSocket) ${message.type || JSON.stringify(message)}`,'color:white;background-color:blue;font-weight:bold;');\n        if (Array.isArray(message)){\n          message.map(callback)\n        } else {\n          callback(message);\n        }\n      }\n\n      ws.onerror = evt => {\n        console.error(`websocket error`, evt)\n        callback({type: 'connection-status', status: 'disconnected', reason: 'error'});\n      }\n      ws.onclose = evt => {\n        console.warn(`websocket closed`, evt)\n        callback({type: 'connection-status', status: 'disconnected', reason: 'close'});\n      }\n      this.send = message => ws.send(JSON.stringify(message))\n  }\n}","export const AUTH = 'AUTH';\nexport const AUTH_SUCCESS = 'AUTH_SUCCESS';\nexport const LOGIN = 'LOGIN';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const CREATE_VP = 'CREATE_VP';\nexport const CREATE_VP_SUCCESS = 'CREATE_VP_SUCCESS';\nexport const CHANGE_VP = 'CHANGE_VP';\nexport const CHANGE_VP_SUCCESS = 'CHANGE_VP_SUCCESS';\nexport const CHANGE_VP_RANGE = 'CHANGE_VP_RANGE';\nexport const CHANGE_VP_RANGE_SUCCESS = 'CHANGE_VP_RANGE_SUCCESS';\nexport const TABLE_ROW = 'TABLE_ROW';\nexport const HB = \"HB\";\nexport const HB_RESP = \"HB_RESP\";\n\n\nexport const SIZE = 'SIZE'\nexport const UPDATE = 'U'","export const ServerApiMessageTypes = {\n  addSubscription: 'AddSubscription',\n  setColumns: 'setColumns'\n}\n\nexport const CONNECT = 'connect';\nexport const COLUMN_LIST = 'ColumnList';\nexport const DATA = 'data';\nexport const FILTER_DATA = 'filterData';\nexport const GROUP_BY = 'groupBy';\nexport const TABLE_LIST = 'TableList';\nexport const UNSUBSCRIBE = 'TerminateSubscription';\nexport const MODIFY_SUBSCRIPTION = 'ModifySubscription';\nexport const SUBSCRIBED = 'Subscribed';\nexport const SET_VIEWPORT_RANGE = 'setViewRange';\nexport const SORT = 'sort';\nexport const FILTER = 'filter';\nexport const SELECT = 'select';\nexport const SET_GROUP_STATE = 'setGroupState';\nexport const VIEWPORT_RANGE_CHANGED = 'ViewRangeChanged';\nexport const EXPAND_GROUP = 'ExpandGroup';\nexport const COLLAPSE_GROUP = 'CollapseGroup';\nexport const GET_FILTER_DATA = 'GetFilterData';\nexport const GET_SEARCH_DATA = 'GetSearchData';\nexport const SEARCH_DATA = 'searchData';\nexport const SNAPSHOT = 'snapshot';\n\nexport const RowData = 'rowData';\nexport const Size = 'size';\nexport const FilterData = 'filterData';\nexport const TableList = 'table-list';\nexport const ConnectionStatus = 'connection-status';\n","let _connectionId = 0;\n\nexport const connectionId = {\n  get nextValue(){\n    return _connectionId++;\n  }\n}\n\nexport const msgType = {\n  connect : 'connect',\n  connectionStatus : 'connection-status',\n  rowData : 'rowData',\n  rowSet: 'rowset',\n  select : 'select',\n  selected: 'selected',\n  snapshot : 'snapshot',\n  update: 'update',\n\n  addSubscription: 'AddSubscription',\n  collapseGroup : 'CollapseGroup',\n  columnList : 'ColumnList',\n  data : 'data',\n  expandGroup : 'ExpandGroup',\n  filter : 'filter',\n  filterData : 'filterData',\n  getFilterData : 'GetFilterData',\n  getSearchData : 'GetSearchData',\n  groupBy : 'groupBy',\n  modifySubscription : 'ModifySubscription',\n  searchData : 'searchData',\n  setColumns: 'setColumns',\n  setGroupState : 'setGroupState',\n  setViewRange : 'setViewRange',\n  size : 'size',\n  sort : 'sort',\n  subscribed : 'Subscribed',\n  tableList : 'TableList',\n  unsubscribe : 'TerminateSubscription',\n  viewRangeChanged : 'ViewRangeChanged',\n}\n\nexport const logColor = {\n  plain : 'color: black; font-weight: normal',\n  blue : 'color: blue; font-weight: bold',\n  brown : 'color: brown; font-weight: bold',\n  green : 'color: green; font-weight: bold',\n}\n\nconst {plain} = logColor;\nexport const createLogger = (source, labelColor=plain, msgColor=plain) => ({\n  log: (msg, args='') => console.log(`[${Date.now()}]%c[${source}] %c${msg}`,labelColor, msgColor, args),\n  warn: (msg) => console.warn(`[${source}] ${msg}`)\n})\n","import Connection from '../../remote-websocket-connection';\nimport * as Message from './messages';\nimport { ServerApiMessageTypes as API } from '../../messages.js';\nimport { createLogger, logColor } from '../../constants';\n\nconst logger = createLogger('ViewsServerProxy', logColor.blue);\n\nconst SORT = {\n    asc: 'D',\n    dsc : 'A'\n}\n\nfunction partition(array, test, pass = [], fail = []) {\n\n    for (let i = 0, len = array.length; i < len; i++) {\n        (test(array[i], i) ? pass : fail).push(array[i]);\n    }\n\n    return [pass, fail];\n}\n\nlet _requestId = 1;\n\n// we use one ServerProxy per client (i.e per browser instance)\n// This is created as a singleton in the (remote-data) view\n// TODO don'r we need to create one per server connected to ?\nexport class ServerProxy {\n\n    constructor(clientCallback) {\n        this.connection = null;\n        this.connectionStatus = 'not-connected';\n\n        this.queuedRequests = [];\n        this.loginToken = \"\";\n        this.sessionId= \"\";\n        this.pendingLogin = null;\n        this.pendingAuthentication = null;\n        this.pendingSubscriptionRequests = {};\n        this.postMessageToClient = clientCallback;\n        this.viewports = {};\n\n    }\n\n    handleMessageFromClient(message) {\n\n        const viewport = this.viewports[message.viewport];\n\n        switch (message.type){\n            case 'setViewRange':\n                const isViewportReady = viewport !== undefined;\n                if (isViewportReady){\n                    this.sendIfReady({\n                        type : Message.CHANGE_VP_RANGE,\n                        viewPortId : viewport.serverId,\n                        from : message.range.lo,\n                        to : message.range.hi\n                    })\n                }\n                break;\n            case 'groupBy': {\n                console.log(message.groupBy)\n                this.sendIfReady({\n                    type : Message.CHANGE_VP,\n                    viewPortId : viewport.serverId,\n                    columns : [ \"ric\", \"description\", \"currency\", \"exchange\", \"lotSize\", \"bid\", \"ask\", \"last\", \"open\", \"close\", \"scenario\" ],\n                    sort : {\n                        sortDefs: []\n                    },\n                    groupBy : message.groupBy.map(([columnName]) => columnName),\n                    filterSpec : null\n                  });\n            }\n                break;\n                \n            case 'sort': {\n                this.sendIfReady({\n                        type : Message.CHANGE_VP,\n                        viewPortId : viewport.serverId,\n                        columns : [ \"ric\", \"description\", \"currency\", \"exchange\", \"lotSize\", \"bid\", \"ask\", \"last\", \"open\", \"close\", \"scenario\" ],\n                        sort : {\n                            sortDefs: message.sortCriteria.map(([column, dir='asc']) => ({column, sortType: SORT[dir]}))\n                        },\n                        groupBy : [ ],\n                        filterSpec : null\n                      });\n                }\n                break;\n\n            default:\n                console.log(`send message to server ${JSON.stringify(message)}`)\n\n            }\n\n    }\n\n    sendMessageToServer(body, requestId=_requestId++) {\n        // const { clientId } = this.connection;\n        this.connection.send({\n            requestId,\n            sessionId : this.sessionId,\n            token : this.loginToken,\n            user : \"user\",\n            module : \"CORE\",\n            body\n        });\n    }\n\n    sendIfReady(message, requestId, isReady=true) {\n        // TODO implement the message queuing in remote data view\n        if (isReady) {\n            this.sendMessageToServer(message, requestId);\n        } else {\n            // TODO need to make sure we keep the requestId\n            this.queuedRequests.push(message);\n        }\n\n        return isReady;\n\n    }\n\n    // if we're going to support multiple connections, we need to save them against connectionIs\n    async connect({ connectionString, connectionId = 0 }) {\n\n        logger.log(`<connect> connectionString: ${connectionString} connectionId: ${connectionId}`)\n        this.connectionStatus = 'connecting';\n        this.connection = await Connection.connect(connectionString, msg => this.handleMessageFromServer(msg));\n\n        // login\n        console.log(`connected to VUU, now we're going to authenticate ...`)\n        const token = await this.authenticate('steve', 'steve');\n        console.log(`authenticated on VUU token: ${token}, now we're going to login ...`)\n\n        const sessionId = await this.login();\n        console.log(`logged in to VUU sessionId: ${sessionId}`)\n\n        this.onReady(connectionId);\n    }\n\n    async authenticate(username, password){\n        return new Promise((resolve, reject) => {\n            this.sendMessageToServer({type : Message.AUTH,username,password}, \"\");\n            this.pendingAuthentication = {resolve, reject}\n        })\n    }\n\n    authenticated(token){\n        this.loginToken = token;\n        this.pendingAuthentication.resolve(token);\n    }\n\n    async login(){\n        return new Promise((resolve, reject) => {\n            this.sendMessageToServer({type : Message.LOGIN},\"\");\n            this.pendingLogin = {resolve, reject}\n        })\n\n    }\n\n    loggedIn(sessionId){\n        this.sessionId = sessionId;\n        this.pendingLogin.resolve(sessionId);\n    }\n\n    subscribe(message) {\n        const isReady = this.connectionStatus === 'ready';\n        const {connectionId, viewport, tablename, columns, range: {lo, hi}} = message;\n        this.pendingSubscriptionRequests[viewport] = message;\n        this.viewports[viewport] = {\n            clientId: viewport,\n            status: 'subscribing'\n        };\n\n        console.log(JSON.stringify(message,null,2))\n\n        // use client side viewport as request id, so that when we process the response,\n        // with the serverside viewport we can establish a mapping between the two\n        this.sendIfReady({\n            type : Message.CREATE_VP,\n            table : tablename,\n            range : {\n                from : lo,\n                to : hi\n            },\n            columns : columns.map(column => column.name),\n            sort : {\n                sortDefs : [ ]\n            },\n            groupBy : [ ],\n            filterSpec : {\n                filter : \"\"\n            }\n        }, viewport, isReady)\n     \n    }\n\n    subscribed(/* server message */ viewport, message) {\n        const { viewPortId } = message;\n        if (this.pendingSubscriptionRequests[viewport]) {\n            const request = this.pendingSubscriptionRequests[viewport];\n\n            this.pendingSubscriptionRequests[viewport] = undefined;\n            // use server id as an alternate key to viewport\n            const vp = this.viewports[viewPortId] = this.viewports[viewport];\n            vp.status = 'subscribed';\n            vp.serverId = viewPortId;\n            const {table, range, columns, sort, groupBy, filterSpec} = message;\n            vp.spec = {\n                table, range, columns, sort, groupBy, filterSpec\n            };\n\n            const byViewport = vp => item => item.viewport === vp;\n            const byMessageType = msg => msg.type === Message.SET_VIEWPORT_RANGE;\n            const [messagesForThisViewport, messagesForOtherViewports] = partition(this.queuedRequests, byViewport(viewport));\n            const [rangeMessages, otherMessages] = partition(messagesForThisViewport, byMessageType);\n\n            this.queuedRequests = messagesForOtherViewports;\n            rangeMessages.forEach(msg => {\n                range = msg.range;\n            });\n\n            if (otherMessages.length) {\n                console.log(`we have ${otherMessages.length} messages still to process`);\n            }\n\n        }\n\n    }\n\n    onReady(connectionId) {\n        this.connectionStatus = 'ready';\n        // messages which have no dependency on previous subscription\n        logger.log(`%c onReady ${JSON.stringify(this.queuedRequests)}`, 'background-color: brown;color: cyan')\n\n        const byReadyToSendStatus = msg => msg.viewport === undefined || msg.type === API.addSubscription;\n        const [readyToSend, remainingMessages] = partition(this.queuedRequests, byReadyToSendStatus);\n        // TODO roll setViewRange messages into subscribe messages\n        readyToSend.forEach(msg => this.sendMessageToServer(msg));\n        this.queuedRequests = remainingMessages;\n        this.postMessageToClient({ type: 'connection-status', status: 'ready', connectionId });\n    }\n\n\n    batchByViewport(rows){\n        const viewports = {};\n        for (let i=0; i < rows.length; i++){\n            const {viewPortId, vpSize, rowIndex, rowKey, updateType, ts, data} = rows[i];\n            if (updateType === Message.UPDATE){\n                const record = (viewports[viewPortId] || (viewports[viewPortId] = {viewPortId, size: vpSize, rows: []}));\n                // TODO populate the key field correctly\n                data.push(rowIndex, 0, 0, 0, data[0]);\n                record.rows.push(data);\n            } else if (updateType === Message.SIZE){\n                console.log(`size record ${JSON.stringify(rows[i],null,2)}`)\n            }\n        }\n        return Object.values(viewports);\n    }\n\n    handleMessageFromServer(message) {\n        if (!message.body){\n            console.error('invalid message', message)\n            return;\n        } else if (message.body.type === Message.HB){\n            this.sendMessageToServer({type : Message.HB_RESP, ts : +(new Date())},\"NA\");\n            return;\n        }\n\n        const {requestId, sessionId, token, body} = message; \n\n        switch (body.type) {\n            case Message.AUTH_SUCCESS:\n                return this.authenticated(token);\n            case Message.LOGIN_SUCCESS:\n                return this.loggedIn(sessionId);   \n            case Message.CREATE_VP_SUCCESS:\n                return this.subscribed(requestId, body);\n            case Message.CHANGE_VP_RANGE_SUCCESS:\n                console.log(`VP range changed`);\n                break;\n            case Message.CHANGE_VP_SUCCESS:\n                console.log(`VP changed`);\n                break;\n            case Message.TABLE_ROW: {\n                const {batch, isLast, timestamp, rows} = body;\n                const rowsByViewport = this.batchByViewport(rows);\n                rowsByViewport.forEach(({viewPortId,size, rows}) => {\n                    const output = {\n                        viewport: this.viewports[viewPortId].clientId,\n                        type: 'rowset',\n                        data: {\n                            size,\n                            offset: 0,\n                            range: {lo: 0, hi: 27},\n                            rows\n                        }\n                    }\n                    this.postMessageToClient(output);\n                })                \n            }\n\n                break;\n            // case Message.FILTER_DATA:\n            // case Message.SEARCH_DATA:\n            //     const { data: filterData } = message;\n            //     // const { rowset: data } = subscription.putData(type, filterData);\n\n            //     // if (data.length || filterData.size === 0) {\n            //     this.postMessageToClient({\n            //         type,\n            //         viewport,\n            //         [type]: filterData\n            //     });\n            //     // }\n\n            //     break;\n\n            default:\n                this.postMessageToClient(message.body);\n\n        }\n\n    }\n\n}\n\n/*\nmessage from server {\n    \"requestId\": \"NA\",\n    \"sessionId\": \"a5f525ea-9083-4b71-bc3f-28ba5afe7135\",\n    \"token\": \"\",\n    \"user\": \"user\",\n    \"body\": {\n      \"type\": \"TABLE_ROW\",\n      \"batch\": \"4b2ce98c-55a9-41e2-af88-69083ae742a0\",\n      \"isLast\": true,\n      \"timeStamp\": 1569745722689,\n      \"rows\": [\n        {\n          \"viewPortId\": \"user-f4bb8898-f4e5-4e41-b824-53a4a19e40c5\",\n          \"vpSize\": 0,\n          \"rowIndex\": -1,\n          \"rowKey\": \"SIZE\",\n          \"updateType\": \"SIZE\",\n          \"ts\": 1569745722689,\n          \"data\": []\n        }\n      ]\n    },\n    \"module\": \"CORE\"\n  }\n\n  message from server {\n    \"requestId\": \"NA\",\n    \"sessionId\": \"a5f525ea-9083-4b71-bc3f-28ba5afe7135\",\n    \"token\": \"\",\n    \"user\": \"user\",\n    \"body\": {\n      \"type\": \"TABLE_ROW\",\n      \"batch\": \"f1e0d7ad-2ea9-494d-9008-7f09699ee4ed\",\n      \"isLast\": true,\n      \"timeStamp\": 1569745722793,\n      \"rows\": [\n        {\n          \"viewPortId\": \"user-f4bb8898-f4e5-4e41-b824-53a4a19e40c5\",\n          \"vpSize\": 53767,\n          \"rowIndex\": 0,\n          \"rowKey\": \"AAA.L\",\n          \"updateType\": \"U\",\n          \"ts\": 1569745722785,\n          \"data\": [\n            \"AAA.L\",\n            \"AAA.L London PLC\",\n            \"USD\",\n            \"XLON/LSE-SETS\",\n            633,\n            694,\n            700.94,\n            \"\",\n            \"\",\n            \"\",\n            \"walkBidAsk\"\n          ]\n        },\n        {\n          \"viewPortId\": \"user-f4bb8898-f4e5-4e41-b824-53a4a19e40c5\",\n          \"vpSize\": 53767,\n          \"rowIndex\": 1,\n          \"rowKey\": \"AAA.N\",\n          \"updateType\": \"U\",\n          \"ts\": 1569745722785,\n          \"data\": [\n            \"AAA.N\",\n            \"AAA.N Corporation\",\n            \"EUR\",\n            \"XNGS/NAS-GSM\",\n            220,\n            109,\n            139,\n            \"\",\n            \"\",\n            \"\",\n            \"fastTick\"\n          ]\n        },\n        {\n          \"viewPortId\": \"user-f4bb8898-f4e5-4e41-b824-53a4a19e40c5\",\n          \"vpSize\": 53767,\n          \"rowIndex\": 2,\n          \"rowKey\": \"AAA.OQ\",\n          \"updateType\": \"U\",\n          \"ts\": 1569745722786,\n          \"data\": [\n            \"AAA.OQ\",\n            \"AAA.OQ Co.\",\n            \"EUR\",\n            \"XNYS/NYS-MAIN\",\n            393,\n            86,\n            86,\n            \"\",\n            \"\",\n            \"\",\n            \"walkBidAsk\"\n          ]\n        },\n\n        ...\n\n        message from server {\n            \"requestId\": \"NA\",\n            \"sessionId\": \"a5f525ea-9083-4b71-bc3f-28ba5afe7135\",\n            \"token\": \"\",\n            \"user\": \"user\",\n            \"body\": {\n              \"type\": \"TABLE_ROW\",\n              \"batch\": \"c6683531-5ffb-48b1-8b08-2b05c4481c5b\",\n              \"isLast\": true,\n              \"timeStamp\": 1569745723293,\n              \"rows\": [\n                {\n                  \"viewPortId\": \"user-f4bb8898-f4e5-4e41-b824-53a4a19e40c5\",\n                  \"vpSize\": 53767,\n                  \"rowIndex\": 10,\n                  \"rowKey\": \"AAC.OQ\",\n                  \"updateType\": \"U\",\n                  \"ts\": 1569745723293,\n                  \"data\": [\n                    \"AAC.OQ\",\n                    \"AAC.OQ Co.\",\n                    \"GBX\",\n                    \"XNYS/NYS-MAIN\",\n                    559,\n                    830,\n                    838.3,\n                    \"\",\n                    \"\",\n                    \"\",\n                    \"fastTick\"\n                  ]\n                }\n              ]\n            },\n            \"module\": \"CORE\"\n          }\n          */"],"names":["Message.CHANGE_VP_RANGE","Message.CHANGE_VP","Message.AUTH","Message.LOGIN","Message.CREATE_VP","Message.SET_VIEWPORT_RANGE","API","Message.UPDATE","Message.SIZE","Message.HB","Message.HB_RESP","Message.AUTH_SUCCESS","Message.LOGIN_SUCCESS","Message.CREATE_VP_SUCCESS","Message.CHANGE_VP_RANGE_SUCCESS","Message.CHANGE_VP_SUCCESS","Message.TABLE_ROW"],"mappings":"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"}