{"version":3,"file":"index.js","sources":["../src/model/actions.js","../src/types.js","../src/cells/formatting/cellValueFormatter.js","../src/cells/cell-utils.js","../src/cells/cell.jsx","../src/cells/rendering/renderers/checkbox-cell.jsx","../src/cells/rendering/renderers/background-cell.jsx","../src/cells/formatting/formatters/string-formatter.js","../src/cells/formatting/utils/number.js","../src/cells/formatting/formatters/number-formatter.jsx","../src/cells/group-cell.jsx","../src/registry/datatype-registry.jsx","../src/utils/domUtils.js","../src/model/model-reducer.js","../src/draggable/draggable.jsx","../src/header/sort-icon.jsx","../src/header/sort-indicator.jsx","../src/grid-context.js","../src/header/toggle-icon.jsx","../src/header/header-cell.jsx","../src/header/group-header-cell.jsx","../src/model/utils.js","../src/header/column-group-header.jsx","../src/header/header.jsx","../src/services/popups/popup-service.jsx","../src/header/column-filter.jsx","../src/header/inline-filter.jsx","../src/core/row.jsx","../src/core/canvas.jsx","../src/core/column-bearer.jsx","../src/model/data-reducer.js","../src/core/viewport.jsx","../src/grid-reducer.js","../src/context-menu/grid-context-menu.jsx","../src/context-menu/use-context-menu.jsx","../src/grid.jsx"],"sourcesContent":["export const COLUMN_COLLAPSE = 'COLUMN_COLLAPSE';\nexport const COLUMN_EXPAND = 'COLUMN_EXPAND';\nexport const INITIALIZE = 'INITIALIZE';\nexport const ROWCOUNT = 'ROWCOUNT';\nexport const SUBSCRIBED = 'SUBSCRIBED';\nexport const GROUP = 'GROUP';\nexport const SORT = 'SORT';\nexport const SORT_GROUP = 'SORT_GROUP';\nexport const GRID_RESIZE = 'GRID_RESIZE';\nexport const COLUMN_RESIZE_BEGIN = 'COLUMN_RESIZE_BEGIN';\nexport const COLUMN_RESIZE = 'COLUMN_RESIZE';\nexport const COLUMN_RESIZE_END = 'COLUMN_RESIZE_END';\nexport const GROUP_COLUMN_WIDTH = 'GROUP_COLUMN_WIDTH';\nexport const RESIZE_HEADING = 'RESIZE_HEADING';\nexport const MOVE_BEGIN = 'MOVE_BEGIN';\nexport const MOVE = 'MOVE';\nexport const MOVE_END = 'MOVE_END';\nexport const TOGGLE = 'TOGGLE';\nexport const TOGGLE_FILTERS = 'TOGGLE_FILTERS'\n// export const SCROLLLEFT = 'SCROLLLEFT';\nexport const SCROLL_LEFT = 'SCROLL_LEFT';\nexport const SCROLL_RIGHT = 'SCROLL_RIGHT';\nexport const RANGE = 'RANGE';\nexport const groupExtend = 'GROUP_EXTEND';\n","export const CHECKBOX = 'checkbox';\nexport const SINGLE_ROW = 'single-row';\nexport const MULTIPLE_ROW = 'multiple-row';\n\nexport const Selection = {\n    Checkbox: CHECKBOX,\n    SingleRow: SINGLE_ROW,\n    MultipleRow: MULTIPLE_ROW\n};\n","import * as React from 'react';\n\nconst DEFAULT_TYPE = {name:'string'};\n\nexport function renderCellContent(props){\n\n    const {column, row} = props;\n    const {type=DEFAULT_TYPE, formatter} = column;\n    const value = row[column.key];\n\n    if (React.isValidElement(formatter)){\n        return React.cloneElement(formatter, props);\n    } else {\n        return formatter(value, type, row); \n    }\n}","import cx from 'classnames';\n\nconst columnType = column =>\n  !column.type ? null\n    : typeof column.type === 'string' ? column.type\n    : column.type.name;\n\n// we want to allow css class to be determined by value\nexport function getGridCellClassName(column, value){\n\n  return cx(\n      'GridCell',\n      column.className,\n      columnType(column),\n      column.resizing ? 'resizing' : null,\n      column.moving ? 'moving' : null\n  );\n}\n","import React, {useCallback} from 'react';\nimport {renderCellContent} from './formatting/cellValueFormatter';\nimport {getGridCellClassName} from './cell-utils'\n\nimport './cell.css';\n\nexport default React.memo(({\n    idx,\n    column,\n    row,\n    onClick\n}) => {\n    const style = {width: column.width};\n    const value = row[column.key]\n\n    const clickHandler = useCallback(() => {\n        onClick(idx);\n    },[idx, onClick])\n    \n\n    return (\n        <div className={getGridCellClassName(column, value)} \n            style={style}\n            tabIndex={0}\n            onClick={clickHandler}>\n            {renderCellContent({column,row })}\n        </div>\n    );\n})\n\n","import React from 'react';\nimport {rowUtils} from '@heswell/data';\nimport {getGridCellClassName} from '../../cell-utils'\nimport './checkbox-cell.css';\n\nexport default React.memo(({value, cellClass, column, row, meta}) => {\n    const isSelected = row[meta.SELECTED] === 1;\n    return (\n        <div\n            className={getGridCellClassName(column, value, cellClass)}\n            style={{ width: column.width }}\n            tabIndex={0} >\n            {!rowUtils.isEmptyRow(row) && \n                <div className=\"checkbox\">\n                    <i className=\"material-icons\">{isSelected ? 'check_box_outline' : 'check_box_outline_blank'}</i>\n                </div>\n            }\n        </div>\n    );\n})\n// original checked row.length as part of shouldComponentUpdate","import React, { useEffect,useRef } from 'react';\nimport { renderCellContent } from '../../formatting/cellValueFormatter';\nimport { getGridCellClassName } from '../../cell-utils'\n\nimport './background-cell.css';\n\nconst CHAR_ARROW_UP = String.fromCharCode(11014);\nconst CHAR_ARROW_DOWN = String.fromCharCode(11015);\n\nconst UP1 = 'up1';\nconst UP2 = 'up2';\nconst DOWN1 = 'down1';\nconst DOWN2 = 'down2';\n\n// TODO these sre repeated from PriceFormatter - where shoud they live ?\nconst FlashStyle = {\n  ArrowOnly: 'arrow',\n  BackgroundOnly: 'bg-only',\n  ArrowBackground: 'arrow-bg'\n};\n\nconst INITIAL_VALUE = [null, null, null, null]\n\nfunction useDirection(key, value, column) {\n  const ref = useRef();\n  const [prevKey, prevValue, prevColumn, prevDirection] = ref.current || INITIAL_VALUE;\n  const direction = key === prevKey &&  column === prevColumn && \n    Number.isFinite(prevValue) && Number.isFinite(value)\n    ? getDirection(prevDirection, prevValue, value, column)\n    : '';\n\n  useEffect(() => {\n    ref.current = [key, value, column, direction]\n  })\n\n  return direction;\n}\n\nexport default React.memo(props => {\n  //TODO what baout click handling\n  const { column, row, meta}  = props;\n  const { key, width, type: { renderer: { flashStyle } } } = column;\n  const value = row[key];\n\n  const direction = useDirection(row[meta.KEY], value, column)\n\n  const arrow = flashStyle === FlashStyle.ArrowOnly || flashStyle === FlashStyle.ArrowBackground\n    ? direction === UP1 || direction === UP2 ? CHAR_ARROW_UP :\n      direction === DOWN1 || direction === DOWN2 ? CHAR_ARROW_DOWN : null\n    : null;\n\n  const dirClass = direction ? ` ` + direction : '';\n  const arrowClass = flashStyle === FlashStyle.ArrowOnly ? ' arrow-only' :\n    flashStyle === FlashStyle.ArrowBackground ? ' arrow' : '';\n\n  return (\n    <div\n      className={`${getGridCellClassName(column, value)}${dirClass}${arrowClass}`}\n      style={{ width }}>\n      <div className='flasher'>{arrow}</div>\n      {renderCellContent(props)}\n    </div>\n  );\n})\n\nfunction getDirection(direction, prevValue, newValue, column) {\n  if (!Number.isFinite(newValue)) {\n    return '';\n  } else if (prevValue !== null && newValue !== null){\n    let diff = newValue - prevValue;\n    if (diff) {\n      // make sure there is still a diff when reduced to number of decimals to be displayed\n      const { type: dataType } = column;\n      let decimals = dataType && dataType.formatting && dataType.formatting.decimals;\n      if (typeof decimals === 'number') {\n        diff = +newValue.toFixed(decimals) - +prevValue.toFixed(decimals);\n      }\n    }\n\n    if (diff) {\n      if (direction === '') {\n        if (diff < 0) {\n          return DOWN1;\n        } else {\n          return UP1;\n        }\n      } else if (diff > 0) {\n        if (direction === DOWN1 || direction === DOWN2 || direction === UP2) {\n          return UP1;\n        } else {\n          return UP2;\n        }\n      } else if (direction === UP1 || direction === UP2 || direction === DOWN2) {\n        return DOWN1;\n      } else {\n        return DOWN2;\n      }\n    }\n  }\n\n}\n\n\n","const Left = 'left';\nconst Right = 'right';\n\nconst None = 'none';\nconst Capitalize = 'capitalize';\n\nconst defaultFormatting = {align:Left, capitalization:None};\nconst defaultOptions = {formatting:defaultFormatting};\n\nexport default class StringFormatter {\n\n    static cellCSS({formatting=defaultFormatting}=defaultOptions){\n        const {align=Left, capitalization=None} = formatting;\n        const result = [];\n        if (align === Right){\n            result.push(Right);\n        }\n        if (capitalization !== Capitalize){\n            result.push(capitalization);\n        }\n        return result.length ? result.join(' ') : '';\n    }\n\n    static formatter(value){\n        return value;\n    }\n\n}\n\n","\nconst PUNCTUATION_STR = String.fromCharCode(8200);\nconst DIGIT_STR = String.fromCharCode(8199);\nexport const DECIMALS_AUTO = -1;\n\nconst Space = {\n    DIGIT : DIGIT_STR,\n    TWO_DIGITS : DIGIT_STR + DIGIT_STR,\n    THREE_DIGITS: DIGIT_STR + DIGIT_STR + DIGIT_STR,\n    FULL_PADDING : [\n        null,\n        PUNCTUATION_STR + DIGIT_STR,\n        PUNCTUATION_STR + DIGIT_STR + DIGIT_STR,\n        PUNCTUATION_STR + DIGIT_STR + DIGIT_STR + DIGIT_STR,\n        PUNCTUATION_STR + DIGIT_STR + DIGIT_STR + DIGIT_STR + DIGIT_STR\n    ]\n};\n\n// const LEADING_THOUSAND = DIGIT_STR + DIGIT_STR + DIGIT_STR + PUNCTUATION_STR;\n//const LEADING_FILL = LEADING_THOUSAND + LEADING_THOUSAND + LEADING_THOUSAND;\nconst LEADING_FILL = DIGIT_STR + DIGIT_STR + DIGIT_STR + DIGIT_STR + DIGIT_STR + DIGIT_STR + DIGIT_STR + DIGIT_STR + DIGIT_STR;\n\nexport const Align = {\n    Right : 'right',\n    Center : 'center',\n    Left : 'left'\n};\n\nconst Zero = {\n    DIGIT : '0',\n    TWO_DIGITS : '00',\n    THREE_DIGITS : '000',\n    FULL_PADDING : [\n        null,\n        '.0',\n        '.00',\n        '.000',\n        '.0000'\n    ]\n};\n\nfunction pad(n,dp, Pad){\n\n    let len = n.length;\n    const diff = dp - len;\n\n    if (diff > 0){\n\n        if (diff === 1){\n            n = n + Pad.DIGIT;\n        } else if (diff === 2){\n            n = n + Pad.TWO_DIGITS;\n        } else if (diff === 3){\n            n = n + Pad.THREE_DIGITS;\n        }\n    } else {\n\n        if (diff < 0){\n            n = n.slice(0, dp);\n            len = dp;\n        }\t\n\n        if (Pad === Space && n.charAt(len-1) === '0'){\n            n = n.replace(/0+$/,'');\n            return pad(n,dp,Pad);\n        }\n    }\n    return n;\t\n}\n\nexport function roundDecimal(value, align=Align.Right, decimals=4, zeroPad, alignOnDecimals){\n    //onsole.log(`roundDecimal ${value} dp ${decimals} align=${align} zeroPad ? ${zeroPad} alignOnDecimals ${alignOnDecimals}`);\n    if (value === undefined || typeof value !== 'number' || isNaN(value)){\n        return '';\n    }\n\n    let integral, fraction, Pad;\n\n    const [part1, part2=''] = value.toString().split('.');\n    const actualDecimals = part2.length;\n\n    integral = parseFloat(part1).toLocaleString();\n\n    if (align === Align.Left && alignOnDecimals){\n        integral = padLeft(integral);\n    }\n\n    if (decimals === DECIMALS_AUTO || actualDecimals === decimals){\n        fraction = part2;\n    } else if (actualDecimals > decimals){\n        fraction = parseFloat('0.'+part2).toFixed(decimals).slice(2);\n    } else {\n        if (Pad = zeroPad ? Zero \n                : alignOnDecimals && align !== Align.Left ? Space\n                : null) {\n\n            if (actualDecimals === 0){\n                fraction = Pad.FULL_PADDING[decimals];\n            } else {\n                fraction = pad(part2, decimals, Pad);\n            }\n        } else {\n            fraction = part2;\n        }\n    }\n\n    return integral + (fraction ? '.' + fraction : '');\n\n}\n\nexport function padLeft(value, maxLength=6){\n    return (LEADING_FILL + value).slice(-maxLength);\n}","import React from 'react';\nimport {roundDecimal} from '../utils/number';\nimport {DECIMALS_AUTO} from '../utils/number';\n\nconst Right = 'right';\nconst defaultFormatting = {align:Right, decimals: DECIMALS_AUTO};\nconst numberOr = (value, fallback) => typeof value === 'number' ? value : fallback;\n\nexport default class NumberFormatter {\n    \n    static cellCSS({formatting=defaultFormatting}){\n        const {align=Right} = formatting;\n        if (align === Right){\n            return Right;\n        } else {\n            return '';\n        }\n    }\n\n    static formatter(value, {formatting=defaultFormatting}){\n        const {align, decimals, zeroPad, alignOnDecimals=false} = formatting;\n        const numberOfDecimals = numberOr(decimals,4);\n        const number = typeof value === 'number' ? value :\n                       typeof value === 'string' ? parseFloat(value) :\n                       null;\n        return <div className='num'>{roundDecimal(number, align, numberOfDecimals, zeroPad, alignOnDecimals)}</div>;\n    }\n\n} ","import React, {useCallback} from 'react';\nimport {getGridCellClassName} from './cell-utils';\n\nimport './group-cell.css';\n\nexport default React.memo(({value, idx, cellClass, row, column, onClick, meta}) => {\n\n    const clickHandler = useCallback(e => {\n        e.preventDefault();\n        e.stopPropagation();\n        onClick(idx);\n    },[idx, onClick])\n\n    const isExpanded = row[meta.DEPTH] > 0;\n\n    return (\n        <div \n            className={getGridCellClassName(column, value, cellClass)}\n            style={{ width: column.width }} tabIndex={0} >\n            {getContent(row, column.columns, meta, isExpanded, clickHandler)}\n        </div>\n    );\n})\n\nfunction getContent(row, columns, meta, rowExpanded, onClick) {\n\n    const count = row[meta.COUNT];\n    const result = getValue(row,columns, meta)\n\n    if (result) {\n        const [value, depth] = result;\n        return (\n            <div className='GroupCell' style={{ paddingLeft: depth * 20 }} tabIndex={0}\n                onClick={onClick}>\n                <i className='material-icons icon'>{rowExpanded ? 'expand_more' : 'chevron_right'}</i>\n                <span className='group-value'>{value}</span>\n                <span> ({count})</span>\n            </div>\n        );\n    }\n}\n\nfunction getValue(row, columns, meta){\n    const depth = Math.abs(row[meta.DEPTH]);\n    for (let i=0;i<columns.length;i++){\n        const column = columns[i];\n        if (column.groupLevel === depth) {\n            return [row[column.key],i];\n        }\n    }\n    return null;\n}\n","import * as React from 'react';\nimport Cell from '../cells/cell.jsx';\nimport CheckboxRenderer from '../cells/rendering/renderers/checkbox-cell.jsx';\nimport BackgroundCellRenderer from '../cells/rendering/renderers/background-cell.jsx';\nimport StringFormatter from '../cells/formatting/formatters/string-formatter';\nimport NumberFormatter from '../cells/formatting/formatters/number-formatter.jsx';\nimport GroupCell from '../cells/group-cell.jsx';\n\nconst FormatRegistry = {};\nconst RegistryOfCellRenderers = {};\n\nexport default FormatRegistry;\n\nconst defaultFormatter = {\n    formatter: value => value == null ? '' : value,\n    cellCSS : () => ''\n};\n\nexport function registerFormatter(type, component){\t\n    FormatRegistry[type] = component;\n}\n\nexport function registerRenderer(type, component){\t\n    RegistryOfCellRenderers[type] = component;\n}\n\nexport function getFormatter(type=null){\n    const t = type === null\n        ? 'string'\n        : typeof type === 'string' ? type : type.name;\n         \n    return FormatRegistry[t] ? FormatRegistry[t] : defaultFormatter;\n}\n\n// is getCellRenderer the most appropriate name here, as what we return is a\n// JSX element, not a renderer\nexport function getCellRenderer(props){\n    const {column} = props;\n    const type = column && column.type && \n        (column.type.renderer \n            ? column.type.renderer.name \n            : column.type.name || null);\n    let Type;\n\n    if (type && (Type = RegistryOfCellRenderers[type])){\n        return <Type {...props} />;\n    } else if (column.isGroup) {\n        return <GroupCell {...props}/>;\n    } else {\n        return <Cell {...props}/>;\n    }\n}\n\n// register defaults\nregisterRenderer('selection-checkbox', CheckboxRenderer);\nregisterRenderer('background', BackgroundCellRenderer);\nregisterFormatter('number', NumberFormatter);\nregisterFormatter('string', StringFormatter);\n\n","let size;\n\nexport function getScrollbarSize() {\n    if (size === undefined) {\n\n        let outer = document.createElement('div');\n        outer.className = 'scrollable-content';\n        outer.style.width = '50px';\n        outer.style.height = '50px';\n        outer.style.overflowY = 'scroll';\n        outer.style.position = 'absolute';\n        outer.style.top = '-200px';\n        outer.style.left = '-200px';\n        const inner = document.createElement('div');\n        inner.style.height = '100px';\n        inner.style.width = '100%';\n        outer.appendChild(inner);\n        document.body.appendChild(outer);\n        const outerWidth = outer.offsetWidth;\n        const innerWidth = inner.offsetWidth;\n        document.body.removeChild(outer);\n        size = outerWidth - innerWidth;\n        outer = null;\n    }\n\n    return size;\n}\n\nexport function getColumnWidth(column) {\n    const {columns} = column;\n    let outer = document.createElement('div');\n    outer.className = 'Grid GroupbyHeaderCell';\n    outer.style.cssText = 'display:inline-block';\n    outer.innerText = columns.map(col => col.name).join(``);\n    document.body.appendChild(outer);\n    const w = outer.offsetWidth;\n    document.body.removeChild(outer);\n    outer = null;\n    return w + 50 + (columns.length-1) * 50;\n}\n","import {columnUtils, groupHelpers, ASC, DSC, sortUtils, arrayUtils} from '@heswell/data'\n\nimport * as Action from './actions';\nimport {Selection} from '../types';\nimport {getFormatter} from '../registry/datatype-registry.jsx';\n// will have to be mocked for testing\nimport {getColumnWidth} from '../utils/domUtils';\n\nconst {metaData} = columnUtils;\n\nexport default (state, action) => (handlers[action.type] || MISSING_HANDLER)(state, action);\n\nexport const DEFAULT_MODEL_STATE = {\n    width: 400,\n    height: 300,\n    headerHeight: 25,\n    rowHeight: 23,\n    minColumnWidth: 80,\n    groupColumnWidth: 'auto',\n    columns: [],\n    availableColumns: [],\n    // Note: values which have never been set are undefined, once set, they are unset to null\n    range: undefined,\n    sortBy: undefined,\n    groupBy: undefined,\n    groupState: undefined,\n    rowCount: 0,\n    scrollbarSize: 15,\n    scrollLeft: 0,\n    collapsedColumns: null,\n\n    displayWidth: 400,\n    totalColumnWidth: 0,\n    selectionModel: Selection.MultipleRow,\n\n    meta: null,\n\n    _columns: null,\n    _movingColumn: null,\n    _groups: null,\n    _overTheLine: 0,\n    _columnDragPlaceholder: null,\n    _headingDepth: 1,\n    _headingResize: undefined\n};\n\nconst RESIZING = {resizing: true};\nconst NOT_RESIZING = {resizing: false};\nconst EMPTY_ARRAY = [];\n\nconst MISSING_HANDLER = (state, action) => {\n    console.warn(`gridActionHandlers. No handler for action.type ${action.type}`);\n    return state;\n};\n\nconst MISSING_TYPE_HANDLER = (state) => {\n    console.warn(`gridActionHandlers. Invalid action:  missing attribute 'type'`);\n    return state;\n};\n\nconst MAX_OVER_THE_LINE = 20;\n\nconst MISSING_TYPE = undefined;\nconst handlers = {\n    [Action.INITIALIZE]: initialize,\n    [Action.SUBSCRIBED]: subscribed,\n    [Action.ROWCOUNT]: setRowCount,\n    [Action.SORT]: sort,\n    [Action.SORT_GROUP]: sortGroup,\n    [Action.GROUP]: setGroupBy,\n    [Action.groupExtend]: extendGroup,\n    [Action.COLUMN_RESIZE_BEGIN]: columnResizeBegin,\n    [Action.GRID_RESIZE]: gridResize,\n    [Action.COLUMN_RESIZE]: columnResize,\n    [Action.GROUP_COLUMN_WIDTH]: groupColumnWidth,\n    [Action.RESIZE_HEADING]: resizeHeading,\n    [Action.COLUMN_RESIZE_END]: columnResizeEnd,\n    [Action.MOVE_BEGIN]: moveBegin,\n    [Action.MOVE]: move,\n    [Action.MOVE_END]: moveEnd,\n    [Action.TOGGLE]: toggle,\n    [Action.RANGE]: setRange,\n    // [Action.SCROLLLEFT]: setScrollLeft,\n    [Action.SCROLL_LEFT]: autoScrollLeft,\n    [Action.SCROLL_RIGHT]: autoScrollRight,\n    [Action.COLUMN_COLLAPSE]: collapseColumn,\n    [Action.COLUMN_EXPAND]: expandColumn,\n    [MISSING_TYPE]: MISSING_TYPE_HANDLER\n};\n\nexport const initModel = model =>\n    initialize(DEFAULT_MODEL_STATE, {type: Action.INITIALIZE, gridState: model})\n  \n\nfunction initialize(state, action) {\n    const {\n        collapsedColumns=state.collapsedColumns,\n        columns=state.columns,\n        columnMap=null,\n        groupBy=state.groupBy,\n        groupColumnWidth=state.groupColumnWidth,\n        groupState=state.groupState,\n        height=state.height,\n        headerHeight=state.headerHeight,\n        minColumnWidth=state.minColumnWidth,\n        rowHeight=state.rowHeight,\n        range=state.range,\n        rowCount=0,\n        scrollbarSize=state.scrollbarSize,\n        sortBy=state.sortBy,\n        selectionModel=state.selectionModel,\n        width=state.width,\n    } = action.gridState;\n\n    const preCols = selectionModel === Selection.Checkbox\n        ? [{name: '', width: 25, sortable: false, type: {name: 'checkbox', renderer: {name: 'selection-checkbox'}}}]\n        :EMPTY_ARRAY;\n\n    const keyedColumns = columns.map(columnUtils.toKeyedColumn)\n    const _columns = preCols.concat(keyedColumns.map(toColumn));\n\n    const [_groups, _headingDepth] = splitIntoGroups(_columns, sortBy, groupBy, collapsedColumns, minColumnWidth);\n    // problem, this doesn't account for width of grouped cols, as we do it on the raw columns\n    const _totalColumnWidth = sumWidth(_columns, minColumnWidth);\n    const displayWidth = getDisplayWidth(height-headerHeight, rowHeight*rowCount, width, _totalColumnWidth, scrollbarSize);\n    const totalColumnWidth = measure(_groups, displayWidth, minColumnWidth, groupColumnWidth);\n\n    const map = columnMap === null || columns !== state.columns\n        ? columnUtils.buildColumnMap(columns)\n        : columnMap;\n\n    return {\n        ...state,\n        width,\n        height,\n        headerHeight,\n        rowHeight,\n        minColumnWidth,\n        meta: metaData(columns),\n        columns: keyedColumns,\n        columnMap: map,\n        sortBy,\n        groupBy,\n        range,\n        groupState,\n        collapsedColumns,\n        selectionModel,\n        _headingDepth,\n        _columns,\n        _groups,\n        totalColumnWidth,\n        displayWidth\n    };\n}\n\nfunction subscribed(state, action){\n    console.log(`subscribed ${JSON.stringify(action.columns)}`);\n    if (state.columns.length === 0){\n        return initialize(state, {gridState: {columns: action.columns}});\n    } else {\n        return state;\n    }\n}\n\nfunction setRowCount(state, {rowCount}) {\n    const {height, headerHeight,rowHeight,width,totalColumnWidth,scrollbarSize} = state;\n    const displayWidth = getDisplayWidth(height-headerHeight, rowHeight*rowCount, width, totalColumnWidth, scrollbarSize);\n    if (displayWidth === state.displayWidth){\n        return state;\n    } else {\n        return initialize(state, {gridState: {rowCount}});\n    }\n}\n\nfunction sort(state, {column, direction, preserveExistingSort=false}) {\n    const newSortCriteria = [[column.name, direction || (column.sorted === 1 ? DSC : ASC)]];\n    const sortBy = state.sortBy === null || preserveExistingSort !== true\n        ? newSortCriteria\n        : state.sortBy.concat(newSortCriteria);\n\n    // be careful - re-assigns keys to columns\n    return initialize(state, {gridState: {sortBy}});\n}\n\nfunction sortGroup(state, {column}) {\n    const {groupBy: existingGroupBy} = state;\n    if (existingGroupBy) {\n        const groupIdx = groupHelpers.indexOfCol(column.name, existingGroupBy);\n        if (groupIdx !== -1){\n            const [colName, sortDirection] = existingGroupBy[groupIdx];\n            const sortCol = sortDirection === ASC\n                ? [colName, DSC]\n                : [colName, ASC];\n\n            const groupBy = existingGroupBy.map((groupCol,i) => i === groupIdx\n                ? sortCol\n                : groupCol);\n\n            return initialize(state, {gridState: {groupBy}});\n        }\n    }\n    return state;\n}\n\nfunction extendGroup(state, {column, rowCount=state.rowCount}) {\n    const groupBy = groupHelpers.updateGroupBy(state.groupBy, column);\n    console.log(`modelReducer applyGroup new Group ${groupBy}`)\n    return initialize(state, {gridState: {groupBy, rowCount}});\n}\n\nfunction setGroupBy(state, {column, rowCount=state.rowCount}) {\n    const groupBy = [[column.name, ASC]];\n    return initialize(state, {gridState: {groupBy, rowCount}});\n}\n\nfunction toggle(state, {groupRow}) {\n    const groupState = toggleGroupState(groupRow, state)\n    return {...state, groupState};\n}\n\nfunction toggleGroupState(groupedRow, model) {\n\n    let { columns, columnMap, groupBy, groupState, meta } = model;\n    const groupLevel = groupedRow[meta.DEPTH];\n    const groupByIdx = groupBy.length - Math.abs(groupLevel);\n\n    const newGroupState = groupState === null ? {} : { ...groupState };\n    let stateEntry = newGroupState;\n\n    for (let i = 0; i <= groupByIdx; i++) {\n        const [groupCol] = groupBy[i];\n        const column = columns.find(col => col.name === groupCol);\n        const key = columnMap[column.name];\n        const groupVal = groupedRow[key];\n\n        if (i === groupByIdx) {\n            if (stateEntry[groupVal]) {\n                stateEntry[groupVal] = null;\n            } else {\n                stateEntry[groupVal] = i === groupBy.length - 1 ? true : {};\n            }\n        } else if (stateEntry[groupVal] === true) {\n            stateEntry = stateEntry[groupVal] = {};\n        } else {\n            // clone as we descend\n            stateEntry = stateEntry[groupVal] = { ...stateEntry[groupVal] };\n            if (!stateEntry) {\n                console.log(`Grid.toggleGroup something is wrong - trying to toggle a node whose parent is not expanded`);\n                return;\n            }\n        }\n    }\n\n    return newGroupState;\n\n}\n\nfunction setRange(state, {lo, hi}) {\n    const {range} = state;\n    if (range && lo === range.lo && hi === range.hi){\n        return state;\n    } else {\n        return {\n            ...state,\n            range: {\n                lo, hi\n            }\n        };\n    }\n}\n\nconst splitKeys = compositeKey => `${compositeKey}`.split(':').map(k => parseInt(k,10));\n\nfunction columnResizeBegin(state, {column}) {\n    const {updatedGroups: _groups} = column.isHeading\n        ? updateGroupHeading(state._groups, column, RESIZING,RESIZING,RESIZING)\n        : updateGroupColumn(state._groups, column, RESIZING);\n\n    let _headingResize = column.isHeading\n        ? {lastSizedCol: 0, ...getColumnPositions(_groups, splitKeys(column.key))}\n        : undefined;\n\n    return {...state, _groups, _headingResize};\n}\n\nfunction resizeHeading(state, {column, width}) {\n    if (width === column.width){\n        return state;\n    } else {\n        const diff = width - column.width;\n        const {lastSizedCol: pos, groupIdx, groupColIdx} = state._headingResize;\n        const [lastSizedCol,diffs] = getColumnAdjustments(pos,groupColIdx.length,diff);\n        const _headingResize = {lastSizedCol, groupIdx, groupColIdx};\n        let newState = state;\n        for (let i=0;i<diffs.length;i++){\n            if (typeof diffs[i] === 'number'){\n                const targetCol = state._groups[groupIdx].columns[groupColIdx[i]];\n                newState = columnResize({...newState, _headingResize}, {column: targetCol, width: targetCol.width + diffs[i]});\n            }\n        }\n        return newState;\n    }\n}\n\nfunction getColumnAdjustments(pos, numCols, diff){\n    const sign = diff < 0 ?-1 : 1;\n    const absDiff = diff*sign;\n    const numSlotsToFill = Math.min(absDiff,numCols);\n    const each = Math.floor(absDiff/numCols);\n    let diffs = absDiff % numCols;\n    const results = [];\n\n    for (let i=0;i<numSlotsToFill;i++,pos++){\n        if (pos === numCols){\n            pos = 0;\n        }\n        results[pos] = sign * (each + (diffs ? 1 : 0));\n        if (diffs){\n            diffs -=1;\n        }\n    }\n    return [pos, results];\n}\n\nfunction gridResize(state, {width,height}) {\n    return initialize(state, {gridState: {width,height}});\n}\n\n// called as a one-off rather than continuous resize, e.g. for grouped column\nfunction groupColumnWidth(state, {/*column, */width}){\n    return initialize(state, {gridState: {groupColumnWidth: width}});\n}\n\nfunction columnResize(state, {column, width}) {\n\n    if (column.width <= state.minColumnWidth && width <= column.width) {\n        return state;\n    }\n\n    const {updatedGroups: _groups, updatedGroup, groupIdx} = updateGroupColumn(state._groups, column, {width});\n    updateColumnHeading(updatedGroup);\n    const widthAdjustment = width - column.width;\n    const totalColumnWidth = state.totalColumnWidth + widthAdjustment;\n\n    if (totalColumnWidth < state.displayWidth) {\n        // what do we do about empty space\n    }\n\n    updatedGroup.width += widthAdjustment;\n\n    if (updatedGroup.locked) {\n        updatedGroup.renderWidth += widthAdjustment;\n        for (let i = groupIdx + 1; i < _groups.length; i++) {\n            const {locked, renderLeft, renderWidth} = _groups[i];\n            _groups[i] = {\n                ..._groups[i],\n                renderLeft: renderLeft + widthAdjustment,\n                renderWidth: locked ? renderWidth : renderWidth - widthAdjustment\n            };\n        }\n    }\n\n    const groupColumnWidth = column.isGroup\n        ? width\n        : state.groupColumnWidth;\n\n    return {...state, _groups, totalColumnWidth, groupColumnWidth};\n\n}\n\nfunction columnResizeEnd(state, {column}) {\n    const columns = column.isHeading\n        ? state.columns // TODO\n        : updateColumn(state.columns, column.name, {width: column.width});\n    const {updatedGroups: _groups} = column.isHeading\n        ? updateGroupHeading(state._groups, column, NOT_RESIZING,NOT_RESIZING,NOT_RESIZING)\n        : updateGroupColumn(state._groups, column, NOT_RESIZING);\n    const groupColumnWidth = column.isGroup ? column.width : state.groupColumnWidth;\n    return {...state, columns, _groups, groupColumnWidth, _headingResize: undefined};\n}\n\n// function setScrollLeft(state, {scrollLeft}) {\n//     return {...state,scrollLeft};\n// }\n\nfunction autoScrollLeft(state, {scrollDistance}) {\n    const {_overTheLine,  _movingColumn: column} = state;\n\n    const scrollLeft = Math.max(state.scrollLeft + scrollDistance, 0);\n    if (scrollLeft === state.scrollLeft){\n        return _overTheLine === 0\n            ? state\n            : { ...state, _overTheLine: 0 };\n    } else if (column) {\n        const _virtualLeft = column.left + scrollLeft;\n        const _movingColumn = {...column, _virtualLeft};\n        return _updateColumnPosition({...state, scrollLeft,_movingColumn}, column);\n    } else {\n        return state;\n    }\n}\n\nfunction autoScrollRight(state, {scrollDistance}) {\n    const {totalColumnWidth, displayWidth, _movingColumn: column, _overTheLine} = state;\n    const maxScroll = totalColumnWidth - displayWidth;\n    const scrollLeft = Math.min(state.scrollLeft + scrollDistance, maxScroll);\n    if (scrollLeft === state.scrollLeft){\n        return _overTheLine === 0\n            ? state\n            : { ...state, _overTheLine: 0 };\n    } else if (column) {\n        const _virtualLeft = column.left + scrollLeft;\n        const _movingColumn = {...column, _virtualLeft};\n        return _updateColumnPosition({...state, scrollLeft,_movingColumn}, column);\n    } else {\n        return state;\n    }\n}\n\nfunction moveBegin(state, {column, scrollLeft=0}) {\n    const _virtualLeft = getColumnLeft(state._groups,column);\n    const left = _virtualLeft - scrollLeft;\n    const moveBoundaries = getColumnMoveBoundaries(state._groups);\n    const {updatedGroups: _groups, groupIdx, groupColIdx} = replaceGroupColumn(state._groups,column,{ \n        key: 'move-target',\n        isPlaceHolder: true, \n        width: column.width,\n        formatter: column.formatter\n    });\n    const _movingColumn = {...column, moving: true,left,_virtualLeft,moveBoundaries,groupIdx,groupColIdx};\n    return {...state, _groups, _movingColumn, _columnDragPlaceholder: {groupIdx, groupColIdx}, scrollLeft};\n}\n\nfunction move(state, {distance, scrollLeft=0}) {\n    const column = state._movingColumn;    \n    const oldPosLeft = column.left;\n    const canScroll = state.displayWidth < state.totalColumnWidth;\n\n    // TODO take current scroll position into account when determining farRight\n    const farLeft = scrollLeft === 0 ? 0 : -MAX_OVER_THE_LINE;\n    const rightLine = state.displayWidth - column.width;\n    const farRight = rightLine + (canScroll ? MAX_OVER_THE_LINE : 0);\n    const newPosLeft = Math.min(farRight, Math.max(farLeft, oldPosLeft + distance));\n    // If we slip furthar than farLeft or farRight, we need to capture mouse position  \n\n    const _movingColumn = {...column, left: newPosLeft, _virtualLeft: newPosLeft + scrollLeft};\n    const overTheLineLeft = newPosLeft < 0;\n    const overTheLineRight = newPosLeft > rightLine;\n    const _overTheLine =\n        overTheLineLeft\n            ? newPosLeft\n            : overTheLineRight\n                ? newPosLeft - rightLine\n                : 0;\n\n    return _updateColumnPosition({...state, _overTheLine, _movingColumn},column);\n}\n\nfunction collapseColumn(state, {column}) {\n    const collapsedColumns = state.collapsedColumns === null\n        ? [column.label]\n        : state.collapsedColumns.concat(column.label);\n\n    return initialize(state, {gridState: {collapsedColumns}});\n}\n\nfunction expandColumn(state, {column}) {\n    const updatedCollapsedColumns = state.collapsedColumns.filter(name => name !== column.label);\n    const collapsedColumns = updatedCollapsedColumns.length === 0\n        ? null\n        : updatedCollapsedColumns;\n\n    return initialize(state, {gridState: {collapsedColumns}});\n}\n\n// This function manipulates state without cloning - it is an internal function called on \n// an already transformed state object to perform additional transformation. \nfunction _updateColumnPosition(state,prevColumn) {\n\n    const column = state._movingColumn;\n    const { left: positionsLeft, right: positionsRight } = column.moveBoundaries;\n    const { groupColIdx: columnPosition } = column;\n\n    let insertionIdx = -1;\n    let insertionGroupIdx = -1;\n    let groupColCount = 0;\n    let earlierGroupColCount = 0;\n    let lastGroup = 0;\n\n    if (prevColumn._virtualLeft > column._virtualLeft) /* moving left */ {\n        for (let idx=0,i=0; i < positionsLeft.length && insertionIdx === -1; i+=2, idx++) {\n            insertionGroupIdx = positionsLeft[i+1];\n            if (insertionGroupIdx !== lastGroup) {\n                earlierGroupColCount = groupColCount;\n                lastGroup = insertionGroupIdx;\n            }\n            groupColCount += 1;\n            const adjustment = idx > columnPosition ? column.width : 0;\n            const position = positionsLeft[i] - adjustment;\n            if (prevColumn._virtualLeft >= position && column._virtualLeft < position) {\n                insertionIdx = (adjustment ? idx -1 : idx) - earlierGroupColCount;\n            }\n        }\n    } else /* moving right */{\n        // TODO need an adjustment if we are dragging from one group to another\n        for (let idx=0,i=0; i < positionsRight.length && insertionIdx === -1; i+=2, idx++) {\n            insertionGroupIdx = positionsRight[i+1];\n            if (insertionGroupIdx !== lastGroup) {\n                earlierGroupColCount = groupColCount;\n                lastGroup = insertionGroupIdx;\n            }\n            groupColCount += 1;\n            const adjustment = idx < columnPosition ? column.width : 0;\n            const position = positionsRight[i] + adjustment;\n            if (prevColumn._virtualLeft + prevColumn.width < position && column._virtualLeft+column.width >= position) {\n                insertionIdx = (adjustment ? idx+1 : idx) - earlierGroupColCount;\n            }\n        }\n    }\n\n    if (insertionIdx !== -1) {\n        const {groupIdx, groupColIdx} = state._columnDragPlaceholder;\n        const _columnDragPlaceholder = {groupIdx: insertionGroupIdx, groupColIdx: insertionIdx};\n        const {updatedGroups: _groups} = moveGroupColumn(state._groups, groupIdx, groupColIdx, insertionGroupIdx, insertionIdx);  \n        return {...state, _groups, _columnDragPlaceholder};\n    } else {\n        return state;\n    }\n}\n\nfunction moveEnd(state, {column}) {\n    // eslint-disable-next-line no-unused-vars\n    const {groupIdx, groupColIdx,moveBoundaries,left, ...movingColumn} = state._movingColumn;\n    const {groupColIdx:finalIdx} = state._columnDragPlaceholder;\n    const {updatedGroups:_groups} = replaceGroupColumn(state._groups,{key:'move-target'}, movingColumn);    \n    const columns = reorderColumns(state.columns, column, finalIdx);\n    replaceColumnHeadings(_groups, state._headingDepth);\n    return {...state, columns, _groups, _movingColumn:null, _columnDragPlaceholder:null};\n}\n\nfunction updateColumn(columns, name, updates){\n    return columns.map(column => column.name === name\n        ? {...column, ...updates}\n        : column\n    );\n}\n\nfunction reorderColumns(columns, column, idx){\n    const from = columns.findIndex(c => c.name === column.name);\n    const results = columns.slice();\n    const [col] = results.splice(from,1);\n    results.splice(idx,0,col);\n    return results;\n}\n\nfunction moveGroupColumn(groups, fromGroupIdx, fromColumnIdx, toGroupIdx, toColumnIdx){\n\n    const column = groups[fromGroupIdx].columns[fromColumnIdx];\n    const updatedGroups = groups.slice();\n\n    if (fromGroupIdx === toGroupIdx){\n        const updatedGroup = cloneGroup(updatedGroups[fromGroupIdx]);\n        updatedGroup.columns.splice(fromColumnIdx,1);\n        updatedGroup.columns.splice(toColumnIdx,0,column);\n        updatedGroups[fromGroupIdx] = updatedGroup;\n\n    } else {\n        const shiftLeft = fromGroupIdx > toGroupIdx;\n        updatedGroups[fromGroupIdx] = removeColumnFromGroup(updatedGroups[fromGroupIdx],fromColumnIdx,shiftLeft);\n        updatedGroups[toGroupIdx] = addColumnToGroup(updatedGroups[toGroupIdx], column, toColumnIdx, shiftLeft);\n    }\n\n    return {updatedGroups};        \n\n}\n\nfunction cloneGroup(group){\n    return { ...group, columns: [...group.columns] };\n}\n\nfunction removeColumnFromGroup(group, columnIdx, shiftLeft){\n    const updatedGroup = cloneGroup(group);\n    const column = updatedGroup.columns[columnIdx];\n    updatedGroup.columns.splice(columnIdx,1);\n    updatedGroup.width -= column.width;\n    updatedGroup.renderWidth -= column.width;\n    if (shiftLeft){\n        updatedGroup.renderLeft += column.width;\n    }\n    return updatedGroup;\n}\n\nfunction addColumnToGroup(group, column, columnIdx,shiftLeft){\n    const updatedGroup = cloneGroup(group);\n    updatedGroup.columns.splice(columnIdx,0,column);\n    updatedGroup.width += column.width;\n    updatedGroup.renderWidth += column.width;\n    if (!shiftLeft){\n        updatedGroup.renderLeft -= column.width;\n    }\n    return updatedGroup;\n}\n\nfunction updateGroupHeading(groups, column, headingUpdates, subHeadingUpdates, columnUpdates){\n    const keys = splitKeys(column.key);\n    const { groupIdx, groupHeadingIdx, headingColIdx } = getHeadingPosition(groups, column);\n\n    const group = groups[groupIdx];\n    const updatedGroup = { ...group, headings: [...group.headings]};\n\n    // 1) Apply changes to the target heading ...\n    const heading = updatedGroup.headings[groupHeadingIdx];\n    const updatedHeading = [...heading];\n    updatedGroup.headings[groupHeadingIdx] = updatedHeading;\n    updatedHeading[headingColIdx] = {...column, ...headingUpdates};\n    \n    // 2) Optionally, apply updates to nested sub-headings ...\n    if (subHeadingUpdates){\n        for (let i=0;i<groupHeadingIdx;i++){\n            const h = updatedGroup.headings[i];\n            let updatedH = null;\n            for (let j = 0; j < h.length; j++) {\n                if (column.key.indexOf(h[j].key) !== -1) {\n                    updatedH = updatedH || [...h];\n                    updatedH[j] = { ...h[j], ...subHeadingUpdates };\n                }\n            }\n            if (updatedH !== null) {\n                updatedGroup.headings[i] = updatedH;\n            }\n        }\n    }\n\n    // 3) Optionally, apply updates to underlying columns ...\n    if (columnUpdates){\n        const { groupColIdx } = getColumnPositions(groups, keys);\n        updatedGroup.columns = [...group.columns];\n        groupColIdx.forEach(idx => {\n            const updatedColumn = { ...updatedGroup.columns[idx], ...columnUpdates };\n            updatedGroup.columns[idx] = updatedColumn;\n        });\n    }\n\n    const updatedGroups = [...groups];\n    updatedGroups[groupIdx] = updatedGroup;\n    return {updatedGroups, updatedGroup};\n\n}\n\nfunction updateGroupColumn(groups, column, updates){\n    const { groupIdx, groupColIdx } = getColumnPosition(groups, column);\n    const group = groups[groupIdx];\n    const updatedGroup = { ...group, columns: [...group.columns] };\n    const updatedColumn = { ...column, ...updates };\n    updatedGroup.columns[groupColIdx] = updatedColumn;\n    const updatedGroups = [...groups];\n    updatedGroups[groupIdx] = updatedGroup;\n    return {updatedGroups, updatedGroup, updatedColumn, groupIdx, groupColIdx};\n}\n\nfunction replaceGroupColumn(groups, targetColumn, replacementColumn){\n    const { groupIdx, groupColIdx } = getColumnPosition(groups, targetColumn);\n    const group = groups[groupIdx];\n    const updatedGroup = { ...group, columns: [...group.columns] };\n    updatedGroup.columns[groupColIdx] = replacementColumn;\n    const updatedGroups = [...groups];\n    updatedGroups[groupIdx] = updatedGroup;\n    return {updatedGroups, updatedGroup, groupIdx, groupColIdx};\n}\n\nfunction getHeadingPosition(groups, column) {\n    for (let i = 0; i < groups.length; i++) {\n        const {headings=null} = groups[i];\n        for (let j=0;headings && j<headings.length;j++){\n            const idx = headings[j].findIndex(h => h.key === column.key && h.label === column.label);\n            if (idx !== -1) {\n                return { groupIdx: i, groupHeadingIdx: j, headingColIdx: idx };\n            }\n        }\n\n    }\n    return { groupIdx: -1, groupHeadingIdx: -1, headingColIdx: -1 };\n}\n\nfunction getColumnPosition(groups, column) {\n    for (let i = 0; i < groups.length; i++) {\n        const idx = groups[i].columns.findIndex(c => c.key === column.key);\n        if (idx !== -1) {\n            return { groupIdx: i, groupColIdx: idx };\n        }\n    }\n    return { groupIdx: -1, groupColIdx: -1 };\n}\n\nconst columnKeysToIndices = (keys,columns) =>\n    keys.map(key => columns.findIndex(c => c.key === key));\n\nconst columnKeysToColumns = (keys,columns) =>\n    keys.map(key => columns.find(c => c.key === key));\n\nfunction getColumnPositions(groups, keys) {\n    for (let i = 0; i < groups.length; i++) {\n        const indices = columnKeysToIndices(keys, groups[i].columns);\n        if (indices.every(key => key !== -1)) {\n            return { groupIdx: i, groupColIdx: indices };\n        }\n    }\n    return { groupIdx: -1, groupColIdx: [] };\n}\n\n\n// TODO missing presenter/formatter etc details\nfunction toColumn(column) {\n    //TODO roll cellCSS into className\n    const {name, label=name} = column;\n    // >>>>> Don't like rolling functions into model, think about this\n    // we should keep the model clean here and enrich it beofre passing into render tree\n    // type is not sufficient, need to look at formatting metadata\n    const presenter = getFormatter(column.type);\n    return { \n        ...column, \n        label: column.heading \n            ? Array.isArray(column.heading) ? column.heading[0] : column.heading\n            : label,\n        formatter: presenter.formatter, \n        cellCSS: presenter.cellCSS(column.type)            \n    };\n}\n\nconst getWidth = minWidth => column => Math.max(column.width || 0, minWidth);\nconst add = (val1, val2) => val1 + val2;\nfunction sumWidth(list, minWidth = 0) {\n    return list.length === 0 ? 0 : list.map(getWidth(minWidth)).reduce(add);\n}\n\nfunction updateColumnHeading(group){\n    if (group.headings){\n        const columns = group.columns;\n        group.headings = group.headings.map(heading => heading.map(colHeading => {\n            const indices = columnKeysToIndices(splitKeys(colHeading.key),columns);\n            const colWidth = indices.reduce((sum, idx) => sum + (columns[idx].width), 0);\n            return colWidth === colHeading.width \n                ? colHeading\n                : {...colHeading, width: colWidth};\n        }));\n    }\n}\n\nfunction replaceColumnHeadings(groups,maxHeadingDepth){\n\n    if (maxHeadingDepth > 1){\n        groups.forEach(group => {\n            const headings = [];\n            group.columns.forEach(column => {\n                addColumnToHeadings(maxHeadingDepth, column, headings);\n            });\n            group.headings = headings;\n        });\n    }\n\n    return maxHeadingDepth;\n}\n\nfunction endsWith(string, subString){\n    const str = typeof string === 'string'\n        ? string\n        : string.toString();\n    \n    return subString.length >= str.length\n        ? false\n        : str.slice(-subString.length) === subString;    \n\n}\n\nfunction splitIntoGroups(columns, sortBy=null, groupBy=EMPTY_ARRAY, collapsedColumns=null, minColumnWidth) {\n    const sortMap = sortUtils.sortByToMap(sortBy);\n    const groups = [];\n    const maxHeadingDepth = columns.length === 0\n        ? 0\n        : Math.max(...columns.map(({heading}) => Array.isArray(heading) ? heading.length: 1));\n\n    let group = null;\n\n    const [groupColumn, nonGroupedColumns] = extractGroupColumn(columns, groupBy, minColumnWidth);\n    if (groupColumn){\n        const headings = maxHeadingDepth > 1 ? [] : undefined;\n        groups.push(group = { locked: false, columns: [groupColumn], headings, width:0, renderWidth:0, renderLeft:0 });\n        addColumnToHeadings(maxHeadingDepth, groupColumn, group.headings);\n    }\n\n    for (let i = 0; i < nonGroupedColumns.length; i++) {\n        const column = nonGroupedColumns[i];\n        const {key: columnKey, name, locked=false} = column;\n\n        if (group === null || group.locked !== locked) {\n            const headings = maxHeadingDepth > 1 ? [] : undefined;\n            groups.push(group = { locked, columns: [], headings, width:0, renderWidth:0, renderLeft:0 });\n        }\n\n        // TODO for each collapsed heading, insert a placeholder\n        const sorted = sortMap[name];\n        addColumnToHeadings(maxHeadingDepth, column, group.headings, collapsedColumns);\n        let {hidden} = column;\n        if (group.headings){\n            const lastColHeaders = group.headings.map(heading => heading[heading.length-1]);\n            const collapsedHeading = lastColHeaders.find(header => header.collapsed);\n            hidden = hidden || !!collapsedHeading;\n            if (collapsedHeading && collapsedHeading.key === columnKey){\n                group.columns.push({ key: collapsedHeading.key, isPlaceHolder: true, width: 25 });\n            }\n        }\n        group.columns.push({ ...column, sorted, hidden });\n          \n    }\n\n    return [groups, maxHeadingDepth];\n}\n\nfunction extractGroupColumn(columns, groupBy, minColumnWidth){\n    if (groupBy && groupBy.length > 0){\n        const isGroup = ({name}) => groupHelpers.indexOfCol(name, groupBy) !== -1\n        // Note: groupedColumns will be in column order, not groupBy order\n        const [groupedColumns, rest] = arrayUtils.partition(columns, isGroup);\n        if (groupedColumns.length !== groupBy.length){\n            throw Error(`extractGroupColumn: no column definition found for all groupBy cols ${JSON.stringify(groupBy)} `);\n        }\n        const groupCount = groupBy.length;\n        const groupCols = groupBy.map(([name], idx) => {\n            // Keep the cols in same order defined on groupBy\n            const column = groupedColumns.find(col => col.name === name);\n            return {\n                ...column,\n                groupLevel: groupCount - idx\n            }\n        })\n        const groupCol = {\n            key: -1,\n            name: 'group-col',\n            isGroup: true,\n            columns: groupCols,\n            width: Math.max(...groupCols.map(col => col.width || minColumnWidth)) + 50\n        };\n        return [groupCol, rest];\n    }\n    return [null, columns]\n}\n\nfunction addColumnToHeadings(maxHeadingDepth, column, headings, collapsedColumns=null){\n    const sortable = false;\n    const collapsible = true;\n    const isHeading = true;\n\n    const {key, heading: colHeader=[column.name], width} = column;\n    for (let depth = 1; depth < maxHeadingDepth; depth++) {\n\n        const heading = headings[depth-1] || (headings[depth-1] = []);\n        const colHeaderLabel = colHeader[depth];\n        const lastHeading = heading.length > 0\n            ? heading[heading.length-1]\n            : null;\n\n        if (colHeaderLabel !== undefined){\n\n            if (lastHeading && lastHeading.label === colHeader[depth]){\n                lastHeading.width += width;\n                lastHeading.key += `:${key}`;\n            } else {\n                const collapsed = collapsedColumns && collapsedColumns.indexOf(colHeaderLabel) !== -1;\n                let hide = false;\n                if (collapsed){\n                    // lower depth headings are subheadings, nested subheadings below a collapsed heading\n                    // will be hidden. Q: would it be better to iterate higher to lower ? When we encounter\n                    // a collapsed heading for a given column, the first subheading at any lower level \n                    // will already have been created, so we need to hide them.\n                    for (let d=0;d<depth-1;d++){\n                        const head = headings[d];\n                        head[head.length-1].hidden = true;\n                    } \n\n                } else if (depth < maxHeadingDepth-1){\n                    // ...likewise if we encounter a subheading, which is not the first for a given\n                    // higher -level heading, and that higher-level heading is collapsed, we need to hide it.\n                    for (let d=depth;d<maxHeadingDepth;d++){\n                        const head = headings[d];\n                        const colHeadingLabel = colHeader[d+1];\n                        if (head && head.length && colHeaderLabel){\n                            const {collapsed: isCollapsed,hidden,label} = head[head.length - 1];\n                            if ((isCollapsed || hidden) && label === colHeadingLabel){\n                                hide = true;\n                            }\n                        }\n                    } \n\n                }\n                heading.push({key,label: colHeaderLabel,width,sortable,collapsible,collapsed,hidden: hide,isHeading});\n            }\n        } else {\n\n            const lowerDepth = headings[depth-2];\n            const lastLowerDepth = lowerDepth\n                ? lowerDepth[lowerDepth.length-1]\n                : null;\n\n            if (lastLowerDepth && lastLowerDepth.key === key){\n            // Need to check whether a heading at level below is collapsed\n                heading.push({key,label: '',width,collapsed: lastLowerDepth.collapsed,sortable,isHeading});\n            } else if (lastLowerDepth && endsWith(lastLowerDepth.key,`:${key}`)){\n                lastHeading.width += width;\n                lastHeading.key += `:${key}`;\n            } else {\n                heading.push({key,label: '',width,isHeading});\n            }\n        }\n    }\n\n}\n\nfunction measure(groups, displayWidth, minColumnWidth, groupColumnWidth) {\n    if (groups.length === 0){\n        return 0;\n    }\n    const columns = flatMap(groups);\n    const [firstColumn] = columns;\n    if (groupColumnWidth && firstColumn.isGroup) {\n        firstColumn.width = Math.max(\n            groupColumnWidth === 'auto' ? getColumnWidth(firstColumn) : groupColumnWidth,\n            firstColumn.width);\n    }\n\n    const visibleColumns = columns.filter(col => !col.hidden);\n    const [unsizedCols, sizedCols] = partition(visibleColumns, col => col.width === undefined, col => !col.hidden);\n    let totalColumnWidth = sumWidth(sizedCols);\n    const defaultCount = visibleColumns.length - sizedCols.length;\n    //TODO pluggable width assignment algo\n    // default behaviour - give each columns at least the min col width. If there is surplus space,\n    // divide it equally between the no-width columns. (this can leave a remainder)\n    const defaultWidth = defaultCount === 0\n        ? 0\n        : Math.max(Math.floor((displayWidth - totalColumnWidth) / defaultCount), minColumnWidth);\n    totalColumnWidth += defaultCount * defaultWidth;\n    unsizedCols.forEach(column => column.width = defaultWidth);\n\n    let lockedGroupWidth = 0;\n    let scrollGroupWidth = 0;\n\n    //TODO account for collapsed/hidden headings and columns\n    groups.forEach(group => {\n        group.width = sumWidth(group.columns.filter(col => !col.hidden));\n        if (group.locked) {\n            lockedGroupWidth += group.width;\n        }\n        if (group.headings){\n            console.log(`group headings ${JSON.stringify(group.headings,null,2)}`)\n            group.headings.forEach(heading =>\n                heading.forEach(colHeading => {\n                    colHeading.width = sumWidth(columnKeysToColumns(splitKeys(colHeading.key),group.columns).filter(col => !col.hidden));\n                }\n                ));\n        }\n    });\n\n    // Note: there is only ever one scrollGroup, can be two locked groups (at either end)\n    if (displayWidth - lockedGroupWidth < minColumnWidth) {\n        // Locked group consumes too much of available space, not enough room to host the scrolling group(s). \n        // Fall back to single grid-wide scrollbar and no locked groups\n        groups = [{ locked: false, width: totalColumnWidth, columns: columns }];\n        scrollGroupWidth = displayWidth; // shouldn't this be totalColumnWidth ?\n    } else {\n        scrollGroupWidth = displayWidth - lockedGroupWidth;\n    }\n\n    for (let left = 0, i = 0; i < groups.length; i++) {\n        const group = groups[i];\n        group.renderLeft = left;\n        group.renderWidth = group.locked ? group.width : scrollGroupWidth;\n        left += group.renderWidth;\n    }\n\n    return totalColumnWidth;\n\n}\n\nfunction flatMap(groups) {\n    let columns = [];\n    groups.forEach(group => {\n        columns = columns.concat(group.columns);\n    });\n    return columns;\n}\n\nfunction partition(list, test1, test2=null) {\n    const results1 = [];\n    const misses = [];\n    const results2 = test2===null ? null : [];\n\n    for (let i = 0; i < list.length; i++) {\n        if (test1(list[i])) {\n            results1.push(list[i]);\n        } else if (test2 !== null && test2(list[i])) {    \n            results2.push(list[i]);\n        } else {\n            misses.push(list[i]);\n        }\n    }\n\n    return test2 === null\n        ? [results1, misses]\n        : [results1, results2, misses];\n}\n\nfunction getDisplayWidth(clientHeight, contentHeight, width, totalColumnWidth, scrollbarSize) {\n\n    const horizontalScrollbar = scrollbarNeeded(totalColumnWidth, width, scrollbarSize);\n    const verticalScrollbar = scrollbarNeeded(contentHeight, clientHeight, scrollbarSize);\n\n    if (verticalScrollbar === 'YES') {\n        return width - scrollbarSize;\n    } else if (verticalScrollbar === 'NO') {\n        return width;\n    } else if (horizontalScrollbar === 'NO') {\n        return width;\n    } else if (horizontalScrollbar === 'YES') {\n        return width - scrollbarSize;\n    } else if (horizontalScrollbar === 'MAYBE') {\n        // is this right ?\n        return width - scrollbarSize;\n    }\n\n}\n\nfunction scrollbarNeeded(contentSize, containerSize, scrollbarSize) {\n    return contentSize > containerSize ? 'YES' :\n        contentSize <= (containerSize - scrollbarSize) ? 'NO' :\n            'MAYBE';\n}\n\nfunction getColumnLeft(groups, column) {\n    let result = 0;\n    for (let i = 0; i < groups.length; i++) {\n        const { columns } = groups[i];\n        for (let j = 0; j < columns.length; j++) {\n            if (columns[j] === column) {\n                return result;\n            }\n            result += columns[j].width;\n        }\n    }\n    return result;\n}\n\n// do we need to calculate them all - will it be fast enough to calculate \n// them as we move along the container ?\nfunction getColumnMoveBoundaries(groups) {\n    const results = {\n        left: [],\n        right: []\n    };\n\n    let position = 0;\n\n    for (let i = 0; i < groups.length; i++) {\n        const { columns } = groups[i];\n        for (let j = 0; j < columns.length; j++) {\n            results.left.push(position + 20,i);\n            position += columns[j].width;\n            results.right.push(position - 20,i);\n        }\n    }\n    return results;\n}\n","import React, {useRef, useCallback} from 'react';\n\nconst NOOP = () => {}\n\nexport default allProps => {\n    const {\n        component:Component,\n        ...props\n    } = allProps;\n\n    const {onDrag, onDragStart=NOOP, onDragEnd=NOOP, children: child} = allProps;\n    const position = useRef({x:0,y:0});\n    const dragState = useRef(null);\n\n    const handleMouseDown = e => {\n        // what is dragState supposed to be exactly ?\n        const newDragState = onDragStart(e);\n        if (newDragState === null && e.button !== 0) {\n            return;\n        }\n\n        position.current.x = e.clientX;\n        position.current.y = e.clientY;\n\n        window.addEventListener('mouseup', onMouseUp);\n        window.addEventListener('mousemove', onMouseMove);\n\n        dragState.current = newDragState;\n\n        if (e.stopPropagation) {\n            e.stopPropagation();\n        }\n\n        if (e.preventDefault) {\n            e.preventDefault();\n        }        \n    }\n\n    const onMouseMove = useCallback(e => {\n        if (dragState.current === null) {\n            return;\n        }\n\n        if (e.stopPropagation) {\n            e.stopPropagation();\n        }\n\n        if (e.preventDefault) {\n            e.preventDefault();\n        }\n\n        const x = e.clientX;\n        const y = e.clientY;\n\n        const deltaX = x - position.current.x;\n        const deltaY = y - position.current.y;\n\n        position.current.x = x;\n        position.current.y = y;\n\n        onDrag(e, deltaX, deltaY);\n    },[])\n\n    const onMouseUp = useCallback(e => {\n        cleanUp();\n        onDragEnd(e, dragState.drag);\n        dragState.current = null;\n    },[]);\n\n    const cleanUp = () => {\n        window.removeEventListener('mouseup', onMouseUp);\n        window.removeEventListener('mousemove', onMouseMove);\n    }\n\n    if (child && !Array.isArray(child)){\n        return React.cloneElement(child, {...props, onMouseDown: handleMouseDown});\n    } else \n    if (Component){\n        return <Component onMouseDown={handleMouseDown} {...props}/>;\n    } else {\n        return <div onMouseDown={handleMouseDown} {...props}/>;\n    }\n}\n","import React from 'react';\n\nexport const Direction = {\n  ASC: 'asc',\n  DSC: 'desc'\n}\n\nexport default ({direction}) =>\n  direction === Direction.ASC\n    ? <i className=\"material-icons\">arrow_drop_up</i>\n    : <i className=\"material-icons\">arrow_drop_down</i>\n","import React from 'react';\nimport SortIcon, {Direction} from './sort-icon.jsx';\n\nexport default ({column, multiColumnSort}) => {\n  const {sortable, sorted, isPlaceHolder} = column;\n\n  if (sortable === false || isPlaceHolder || !sorted) {\n    return null;\n  }\n\n  const direction = sorted < 0\n    ? Direction.DSC\n    : Direction.ASC;\n\n  return multiColumnSort ? (\n      <div className={`sort-col multi-col ${direction}`}>\n          <SortIcon direction={direction}/>\n          <span className='sort-col-num'>{Math.abs(sorted)}</span>\n      </div>\n  ) : (\n      <div className=\"sort-col single-col\">\n          <SortIcon direction={direction}/>\n      </div>\n\n  )\n}","import React from 'react';\n\nexport default React.createContext(null);\n","import React, {useContext} from 'react';\nimport * as Action from '../model/actions';\nimport GridContext from '../grid-context';\n\nexport default ({column}) => {\n\n  const {dispatch} = useContext(GridContext);\n\n  const handleToggleCollapse = () => {\n    const action = column.collapsed ? Action.COLUMN_EXPAND : Action.COLUMN_COLLAPSE;\n    dispatch({ type: action, column });\n  }\n\n  if (!column.collapsible || column.isHidden){\n    return null;\n  }\n\n  return (\n    <i className='material-icons toggle-icon' onClick={handleToggleCollapse}>{'arrow_right'}</i>\n  );\n}","\nimport React, { useRef, useCallback, useEffect} from 'react';\nimport cx from 'classnames';\nimport Draggable from '../draggable/draggable.jsx';\nimport SortIndicator from './sort-indicator.jsx';\nimport ToggleIcon from './toggle-icon.jsx';\n\nimport './header-cell.css';\n\nconst Label = ({ column }) =>\n    column.collapsed || column.hidden\n        ? ''\n        : column.label || '';\n\nexport default ({\n    className: propClassName,\n    column: col,\n    multiColumnSort,\n    onClick=() => {},\n    onResize,\n    onMove,\n    onContextMenu\n}) => {\n\n    const dragging = useRef(false);\n    const wasDragging = useRef(false);\n    const column = useRef(col);\n    const el = useRef(null);\n    const position = useRef({x:0,y:0})\n\n    useEffect(() => {\n        column.current = col;\n    }, [col])\n\n    const handleClick = () => {\n\n        if (wasDragging.current) {\n            wasDragging.current = false;\n        } else {\n            onClick(column.current);\n        }\n    }\n\n    const onMouseUp = useCallback(() => {\n        cleanUp();\n        if (dragging.current) {\n\n            wasDragging.current = true;\n            // shouldn't we set dragging to false ?\n            onMove('end', column.current);\n        } else {\n            // drag aborted\n        }\n    },[])\n\n    const onMouseMove = useCallback(e => {\n        console.log(`onMouseMove`)\n        if (e.stopPropagation) {\n            e.stopPropagation();\n        }\n\n        if (e.preventDefault) {\n            e.preventDefault();\n        }\n\n        const x = e.clientX;\n        const y = e.clientY;\n        const deltaX = x - position.current.x;\n\n        if (dragging.current) {\n            position.current.x = x;\n            position.current.y = y;\n            onMove('move', column.current, deltaX);\n\n        } else {\n            if (Math.abs(deltaX) > 3) {\n\n                dragging.current = true;\n                position.current.x = x;\n                position.current.y = y;\n                onMove('begin', column.current, deltaX);\n            }\n        }\n    },[])\n\n    const handleMouseDown = e => {\n        position.current = {x: e.clientX, y: e.clientY};\n        window.addEventListener('mouseup', onMouseUp);\n        window.addEventListener('mousemove', onMouseMove);\n    }\n\n    const cleanUp = () => {\n        window.removeEventListener('mouseup', onMouseUp);\n        window.removeEventListener('mousemove', onMouseMove);\n    }\n\n    const handleContextMenu = e => {\n        onContextMenu(e, 'header', { column: column.current });\n    }\n\n    const handleResizeStart = () => onResize('begin', column.current);\n    \n\n    const handleResize = useCallback((e) => {\n        const width = getWidthFromMouseEvent(e);\n        if (width > 0) {\n            console.log(`resize ${width} resizing ? ${column.resizing}`)\n            onResize('resize', column.current, width);\n        }\n    },[])\n\n    const handleResizeEnd = (e) => {\n        wasDragging.current = true; // is this right ?\n        const width = getWidthFromMouseEvent(e);\n        onResize('end', column.current, width);\n    }\n\n    const getWidthFromMouseEvent = e => {\n        const right = e.pageX;\n        const left = el.current.getBoundingClientRect().left;\n        return right - left;\n    }\n\n    const className = cx(\n        'HeaderCell',\n        col.className,\n        col.cellCSS,\n        propClassName, {\n            'HeaderCell--resizing': col.resizing,\n            'hidden': col.hidden,\n            'collapsed': col.collapsed\n        });\n\n    const style = { width: col.width };\n\n    if (col.hidden && col.width === 0) {\n        style.display = 'none';\n    }\n\n    return (\n        <div ref={el} className={className} style={style}\n            onClick={handleClick} onMouseDown={handleMouseDown} onContextMenu={handleContextMenu}>\n            <SortIndicator column={col} multiColumnSort={multiColumnSort}/>\n            <ToggleIcon column={col}/>\n            <div className='InnerHeaderCell'>\n                <div className='cell-wrapper'>\n                    <Label column={col}/>\n                </div>\n            </div>\n            {col.resizeable !== false &&\n                <Draggable className='resizeHandle'\n                    onDrag={handleResize}\n                    onDragStart={handleResizeStart}\n                    onDragEnd={handleResizeEnd} />\n                }\n        </div>\n    );\n}\n\n","import React, {useRef, useEffect, useCallback} from 'react';\nimport cx from 'classnames';\nimport Draggable from '../draggable/draggable.jsx';\nimport {expandStatesfromGroupState} from '../model/utils';\n\nimport './group-header-cell.css';\n\nconst ColHeader = (props) => {\n    const {column, className, onClick, onRemoveColumn, expandState, onToggle} = props\n    const expanded = expandState === 1;\n    return (\n        <div className={cx('ColHeader', className,{expanded, collapsed: !expanded})}>\n            <i className='material-icons toggle-icon' onClick={() => onToggle(column, -expandState)}>{expanded ? 'expand_more' : 'chevron_right'}</i>\n            <span className='ColHeaderLabel' onClick={() => onClick(column)}>{column.name}</span>\n            <i className='material-icons remove-icon' onClick={() => onRemoveColumn(column)}>cancel</i>\n        </div>\n    );\n};\n\nexport default ({\n    className: propClassName,\n    column: groupCol,\n    groupState,\n    onClick,\n    onContextMenu,\n    onRemoveColumn,\n    onResize,\n    onToggleGroupState}) => {\n\n    const el = useRef(null);\n    const column = useRef(groupCol);\n\n    useEffect(() => {\n        column.current = groupCol;\n    }, [groupCol])\n\n    const handleClick = () => {\n        onClick(groupCol);\n    }\n\n    // All duplicated in header-cell\n    const handleResizeStart = () => onResize('begin', column.current);\n\n    const handleResize = useCallback((e) => {\n        const width = getWidthFromMouseEvent(e);\n        if (width > 0) {\n            onResize('resize', column.current, width);\n        }\n    },[])\n\n    const handleResizeEnd = (e) => {\n        const width = getWidthFromMouseEvent(e);\n        onResize('end', column.current, width);\n    }\n\n    const getWidthFromMouseEvent = e => {\n        const right = e.pageX;\n        const left = el.current.getBoundingClientRect().left;\n        return right - left;\n    }\n\n    const handleContextMenu = e => {\n        onContextMenu(e, 'header', { column: groupCol });\n    }\n\n        const {columns, resizing, width} = groupCol;\n        const className = cx(\n            'GroupHeaderCell',\n            'HeaderCell group',\n            propClassName,\n            resizing ? 'HeaderCell--resizing': ''\n        );\n        const expandStates = expandStatesfromGroupState(groupCol, groupState);\n        return (\n            <div ref={el} className={className} style={{paddingLeft: 0,width: width}}\n                onContextMenu={handleContextMenu}>\n                <div className='inner-container'>\n                    {columns.map(\n                        (column,idx) => <ColHeader\n                            key={column.key}\n                            column={column}\n                            expandState={expandStates[idx]}\n                            onClick={handleClick}\n                            onRemoveColumn={onRemoveColumn}\n                            onToggle={onToggleGroupState}\n                            className={columnClassName(columns, idx, column)}\n                        />)}\n                </div>\n                <Draggable className='resizeHandle' onDrag={handleResize} onDragStart={handleResizeStart} onDragEnd={handleResizeEnd} />\n            </div>\n        );\n}\n\nfunction columnClassName(columns, idx/*, column*/){\n\n    const classes = [];\n\n    if (idx === 0){\n        classes.push('first');\n    }\n\n    if (idx === columns.length-1){\n        classes.push('last');\n    }\n\n    return classes.join(' ');\n\n}\n","export function expandStatesfromGroupState({columns},groupState){\n    const results = Array(columns.length).fill(-1);\n    let all = groupState && groupState['*'];\n    let idx = 0;\n    while (all){\n        results[idx] = 1;\n        all = all['*'];\n    }\n    return results;\n}\n","import React, {useContext, useCallback, useRef, useImperativeHandle, forwardRef} from 'react';\nimport cx from 'classnames';\nimport HeaderCell from './header-cell.jsx';\nimport GroupbyHeaderCell from './group-header-cell.jsx';\nimport * as Action from '../model/actions';\nimport GridContext from '../grid-context';\n\nimport './column-group-header.css';\n\nexport default forwardRef(ColumnGroupHeader);\n\nexport function ColumnGroupHeader({\n    columnGroup,\n    colGroupHeaderRenderer,\n    colHeaderRenderer,\n    ignoreHeadings,\n    model,\n    onColumnMove\n\n},ref) {\n\n    const {dispatch, showContextMenu} = useContext(GridContext);\n    const containerEl = useRef(null);\n\n    useImperativeHandle(ref, () => ({\n        scrollLeft: scrollLeft => {\n                containerEl.current.scrollLeft = scrollLeft;\n        }\n      }))\n\n    const handleColumnResize = useCallback((phase, column, width) => {\n        if (phase === 'resize') {\n            if (column.isHeading) {\n                dispatch({ type: Action.RESIZE_HEADING, column, width });\n            } else {\n                // TODO do we need to consider scrolling ?\n                dispatch({ type: Action.COLUMN_RESIZE, column, width });\n            }\n        } else if (phase === 'begin') {\n            dispatch({ type: Action.COLUMN_RESIZE_BEGIN, column });\n        } else if (phase === 'end') {\n            dispatch({ type: Action.COLUMN_RESIZE_END, column });\n        }\n    },[]);\n\n    const handleRemoveGroupBy = useCallback(column => {\n        dispatch({ type: Action.groupExtend, column });\n    },[]);\n\n    const handleHeaderCellClick = column => {\n        let result = true;\n        if (result !== false && column.sortable !== false) {\n            // this will transform the columns which will cause whole grid to re-render down to cell level. All\n            // we really need if for headers to rerender. SHould we store sort criteria outside of columns ?\n            dispatch({ type: Action.SORT, column });\n        }\n    }\n\n    const handleToggleGroupState = useCallback((column, expanded) => {\n        const groupState = expanded === 1\n            ? { '*': true }\n            : {};\n        dispatch({ type: Action.TOGGLE, groupState })\n    },[]);\n\n    const renderColHeadings = heading =>\n        heading.map((item, idx) =>\n            <HeaderCell\n                key={idx}\n                className={cx('colgroup-header', { bottomless: item.label === '' })}\n                column={item}\n                onResize={handleColumnResize}\n                onMove={onColumnMove}\n                onContextMenu={showContextMenu}\n            />\n        )\n\n    const renderHeaderCells = () => {\n\n        return columnGroup.columns.filter(column => !column.hidden).map(column => {\n\n            const props = {\n                key: column.key,\n                column,\n                onResize: handleColumnResize,\n                onMove: onColumnMove,\n                onContextMenu: showContextMenu\n            };\n\n            const multiColumnSort = model.sortBy && model.sortBy.length > 1;\n\n            if (column.isGroup) {\n\n                return renderGroupHeader({\n                    ...props,\n                    groupState: model.groupState,\n                    onClick: handleGroupHeaderCellClick,\n                    onToggleGroupState: handleToggleGroupState,\n                    onRemoveColumn: handleRemoveGroupBy\n                });\n\n            } else {\n\n                return renderCell({\n                    ...props,\n                    value: column.name,\n                    multiColumnSort,\n                    onClick: handleHeaderCellClick\n                });\n            }\n        });\n    }\n\n    const renderGroupHeader = (props) => {\n\n        const renderer = colGroupHeaderRenderer;\n\n        return React.isValidElement(renderer)\n            ? React.cloneElement(renderer, props)\n            : ((renderer && renderer(props)) || <GroupbyHeaderCell {...props} />);\n\n    }\n\n    // TODO separate this pattern into reusable code\n    const renderCell = (props) => {\n\n        const renderer = colHeaderRenderer;\n\n        return React.isValidElement(renderer)\n            ? React.cloneElement(renderer, props)\n            : ((renderer && renderer(props)) || <HeaderCell {...props} />);\n\n    }\n\n    const handleGroupHeaderCellClick = useCallback(column => {\n        if (column.sortable !== false) {\n            dispatch({ type: Action.SORT_GROUP, column });\n        }\n    },[])\n\n    const { width, renderWidth, renderLeft, headings = [] } = columnGroup;\n\n    return (\n        <div ref={containerEl} className='ColumnGroupHeader' style={{ width: renderWidth, left: renderLeft }}>\n\n            {!ignoreHeadings && headings.map((heading, idx) =>\n                <div className='group-heading' key={idx} style={{ width }}>\n                    {renderColHeadings(heading)}\n                </div>\n            ).reverse()}\n\n            <div className=\"header-cells\" style={{ whiteSpace: 'nowrap', width, position: 'relative' }}>\n                {renderHeaderCells()}\n            </div>\n        </div>\n    );\n}\n","\nimport React, { memo, useRef, forwardRef, useContext, useImperativeHandle} from 'react';\nimport cx from 'classnames';\nimport ColumnGroupHeader from './column-group-header.jsx';\nimport * as Action from '../model/actions';\nimport GridContext from '../grid-context';\n\nimport './header.css';\n\nexport default memo(forwardRef(({\n    className: propClassName,\n    colGroupHeaderRenderer,\n    colHeaderRenderer,\n    height,\n    ignoreHeadings=false,\n    model,\n    style: propStyle\n}, ref) => {\n\n    const { dispatch } = useContext(GridContext);\n    const scrollingHeader = useRef(null);\n    const scrollLeft = useRef(0);\n\n    useImperativeHandle(ref, () => ({\n        scrollLeft: pos => {\n            scrollLeft.current = pos;\n            scrollingHeader.current.scrollLeft(pos);\n        }\n      }))\n    \n    const handleColumnMove = (phase, column, distance) => {\n        if (!column.isHeading) {\n            const pos = scrollLeft.current;\n            if (phase === 'move' && distance !== 0) {\n                dispatch({ type: Action.MOVE, distance, scrollLeft: pos });\n            } else if (phase === 'begin') {\n                dispatch({ type: Action.MOVE_BEGIN, column, scrollLeft: pos });\n            } else if (phase === 'end') {\n                dispatch({ type: Action.MOVE_END, column });\n            }\n        }\n    }\n\n    const className = cx('Header', propClassName);\n    const style = { \n        ...propStyle, \n        height\n    };\n\n    return (\n        <div className={className} style={style}>\n            {\n                model._groups.map((group, idx) => {\n                    return (\n                        <ColumnGroupHeader\n                            key={idx}\n                            ref={group.locked ? null : scrollingHeader}\n                            columnGroup={group}\n                            model={model}\n                            ignoreHeadings={ignoreHeadings}\n                            onColumnMove={handleColumnMove}\n                            colHeaderRenderer={colHeaderRenderer}\n                            colGroupHeaderRenderer={colGroupHeaderRenderer}\n                        />\n\n                    );\n\n                })}\n        </div>\n    );\n\n}))\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport cx from 'classnames';\n\nimport './popup-service.css';\n\nlet _dialogOpen = false;\nconst _popups = [];\n\nfunction specialKeyHandler(e) {\n\n    if (e.keyCode === 27 /* ESC */) {\n        if (_popups.length) {\n            closeAllPopups();\n            console.log('unmount the open popup(s)');\n        } else if (_dialogOpen) {\n            console.log('unmount the open dialog');\n            ReactDOM.unmountComponentAtNode(document.body.querySelector('.react-dialog'));\n        }\n    }\n}\n\nfunction outsideClickHandler(e) {\n\n    if (_popups.length) {\n        // onsole.log(`Popup.outsideClickHandler`);\n        const popupContainers = document.body.querySelectorAll('.react-popup');\n        for (let i = 0; i < popupContainers.length; i++) {\n            if (popupContainers[i].contains(e.target)) {\n                return;\n            }\n        }\n        console.log(`close all popups`);\n        closeAllPopups();\n    }\n}\n\nfunction closeAllPopups() {\n    if (_popups.length) {\n\n        // onsole.log(`closeAllPopups`);\n        const popupContainers = document.body.querySelectorAll('.react-popup');\n        for (let i = 0; i < popupContainers.length; i++) {\n            console.log(`unmountComponentAtNode`);\n            ReactDOM.unmountComponentAtNode(popupContainers[i]);\n        }\n        popupClosed('*');\n    }\n}\n\nfunction dialogOpened() {\n    if (_dialogOpen === false) {\n        console.log('PopupService, dialog opened');\n        _dialogOpen = true;\n        window.addEventListener('keydown', specialKeyHandler, true);\n    }\n}\n\nfunction dialogClosed() {\n    if (_dialogOpen) {\n        console.log('PopupService, dialog closed');\n        _dialogOpen = false;\n        window.removeEventListener('keydown', specialKeyHandler, true);\n    }\n}\n\nfunction popupOpened(name/*, group*/) {\n    if (_popups.indexOf(name) === -1) {\n        _popups.push(name);\n        //onsole.log('PopupService, popup opened ' + name + '  popups : ' + _popups);\n        if (_dialogOpen === false) {\n            window.addEventListener('keydown', specialKeyHandler, true);\n            window.addEventListener('click', outsideClickHandler, true);\n        }\n    }\n}\n\nfunction popupClosed(name/*, group=null*/) {\n    if (_popups.length) {\n\n        if (name === '*') {\n            _popups.length = 0;\n        } else {\n            const pos = _popups.indexOf(name);\n            if (pos !== -1) {\n                _popups.splice(pos, 1);\n            }\n        }\n        //onsole.log('PopupService, popup closed ' + name + '  popups : ' + _popups);\n        if (_popups.length === 0 && _dialogOpen === false) {\n            window.removeEventListener('keydown', specialKeyHandler, true);\n            window.removeEventListener('click', outsideClickHandler, true);\n        }\n\n    }\n}\n\nexport class PopupService {\n\n    static showPopup({name='anon', group='all'/*, depth=0*/, position='', left=0, top=0, width='auto', component}) {\n\n        // onsole.log(`PopupService.showPopup ${name} in ${group} ${left} ${top} ${width} depth ${depth}`);\n\n        popupOpened(name, group);\n\n        let el = document.body.querySelector('.react-popup.' + group);\n        if (el === null) {\n            el = document.createElement('div');\n            el.className = 'react-popup ' + group;\n            document.body.appendChild(el);\n        }\n\n        const className = cx('popup-container', position);\n        ReactDOM.render(\n            <div className={className} style= {{position: 'absolute', left, top, width }}>{ component } </div>, \n            el, \n            () => {PopupService.keepWithinThePage(el);}\n        );\n    }\n\n    static hidePopup(name='anon', group='all'){\n        //onsole.log('PopupService.hidePopup name=' + name + ', group=' + group)\n\n        if (_popups.indexOf(name) !== -1) {\n            popupClosed(name, group);\n            ReactDOM.unmountComponentAtNode(document.body.querySelector(`.react-popup.${group}`));\n        }\n    }\n\n    static movePopup(x, y, name='anon', group='all'){\n        const container = document.querySelector(`.react-popup.${group} .popup-container`);\n        container.style.top = (parseInt(container.style.top,10) + y) + 'px';\n        container.style.left = (parseInt(container.style.left,10) + x) + 'px';\n    }\n\n    static keepWithinThePage(el) {\n\n        //onsole.log(`PopupService.keepWithinThePage`);\n\n        const container = el.querySelector('.popup-container');\n        const {top, left, width, height} = container.firstChild.getBoundingClientRect();\n\n        const w = window.innerWidth;\n        const h = window.innerHeight;\n\n        const overflowH = h - (top + height);\n        if (overflowH < 0) {\n            container.style.top = (parseInt(container.style.top,10) + overflowH) + 'px';\n        }\n\n        const overflowW = w - (left + width);\n        if (overflowW < 0) {\n            container.style.left = (parseInt(container.style.left,10) + overflowW) + 'px';\n        }\n\n    }\n}\n\nexport class DialogService {\n\n    static showDialog(dialog) {\n\n        const containerEl = '.react-dialog';\n        const onClose = dialog.props.onClose;\n\n        dialogOpened();\n\n        ReactDOM.render(React.cloneElement(dialog, {\n            container: containerEl,\n            onClose: () => {\n                DialogService.closeDialog();\n                if (onClose) {\n                    onClose();\n                }\n            }\n        }),\n            document.body.querySelector(containerEl)\n        );\n\n    }\n\n    static closeDialog() {\n        dialogClosed();\n        ReactDOM.unmountComponentAtNode(document.body.querySelector('.react-dialog'));\n    }\n}\n\nexport class Popup extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.pendingTask = null;\n    }\n\n    render() {\n        return <div className='popup-proxy' > </div>;\n    }\n\n    componentDidMount() {\n\n        const domNode = ReactDOM.findDOMNode(this);\n        if (domNode) {\n            const el = domNode.parentElement;\n            const boundingClientRect = el.getBoundingClientRect();\n            //onsole.log(`%cPopup.componentDidMount about to call show`,'color:green');\n            this.show(this.props, boundingClientRect);\n        }\n\n    }\n\n    componentWillUnmount() {\n        PopupService.hidePopup(this.props.name, this.props.group);\n    }\n\n    componentWillReceiveProps(nextProps) {\n\n        const domNode = ReactDOM.findDOMNode(this);\n        if (domNode) {\n            const el = domNode.parentElement;\n            const boundingClientRect = el.getBoundingClientRect();\n            //onsole.log(`%cPopup.componentWillReceiveProps about to call show`,'color:green');\n            this.show(nextProps, boundingClientRect);\n        }\n    }\n\n    show(props, boundingClientRect) {\n\n        const {name, group, depth, width} = props;\n        let left, top;\n\n        if (this.pendingTask) {\n            clearTimeout(this.pendingTask);\n            this.pendingTask = null;\n        }\n\n        if (props.close === true) {\n            console.log('Popup.show hide popup name=' + name + ', group=' + group + ',depth=' + depth);\n            PopupService.hidePopup(name, group);\n        } else {\n            const {position, children: component} = props;\n            const {left: targetLeft, top: targetTop, width: clientWidth, bottom: targetBottom} = boundingClientRect;\n\n            if (position === 'below') {\n                left = targetLeft;\n                top = targetBottom;\n            } else if (position === 'above') {\n                left = targetLeft;\n                top = targetTop;\n            }\n\n            console.log('%cPopup.show about to setTimeout', 'color:red;font-weight:bold');\n            this.pendingTask = setTimeout(() => {\n                console.log(`%c...timeout fires`, 'color:red;font-weight:bold');\n                PopupService.showPopup({ name, group, depth, position, left, top, width: width || clientWidth, component });\n            }, 10);\n        }\n\n    }\n}\n","import React, { useRef, useEffect, useCallback } from 'react';\nimport cx from 'classnames';\nimport { columnUtils, filter as filterUtils } from '@heswell/data';\nimport { SetFilter, NumberFilter, MultiColumnFilter } from '@heswell/ingrid-extras';\n\nimport Draggable from '../draggable/draggable.jsx';\nimport { PopupService } from '../services/index';\n\nimport './column-filter.css';\n\nexport default ({\n    column,\n    dataView,\n    filter,\n    onClearFilter,\n    onFilterOpen,\n    onFilterClose,\n    showFilter,\n    onFilter\n}) => {\n\n    const rootEl = useRef(null);\n\n    const toggleFilterDisplay = () => {\n        onFilterOpen(column);\n    }\n\n    // close filter is a user action\n    const closeFilter = () => {\n        PopupService.hidePopup();\n    }\n\n    // hide fires when the filter has been closed\n    const hideFilter = useCallback(() => {\n        setTimeout(() => {\n            // needs delay to ensure firing after ColumnFilter is rerendered with new \n            // clickhandler which would otherwise immediately re-open filter.\n            onFilterClose();\n        }, 50);\n    },[]);\n\n    const handleKeyDown = useCallback(e => {\n        if (e.keyCode === 13) { // ENTER\n            dataView.filter({\n                 type: filterUtils.STARTS_WITH,\n                 colName: column.name,\n                 value: e.target.value\n            })\n        }\n    },[]);\n\n    const clearFilter = useCallback(() => {\n        onClearFilter(column);\n    },[])\n\n    const handleNumberFilterChange = (column, filter) => {\n        onFilter(column, filter);\n    }\n\n    const handleFilter = (/*filter*/) => {\n        // Do we still need - see Numberfilter and group\n    }\n\n    useEffect(() => {\n        if (showFilter){\n            const component = getFilter();\n            const el = rootEl.current;\n            const { left, top } = el.getBoundingClientRect();\n            // TODO without the timeout, it does not render until next render cycle\n            requestAnimationFrame(() => {\n                PopupService.showPopup({ left: Math.round(left), top: top - 26, component });\n            })\n        }\n    },[showFilter]);\n\n    const moveFilter = (e, deltaX, deltaY) => {\n        console.log(`move Filter by ${deltaX} ${deltaY}`)\n        PopupService.movePopup(deltaX, deltaY);\n    }\n\n    const getFilter = () => {\n        console.log(`getFilter ${JSON.stringify(column)}`)\n        if (!column.isGroup || column.columns.length === 1) {\n            switch (columnUtils.getFilterType(column)) {\n                case 'number':\n                    return (\n                        <NumberFilter column={column} height={250}\n                            className='FilterPanel'\n                            dataView={dataView}\n                            filter={filter}\n                            onHide={hideFilter}\n                            onClose={closeFilter}\n                            onApplyFilter={handleNumberFilterChange} />\n                    );\n                default:\n                    return (\n                        <Draggable onDrag={moveFilter}>\n                            <SetFilter className='FilterPanel'\n                                column={column}\n                                filter={filter}\n                                height={350}\n                                width={column.width + 120}\n                                dataView={dataView}\n                                onHide={hideFilter}\n                                onClose={closeFilter}\n                            />\n                        </Draggable>\n                    );\n            }\n\n        } else {\n            return <MultiColumnFilter\n                column={column}\n                height={261}\n                width={300}\n                filter={filter}\n                dataView={dataView}\n                onHide={hideFilter}\n                onClose={closeFilter}\n                onApplyFilter={handleFilter}\n            />;\n        }\n    }\n\n    const isActive = filterUtils.includesColumn(filter, column);\n    const className = cx('HeaderCell', { 'filter-active': isActive, 'filter-showing': showFilter });\n\n    return (\n        // we only need care about opening the filter - the Popup service will close if for us.\n        <div ref={rootEl} className={className} style={{ padding: 0, width: column.width }}>\n            <div className='filter-button' onClick={toggleFilterDisplay}>\n                <i className=\"material-icons\">filter_list</i>\n            </div>\n            <div className=\"filter-input-container\">\n                <input className=\"filter-input\" type='text' onKeyDown={handleKeyDown} />\n            </div>\n            {isActive &&\n                <div className='filter-clear-button' onClick={clearFilter}>\n                    <i className=\"material-icons\">cancel</i>\n                </div>}\n        </div>\n    );\n}\n","import React, { forwardRef, useRef, useCallback, useImperativeHandle, useState } from 'react';\nimport { filter as filterUtils, DataTypes } from '@heswell/data'\nimport Header from './header.jsx';\nimport ColumnFilter from './column-filter.jsx';\n\nimport './inline-filter.css';\n\nconst { STARTS_WITH, NOT_IN } = filterUtils;\n\nexport default forwardRef(({ \n    dataView,\n    height,\n    model,\n    filter: serverFilter,\n    style\n}, ref) => {\n\n    const header = useRef(null);\n    const [showFilter, setShowFilter] = useState(null);\n\n    useImperativeHandle(ref, () => ({\n        scrollLeft: pos => {\n            header.current.scrollLeft(pos);\n        }\n    }))\n\n    const onFilterOpen = column => {\n        const { key, name } = column.isGroup ? column.columns[0] : column;\n        if (showFilter !== name){\n            dataView.getFilterData({\n                key, name\n            });\n            setShowFilter(column.name);\n        }\n    }\n\n    const onFilterClose = () => {\n        setShowFilter(null);\n        // I think we're doing this so that if same filter is opened again, dataView sends rows\n        dataView.setFilterRange(0, 0);\n    }\n\n    // not used for setfilter any more\n    const handleFilter = (column, newFilter) => {\n        //TODO move this into model\n        const filter = filterUtils.addFilter(serverFilter, newFilter);\n        console.log(`\n                add filter ${JSON.stringify(newFilter, null, 2)}\n                to filter ${JSON.stringify(serverFilter, null, 2)}\n                creates new filter = ${JSON.stringify(filter, null, 2)}\n            `)\n\n        dataView.filter(filter);\n\n        if (newFilter.isNumeric) {\n            // re-request the filterData, this will re-create bins on the filtered data\n            const { key, name } = column.isGroup ? column.columns[0] : column;\n            dataView.getFilterData({ key, name });\n        }\n    }\n\n    const handleClearFilter = useCallback(column => {\n        dataView.filter({\n            type: NOT_IN,\n            colName: column.name,\n            values: []\n        }, DataTypes.ROW_DATA, true);\n    },[]);\n\n    const colHeaderRenderer = ({ key, column }) =>\n        <ColumnFilter key={key}\n            column={column}\n            dataView={dataView}\n            // TODO we use this to mark the column as filtered \n            filter={serverFilter}\n            onClearFilter={handleClearFilter}\n            onFilterOpen={onFilterOpen}\n            onFilterClose={onFilterClose}\n            showFilter={showFilter === column.name}\n            onFilter={handleFilter}\n        />;\n\n    return (\n        <Header className='InlineFilter'\n            ref={header}\n            model={model}\n            height={height}\n            style={style}\n            ignoreHeadings={true}\n            colGroupHeaderRenderer={colHeaderRenderer}\n            colHeaderRenderer={colHeaderRenderer}\n        />\n    );\n\n})","import React, {useCallback, useContext/*, useEffect, useRef*/} from 'react';\nimport cx from 'classnames';\nimport {getCellRenderer} from '../registry/datatype-registry.jsx';\nimport GridContext from '../grid-context';\nimport * as Action from '../model/actions';\n\nexport default React.memo(({\n    row,\n    idx,\n    columns,\n    gridModel\n}) => {\n\n    const {meta, rowHeight} = gridModel;\n    const handleContextMenu = useCallback(e => showContextMenu(e, 'row', {idx, row}),[idx, row]);\n    const {dispatch, callbackPropsDispatch, showContextMenu} = useContext(GridContext);\n\n    const handleClick = useCallback(e => {\n        const rangeSelect = e.shiftKey;\n        const keepExistingSelection = e.ctrlKey || e.metaKey /* mac only */;\n        console.log(`Row about to call callbackPropsDIspatch('selection')`);\n        callbackPropsDispatch({type:'selection', idx, row, rangeSelect, keepExistingSelection})\n    },[idx, row])\n\n    const handleDoubleClick = useCallback(() => callbackPropsDispatch({type: 'double-click', idx, row}),[idx, row]);\n\n    const onClick = useCallback(cellIdx => {\n        if (isGroup){\n            dispatch({ type: Action.TOGGLE, groupRow: row });\n        }\n        callbackPropsDispatch({type: 'select-cell', idx, cellIdx})\n    },[idx, row])\n\n    const groupLevel = row[meta.DEPTH];\n    const isGroup = groupLevel !== 0;\n    const isSelected = row[meta.SELECTED] === 1;\n    // TODO should be driven by config\n    const striping = idx % 2 === 0 ? 'even' : 'odd';\n\n    const className = cx(\n        'GridRow', striping, {\n            selected: isSelected,\n            group: isGroup,\n            collapsed: isGroup && groupLevel < 0,\n            expanded : isGroup && groupLevel >= 0\n        }\n    );\n\n    //TODO load default formatters here and pass formatter/cellClass down to cell \n    const cells = columns.filter(column => !column.hidden).map((column,i) => {\n\n        const props = {\n            key: i,\n            idx: i,\n            column,\n            meta,\n            row,\n            onClick\n        }\n\n        return React.isValidElement(column.renderer) \n            ? React.cloneElement(column.renderer,props)\n            : (column.renderer && column.renderer(props)) || getCellRenderer(props); \n    });\n\n    return (\n        <div className={className}\n            tabIndex={0}\n            style={{transform: `translate3d(0px, ${idx*rowHeight}px, 0px)`}}\n            onClick={handleClick} \n            onDoubleClick={handleDoubleClick} \n            onContextMenu={handleContextMenu}>\n            {cells}\n        </div>\n    );\n})\n \n","import React, { useContext, useRef, useImperativeHandle, forwardRef } from 'react';\nimport cx from 'classnames';\nimport Row from './row.jsx';\nimport GridContext from '../grid-context';\n\nconst byKey = ([key1], [key2]) => key1 - key2;\n\nconst cssCanvas = {\n  position: 'absolute',\n  top:0,\n  overflow:'hidden'\n};\n\nconst cssCanvasContent = {\n  position: 'absolute',\n  overflow : 'hidden'\n};\n\nexport default forwardRef(Canvas)\n\nexport function Canvas ({\n  columnGroup,\n  firstVisibleRow,\n  gridModel,\n  height,\n  rows,\n  onKeyDown\n}, ref) {\n  const contentEl = useRef(null);\n  const {showContextMenu} = useContext(GridContext);\n\n  useImperativeHandle(ref, () => ({\n    scrollLeft: scrollLeft => {\n      contentEl.current.style.left = `-${scrollLeft}px`;\n    }\n  }))\n\n  const handleContextMenuFromCanvas = (e) => {\n    showContextMenu(e, 'canvas')\n  }\n\n  const { renderLeft: left, renderWidth: width } = columnGroup;\n  const { RENDER_IDX } = gridModel.meta;\n  const rowPositions = rows.map((row, idx) => {\n    const absIdx = firstVisibleRow + idx\n    return [row[RENDER_IDX], absIdx, row]\n  })\n  .sort(byKey)\n\n  const gridRows = rowPositions\n    .map(([key, abs_idx, row]) => {\n      return (\n        <Row key={key}\n          idx={abs_idx}\n          row={row}\n          gridModel={gridModel}\n          columns={columnGroup.columns}\n        />\n      )\n    });\n\n  const className = cx('Canvas', {\n    fixed: columnGroup.locked\n  });\n\n  return (\n    <div style={{ ...cssCanvas, left, width, height }} className={className}\n      onContextMenu={handleContextMenuFromCanvas}\n      onKeyDown={onKeyDown} >\n      <div ref={contentEl}\n        style={{ ...cssCanvasContent, width: Math.max(columnGroup.width, width), height }}>\n        {gridRows}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport HeaderCell from '../header/header-cell.jsx';\nimport {getCellRenderer} from '../registry/datatype-registry.jsx';\n\nimport './column-bearer.css';\n\nconst NULL_FORMATTER = () => {};\n\nconst ColumnBearer = (props) => {\n    \n    const {rows, gridModel} = props;\n    const {_movingColumn: column, meta, headerHeight, _headingDepth: headingDepth} = gridModel\n\n    const {left,width} = column;\n    const top = (headingDepth - 1) * headerHeight; \n    console.log(`render ColumnBearer`)\n    return (\n        <div className='ColumnBearer' style={{top,left,width}}>\n            <div className='Header' style={{height:headerHeight}}> \n                <HeaderCell column={column}/>\n            </div>\n            {\n                rows.map((row,idx) => \n                    <div key={idx} className='Row'>\n                        {getCellRenderer({\n                            idx,\n                            column,\n                            meta,\n                            formatter: column.formatter || NULL_FORMATTER,\n                            row,\n                            value:row[column.key]})}\n                    </div>\n                )\n            }\n        </div>\n    );\n};\n\nexport default ColumnBearer;","import {rowUtils} from '@heswell/data';\nimport * as Action from './actions';\n\nconst INITIAL_RANGE = {lo:0,hi:-1}\n\nexport const initialData = {\n  rows: [],\n  rowCount: 0,\n  range: INITIAL_RANGE,\n  offset: 0,\n  _keys: {\n    free: [],\n    used: {}\n  }\n}\n\n// This assumes model.meta never changes. If it does (columns etc)\n// we will need additional action types to update\nexport default function (model) {\n  return (state, action) => {\n    if (action.type === 'range'){\n      return setRange(state, action, model.meta);\n    } else if (action.type === 'data'){\n      return setData(state, action, model.meta);\n    } else if (action.type === 'update'){\n      return applyUpdates(state, action, model.meta);\n    } else if (action.type === 'selected'){\n      return applySelection(state, action, model.meta)\n    } else if (action.type === Action.ROWCOUNT){\n      return setSize(state, action)      \n    }\n  }\n}\n\nfunction setKeys(keys, {lo,hi}){\n  const free = [];\n  const keyCount = hi - lo;\n  for (let i=0;i<keyCount;i++){\n    const usedKey =  keys.used[i];\n    if (usedKey === 3 || usedKey === undefined ){\n      free.push(i);\n    }\n  }\n  return {\n    used: keys.used, \n    free\n  }\n\n}\nfunction setSize(state, {rowCount}){\n  return { ...state, rowCount };\n}\n\n//TODO we HAVE to remove out=of-range rows and add empty placeholders\nfunction setRange(state, {range}, meta){\n  // return {\n  //   ...state,\n  //   range,\n  //   _keys: setKeys(state._keys, range)\n  // }\n\n  // const { IDX, SELECTED } = meta;\n  const {rows, rowCount, offset} = state;\n  const keys = setKeys(state._keys, range);\n\n  const [mergedRows, _keys] = rows.length === 0\n    ? [rows, keys] \n    : mergeAndPurge(range, rows, offset, [], rowCount, meta, keys)\n\n  // const selected = rows.filter(row => row[SELECTED]).map(row => row[IDX]);\n  return {\n    rows: mergedRows,\n    rowCount,\n    offset,\n    range,\n    _keys\n  }\n}\n\nfunction applyUpdates(state, action, meta){\n  const rows = rowUtils.update(state.rows, action.updates, meta);\n  return {\n    ...state,\n    rows\n  }\n}\n\nfunction setData(state, action, meta){\n  // const { IDX, SELECTED } = meta;\n  const { rows, rowCount, offset } = action;\n  const range = action.range.reset || state.range === INITIAL_RANGE ?\n    action.range\n    : state.range;\n    \n  const [mergedRows, _keys] = mergeAndPurge(range, state.rows, offset, rows, rowCount, meta, state._keys)\n  \n  return {\n    rows: mergedRows,\n    rowCount,\n    offset,\n    range,\n    _keys\n  }\n\n}\n\nfunction applySelection(state, {selected, deselected}, meta){\n  const { IDX, SELECTED } = meta;\n  const {rows: input, rowCount} = state;\n  const results = [];\n  const rows = [];\n\n  // TODO whare do we apply the offset\n  const offset = 100;\n\n  for (let i=0;i<input.length;i++){\n    const row = input[i];\n    const rowIdx = row[IDX];\n    const wasSelected = row[SELECTED];\n    const nowSelected = !wasSelected && selected.includes(rowIdx-offset);\n    const nowDeselected = wasSelected && deselected.includes(rowIdx-offset);\n\n    if (!nowSelected && !nowDeselected){\n      rows[i] = row;\n      if (wasSelected){\n        results.push(rowIdx-100);\n      }\n    } else {\n      const dolly = row.slice();\n      if (nowSelected){\n        dolly[SELECTED] = 1;\n        results.push(rowIdx-100);\n      } else {\n        dolly[SELECTED] = 0;\n      }\n      rows[i] = dolly;\n    }\n  }\n\n  return {\n    ...state,\n    rows,\n    rowCount,\n  }\n}\n\n\n// TODO create a pool of these and reuse them\nfunction emptyRow(idx, { IDX, count }) {\n  const row = Array(count);\n  row[IDX] = idx;\n  return row;\n}\n\nfunction mergeAndPurge({ lo, hi }, rows, offset = 0, incomingRows, size, meta, keys) {\n  // console.log(`dataReducer.mergeAndPurge: entry\n  //   range ${lo} - ${hi}\n  //   keys: \n  //     free: ${keys.free.join(',')}\n  //     used : ${Object.keys(keys.used).join(',')}\n  //     existing rows : ${rows.map(r=>r[meta.IDX]-offset).join(',')}\n  //     incoming rows : ${incomingRows.map(r=>r[meta.IDX]-offset).join(',')}\n  // `)\n\n\n  const { IDX, RENDER_IDX } = meta;\n  const {free: freeKeys, used: usedKeys} = keys;\n  const low = lo + offset;\n  const high = Math.min(hi + offset, size + offset);\n  const rowCount = hi - lo;  \n  const results = [];\n  const used = {};\n  const free = freeKeys.slice();\n  \n  let maxKey = rows.length;\n  let pos, row, rowIdx, rowKey;\n\n  // 1) iterate existing rows, copy to correct slot in results if still in range\n  //    if not still in range, collect rowKey\n  \n  for (let i = 0; i < rows.length; i++) {\n    if (row = rows[i]) {\n      rowIdx = row[IDX];\n      rowKey = row[RENDER_IDX];\n      pos = rowIdx - low;\n\n      if (usedKeys[rowKey] === 1 && rowIdx >= low && rowIdx < high) {\n        results[pos] = rows[i];\n        used[rowKey] = 1;\n      } else if (usedKeys[rowKey] === 1 && rowKey < rowCount){\n        free.push(rowKey);\n        used[rowKey] = undefined;\n      }\n    }\n  }\n\n  // 2) iterate new rows, if not already in results (shouldn't be) , move to correct slot in results\n  //      assign rowKey from free values\n  for (let i = 0; i < incomingRows.length; i++) {\n    if (row = incomingRows[i]) {\n      rowIdx = row[IDX];\n      pos = rowIdx - low;\n\n      if (rowIdx >= low && rowIdx < high) {\n        if (results[pos]){\n          rowKey = results[pos][RENDER_IDX]\n        } else {\n          rowKey = free.shift();\n          if (rowKey === undefined){\n            rowKey = maxKey++;\n          }\n          used[rowKey] = 1;\n        }\n        results[pos] = row;\n        row[RENDER_IDX] = rowKey; \n\n      } else {\n        console.warn('new row outside range')\n      }\n    }\n  }\n  // 3) assign empty row to any free slots in results\n  // TODO make this more efficient\n  for (let i = 0, freeIdx=0; i < rowCount; i++) {\n    if (results[i] === undefined) {\n      const row = results[i] = emptyRow(i + low, meta);\n      rowKey = free[freeIdx++]; // don't remove from free\n      row[RENDER_IDX] = rowKey; \n      used[rowKey] = 3;\n    }\n  }\n\n//   console.log(`dataReducer.mergeAndPurge: exit\n//   range ${lo} - ${hi}\n//   keys: \n//     free: ${free.join(',')}\n//     used : ${Object.keys(used).join(',')}\n//     row keys : ${results.map(r=>r[RENDER_IDX]).join(',')}\n// `)\n\n  return [results,{\n    free,\n    used\n  }];\n\n}\n","import React, { /*useState, */useCallback, useContext, useRef, useEffect, useReducer } from 'react';\nimport { createLogger, logColor } from '@heswell/utils';\nimport Canvas from './canvas.jsx';\nimport ColumnBearer from './column-bearer.jsx';\n// import SelectionModel from '../model/selectionModel';\nimport * as Action from '../model/actions';\nimport dataReducer, { initialData } from '../model/data-reducer';\nimport { getScrollbarSize } from '../utils/domUtils';\nimport GridContext from '../grid-context';\n\nconst logger = createLogger('Viewport', logColor.green)\n\nconst scrollbarSize = getScrollbarSize();\n\nconst cssViewport = {\n    position: 'absolute',\n    top: 25,\n    left:0,\n    right:0,\n    bottom:0,\n    padding:0,\n    overflow: 'hidden'\n};\n\nconst cssViewportContent = {\n    position: 'absolute',\n    top:0,\n    left:0,\n    right:0,\n    padding:0\n};\n\nfunction useThrottledScroll(callback) {\n\n    const timeoutHandler = useRef(null);\n    const prevValue = useRef(null);\n    const value = useRef(null);\n\n    const raf = () => {\n        if (value.current !== prevValue.current){\n            callback(value.current);\n            prevValue.current = value.current;\n            timeoutHandler.current = requestAnimationFrame(raf)\n        } else {\n            timeoutHandler.current = null;\n        }\n    }\n\n    const throttledCallback = useCallback(\n        e => {\n            value.current = e.target.scrollTop;\n            if (timeoutHandler.current === null){\n                timeoutHandler.current = requestAnimationFrame(raf);\n            }\n        },\n        [callback]\n    );\n\n    return throttledCallback;\n}\n\nexport const Viewport = React.memo(({\n    style,\n    height,\n    dataView,\n    model,\n    onFilterChange\n    // selectedRows\n}) => {\n    const scrollingCanvas = useRef(null);\n    const scrollableContainerEl = useRef(null);\n    const verticalScrollContainer = useRef(null);\n    const scrollTop = useRef(0);\n    const firstVisibleRow = useRef(0);\n    const groupBy = useRef(model.groupBy);\n    const rowCount = useRef(model.rowCount);\n\n    const { dispatch, callbackPropsDispatch } = useContext(GridContext);\n\n    const [data, dispatchData] = useReducer(dataReducer(model), initialData);\n\n    useEffect(() => {\n        rowCount.current = model.rowCount\n    },[model.rowCount])\n\n    useEffect(() => {\n\n        // todo move into model\n        const viewportSize = Math.ceil(height / model.rowHeight) + 1\n        dataView.subscribe({\n            columns: model.columns,\n            range: { lo: 0, hi: viewportSize }\n        },\n            /* postMessageToClient */\n            msg => {\n\n                if (msg.range && msg.range.reset) {\n                    setSrollTop(0);\n                }\n\n                if (msg.filter !== undefined){\n                    onFilterChange(msg.filter);\n                }\n\n                if (typeof msg.size === 'number' && msg.size !== rowCount.current) {\n                    dispatch({ type: Action.ROWCOUNT, rowCount: msg.size })\n                    dispatchData({ type: Action.ROWCOUNT, rowCount: msg.size })\n                }\n                if (msg.rows) {\n                    dispatchData({ type: 'data', rows: msg.rows, rowCount: msg.size, offset: msg.offset, range: msg.range });\n                } else if (msg.updates){\n                    dispatchData({ type: 'update', updates: msg.updates, range: msg.range });\n                } else if (msg.selected) {\n                    dispatchData({ type: 'selected', selected: msg.selected, deselected: msg.deselected })\n                } else if (msg.type === 'subscribed'){\n                    dispatch({type: Action.SUBSCRIBED, columns: msg.columns, availableColumns: msg.availableColumns});\n                }\n            }\n        )\n\n        return () => dataView.unsubscribe();\n\n    }, [dataView]);\n\n    useEffect(() => {\n        const rowCount = Math.ceil(height / model.rowHeight) + 1;\n        // careful model might be out of date\n        if (rowCount !== model.rowCount) {\n            dispatch({ type: Action.ROWCOUNT, rowCount })\n            const firstRow = firstVisibleRow.current;\n            setRange(firstRow, firstRow + rowCount);\n        }\n\n    }, [height])\n\n    const handleVerticalScroll = useThrottledScroll(useCallback(value => {\n        scrollTop.current = value;\n        const firstRow = Math.floor(value / model.rowHeight)\n        if (firstRow !== firstVisibleRow.current) {\n            const numberOfRowsInViewport = Math.ceil(height / model.rowHeight) + 1;\n            firstVisibleRow.current = firstRow;\n            setRange(firstRow, firstRow + numberOfRowsInViewport);\n        }\n\n    }, []), 30);\n\n    const handleHorizontalScroll = useCallback(e => {\n        if (e.target === e.currentTarget) {\n            const scrollLeft = e.target.scrollLeft;\n            scrollingCanvas.current.scrollLeft(scrollLeft);\n            callbackPropsDispatch({ type: 'scroll', scrollLeft })\n        }\n    }, [])\n\n    const setSrollTop = useCallback((value) => {\n        verticalScrollContainer.current.scrollTop = scrollTop.current = value;\n    }, [])\n\n    const setRange = useCallback((lo, hi) => {\n        //logger.log(`setRange ===>  ${lo} : ${hi}`)\n        dispatchData({ type: 'range', range: { lo, hi } });\n        dataView.setRange(lo, hi);\n    }, [])\n\n    // all of these calculations belong in the modelReducer\n    const horizontalScrollingRequired = model.totalColumnWidth > model.displayWidth;\n    // we shouldn't need to change this but chrome does not handle this correctly - vertical scrollbar is still\n    // displayed even when not needed, when grid is stretched.\n    const maxContentHeight = horizontalScrollingRequired ? height - 15 : height; // we should know the scrollbarHeight\n    const contentHeight = Math.max(model.rowHeight * data.rowCount, maxContentHeight);\n    const displayWidth = contentHeight > height\n        ? model.width - scrollbarSize\n        : model.width;\n    const overflow = displayWidth === model.width ? 'hidden' : 'auto';\n\n    let emptyRows = groupBy.current === model.groupBy\n        ? null\n        : ((groupBy.current = model.groupBy), []);\n\n\n    return (\n        <>\n            <div className='Viewport' style={{ ...cssViewport, ...style }}>\n\n                {horizontalScrollingRequired &&\n                    model._groups.filter(colGroup => !colGroup.locked).map((colGroup, idx) =>\n                        <div className='CanvasScroller horizontal scrollable-content'\n                            ref={scrollableContainerEl}\n                            key={idx} style={{ left: colGroup.renderLeft, width: colGroup.renderWidth }}\n                            onScroll={handleHorizontalScroll}>\n\n                            <div className='CanvasScroller-content' style={{ width: colGroup.width, height: 15 }} />\n                        </div>\n                    )\n                }\n\n                <div className='ViewportContent scrollable-content'\n                    ref={verticalScrollContainer}\n                    style={{ ...cssViewportContent, bottom: horizontalScrollingRequired ? 15 : 0, overflow }}\n                    onScroll={handleVerticalScroll} >\n\n                    <div className='scrolling-canvas-container'\n                        style={{ width: model.displayWidth, height: contentHeight }}>\n                        {\n                            model._groups.map((columnGroup, idx) =>\n                                <Canvas\n                                    key={idx}\n                                    gridModel={model}\n                                    rows={emptyRows || data.rows}\n                                    firstVisibleRow={firstVisibleRow.current}\n                                    height={contentHeight}\n                                    ref={columnGroup.locked ? null : scrollingCanvas}\n                                    columnGroup={columnGroup}\n                                />\n                            )}\n                    </div>\n                </div>\n            </div>\n            {model._movingColumn &&\n                <ColumnBearer gridModel={model} rows={data.rows} />}\n\n        </>\n    );\n\n})\n","\nexport default (\n  onScroll,\n  onSelectionChange,\n  onSelectCell,\n  onDoubleClick\n\n) => (state, action) => {\n  const { type, ...props } = action;\n  console.log(`%cgridReducer ${type}`,'color:blue;font-weight: bold;')\n  if (type === 'scroll') {\n      onScroll && onScroll(props);\n  } else if (type === 'selection') {\n      const {idx, row, rangeSelect, keepExistingSelection} = action;\n      onSelectionChange(idx, row, rangeSelect, keepExistingSelection);\n  } else if (type === 'select-cell') {\n      const { idx: rowIdx, cellIdx } = action;\n      onSelectCell && onSelectCell(rowIdx, cellIdx);\n  } else if (type === 'double-click') {\n    const { idx, row } = action;\n    onDoubleClick && onDoubleClick(idx, row);\n  }\n  return state;\n}\n","import React from 'react';\n// import { ContextMenu, MenuItem, Separator } from '../services/popups/index';\nimport { ContextMenu, MenuItem, Separator } from '@heswell/ui-controls';\n\nimport * as Action from '../model/actions';\n\nexport const ContextMenuActions = {\n    SortAscending : 'sort-asc',\n    SortAddAscending : 'sort-add-asc',\n    SortDescending : 'sort-dsc',\n    SortAddDescending : 'sort-add-dsc',\n    GroupBy : 'groupby',\n    GroupByReplace : 'groupby-replace'\n};\n\nexport default class GridContextMenu extends React.Component {\n\n    handleMenuAction(action, data){\n        const {dispatch, doAction} = this.props;\n        switch(action){\n            case ContextMenuActions.GroupBy:\n                dispatch({ type: Action.groupExtend, column: data.column });\n                break;\n            case ContextMenuActions.GroupByReplace:\n                dispatch({ type: Action.GROUP, column: data.column });\n                break;\n            case ContextMenuActions.SortAscending: \n                return this.sort(data.column, 'asc');\n            case ContextMenuActions.SortDescending: \n                return this.sort(data.column, 'dsc');\n            case ContextMenuActions.SortAddAscending:\n                return this.sort(data.column, 'asc', true);\n            case ContextMenuActions.SortAddDescending:\n                return this.sort(data.column, 'dsc', true);\n    \n            default:\n                doAction(action, data)\n        }\n    }\n\n    sort(column, direction = null, preserveExistingSort = false){\n        const {dispatch} = this.props;\n        // this will transform the columns which will cause whole grid to re-render down to cell level. All\n        // we really need if for headers to rerender. SHould we store sort criteria outside of columns ?\n        dispatch({ type: Action.SORT, column, direction, preserveExistingSort });\n    }\n\n    render() {\n\n        const {location, options} = this.props;\n\n        return (\n            // TODO replace the inline function when we move to SFC\n            <ContextMenu doAction={(action, data) => this.handleMenuAction(action, data)}>\n                {this.menuItems(location, options)}\n            </ContextMenu>\n        );\n\n    }\n\n    menuItems(location, options) {\n\n        const menuItems = [];\n\n        if (location === 'header') {\n\n            const {model, column: {name: colName, sorted, isGroup}} = options;\n            const {groupBy, sortBy:sortCriteria} = model;\n\n            if (!sorted) {\n                menuItems.push(\n                    <MenuItem key='sort-asc' action='sort-asc' data={options} label='Sort' >\n                        <MenuItem key='sort-asc' action='sort-asc' data={options} label='ASC' />\n                        <MenuItem key='sort-dsc' action='sort-dsc' data={options} label='DESC' />\n                    </MenuItem>\n                );\n\n                if (sortCriteria && sortCriteria.length){\n                    menuItems.push(\n                        <MenuItem key='sort-add-asc' action='sort-add-asc' data={options} label='Add to Sort' >\n                            <MenuItem key='sort-add-asc' action='sort-add-asc' data={options} label='ASC' />\n                            <MenuItem key='sort-add-dsc' action='sort-add-dsc' data={options} label='DESC' />\n                        </MenuItem>\n                    );\n                }\n                                \n            } else {    \n\n                if (sortCriteria && sortCriteria.length > 1){\n                    menuItems.push(\n                       <MenuItem key='sort-remove' action='sort-remove' data={options} label='Remove from Sort' />\n                    );\n                }\n        \n                if (sorted === 1) {\n                    menuItems.push(<MenuItem key='sort-asc' action='sort-dsc' data={options} label='Sort (DESC)' />);\n                } else {\n                    menuItems.push(<MenuItem key='sort-dsc' action='sort-asc' data={options} label='Sort (ASC)' />);\n                }\n            }\n\n            if (groupBy && groupBy.length) {\n                if (!isGroup){\n                    menuItems.push(<MenuItem key='groupby-add' action='groupby' data={options} label={`Add ${colName} to Group`} />);\n                }\n            } else {\n                menuItems.push(<MenuItem key='groupby-add' action='groupby' data={options} label={`Group by ${colName}`} />);\n            }\n\n        } else if (location === 'row') {\n            menuItems.push(<MenuItem key='delete-row' action='delete-row' label='Delete Row' />);\n        }\n\n        menuItems.push(<Separator key='1' />);\n\n        if (options.showFilters) {\n            menuItems.push(<MenuItem key='hide-filters' action={Action.TOGGLE_FILTERS} label='Hide Filters' />);\n        } else {\n            menuItems.push(<MenuItem key='show-filters' action={Action.TOGGLE_FILTERS} label='Column Filters' />);\n        }\n        menuItems.push(<MenuItem key='settings' action='settings' label='Settings' />);\n\n        return menuItems;\n\n    }\n\n}\n\n","import React, { useCallback } from 'react';\nimport { PopupService } from '@heswell/ui-controls';\nimport GridContextMenu from './grid-context-menu.jsx';\nimport * as Action from '../model/actions';\n\nexport const useContextMenu = (model, showFilters, setShowFilters, dispatch) => {\n\n  const handleContextMenuAction = useCallback(action => {\n\n    if (action === Action.TOGGLE_FILTERS) {\n      setShowFilters(state =>  !state);\n    }\n  }, [showFilters]);\n\n  return useCallback((e, location, options) => {\n\n    e.preventDefault();\n    e.stopPropagation();\n\n    const { clientX: left, clientY: top } = e;\n    const component = (\n      <GridContextMenu\n        location={location}\n        options={{\n          ...options,\n          model,\n          showFilters\n        }}\n        dispatch={dispatch}\n        doAction={handleContextMenuAction}\n      />)\n      ;\n\n    PopupService.showPopup({ left: Math.round(left), top: Math.round(top), component });\n\n  },[model, showFilters])\n\n\n}\n\n","\n// TODO calculate width, height if not specified\n/*global requestAnimationFrame cancelAnimationFrame */\nimport React, { useRef, useState, useReducer, useEffect, useCallback } from 'react';\nimport cx from 'classnames';\nimport { columnUtils } from '@heswell/data';\nimport { createLogger, logColor } from '@heswell/utils';\nimport * as Action from './model/actions';\nimport { Motion, spring } from 'react-motion';\n// import { useAnimate } from 'react-simple-animate'\nimport modelReducer, { initModel } from './model/model-reducer';\nimport Header from './header/header.jsx';\nimport InlineFilter from './header/inline-filter.jsx';\nimport { Viewport } from './core/viewport.jsx';\nimport { getScrollbarSize } from './utils/domUtils';\nimport GridContext from './grid-context';\nimport gridReducer from './grid-reducer';\nimport {useContextMenu} from './context-menu/use-context-menu.jsx';\n\nimport './grid.css';\n\nconst logger = createLogger('Grid', logColor.green)\n\nconst scrollbarSize = getScrollbarSize();\n//TODO \n// 1) how do we assign extra horizontal space\n\n/**\n * @typedef {Object} GridProps\n * @property {object} dataView \n */\n\n/**\n * @type React.FunctionComponent \n * @param {GridProps} props \n */\nexport default function Grid({\n    dataView,\n    columns=[],\n    style,\n    showHeaders = true,\n    headerHeight = showHeaders ? 24 : 0,\n    showFilters:initialShowFilters = false,\n    onScroll,\n    // TODO capture these as callbackProps\n    onSelectCell=() => {},\n    onSingleSelect,\n    onSelectionChange,\n    onDoubleClick,\n    //TODO be explicit, what can we have here - which of these make sense as grid props ?\n    ...props\n    // width\n    // height\n    // rowHeight\n    // minColumnWidth\n    // groupColumnWidth\n    // sortBy\n    // groupBy\n    // range\n    // groupState\n    // filter\n    // collapsedColumns\n    // selectionModel\n}) {\n    const header = useRef(null);\n    const inlineFilter = useRef(null);\n    const scrollLeft = useRef(0);\n    const overTheLine = useRef(0);\n    const inputWidth = props.width || style.width; \n    const inputHeight = props.height || style.height; \n\n    const [showFilters, setShowFilters] = useState(initialShowFilters);\n    const [filter, setFilter] = useState(null);\n\n    const handleScroll = useCallback(params => {\n        const { scrollLeft: pos = -1 } = params;\n        if (pos !== -1) {\n            if (scrollLeft.current !== pos) {\n                scrollLeft.current = pos;\n                if (header.current) {\n                    header.current.scrollLeft(pos);\n                }\n                if (inlineFilter.current) {\n                    inlineFilter.current.scrollLeft(pos);\n                }\n            }\n        }\n        onScroll && onScroll(params);\n    },[]);\n\n    const handleSelectionChange = useCallback((idx, row, rangeSelect, keepExistingSelection) => {\n        dataView.select(idx, row, rangeSelect,keepExistingSelection);\n        if (onSelectionChange){\n            const isSelected = row[model.meta.SELECTED] === 1;\n            // TODO what about range selections\n            onSelectionChange && onSelectionChange(idx, row, !isSelected)\n        }\n      // if (selected.length === 1 && onSingleSelect) {\n      //     onSingleSelect(selected[0], selectedItem);\n      // }\n\n    },[])\n\n    // this reducer is a no=op - always returns same state\n    // TODO why not use existing reducer ?\n    const [, callbackPropsDispatch] = useReducer(useCallback(gridReducer(\n        handleScroll,\n        handleSelectionChange,\n        onSelectCell,\n        onDoubleClick\n    ),[]), null);\n\n    const [model, dispatch] = useReducer(modelReducer, {\n        //TODO which props exactly does the model still use ?\n        ...props,\n        columns,\n        scrollbarSize,\n        headerHeight\n    }, initModel);\n\n    const showContextMenu = useContextMenu(model, showFilters, setShowFilters, dispatch);\n\n    const {\n        height,\n        width,\n        _headingDepth,\n        groupBy,\n        groupState,\n        sortBy,\n        _overTheLine } = model;\n\n    useEffect(() => {\n        overTheLine.current = _overTheLine;\n        logger.log(`<useEffect _overTheLine>`);\n        // we want to keep dispatching scroll as long as the column is over the line\n        const scroll = () => {\n            if (overTheLine.current !== 0) {\n                const type = overTheLine.current > 0 ? Action.SCROLL_RIGHT : Action.SCROLL_LEFT;\n                const scrollDistance = type === Action.SCROLL_RIGHT ? 3 : -3;\n                dispatch({ type, scrollDistance });\n                requestAnimationFrame(scroll);\n            }\n        };\n        scroll();\n\n    }, [_overTheLine])\n\n    useEffect(() => {\n        dispatch({type: Action.GRID_RESIZE, width: inputWidth, height: inputHeight})\n    },[inputWidth, inputHeight])\n\n    useEffect(() => {\n        if (sortBy !== undefined) {\n            dataView.sort(sortBy);\n        }\n    }, [dataView, sortBy]);\n\n    useEffect(() => {\n        if (groupBy !== undefined) {\n            dataView.group(groupBy);\n        }\n    }, [dataView, groupBy])\n\n    useEffect(() => {\n        if (groupState !== undefined) {\n            dataView.setGroupState(groupState);\n        }\n    }, [dataView, groupState]);\n\n    const filterHeight = showFilters ? 24 : 0;\n    const headingHeight = showHeaders ? headerHeight * _headingDepth : 0;\n    const totalHeaderHeight = headingHeight + filterHeight;\n    const isEmpty = dataView.size <= 0;\n    const emptyDisplay = (isEmpty && props.emptyDisplay) || null;\n    const className = cx(\n        'Grid',\n        props.className,\n        emptyDisplay ? 'empty' : '',\n        isEmpty && props.showHeaderWhenEmpty === false ? 'no-header' : ''\n    );\n\n    return (\n        // we can roll context menu into the context once more of the child components are functions\n        <GridContext.Provider value={{dispatch, callbackPropsDispatch, showContextMenu}}>\n            <div style={{ position: 'relative', height, width, ...style }} className={className}>\n                {showHeaders && headerHeight !== 0 &&\n                    <Header ref={header}\n                        height={headingHeight}\n                        model={model}\n                        colHeaderRenderer={props.colHeaderRenderer}\n                    />}\n\n                {showFilters &&\n                    <InlineFilter ref={inlineFilter}\n                        dataView={dataView}\n                        model={model}\n                        filter={filter}\n                        height={filterHeight}\n                        style={{ position: 'absolute', top: headingHeight, height: filterHeight, width }} />}\n\n                <Motion defaultStyle={{ top: headingHeight }} style={{ top: spring(totalHeaderHeight) }}>\n                    {interpolatingStyle =>\n                        <Viewport\n                            dataView={dataView}\n                            model={model}\n                            style={interpolatingStyle}\n                            height={height - totalHeaderHeight}\n                            onFilterChange={setFilter}\n                        />}\n                </Motion>\n                {emptyDisplay}\n            </div>\n        </GridContext.Provider>\n    );\n}"],"names":["ROWCOUNT","GROUP","SORT","SORT_GROUP","GRID_RESIZE","COLUMN_RESIZE_BEGIN","COLUMN_RESIZE","COLUMN_RESIZE_END","RESIZE_HEADING","TOGGLE","TOGGLE_FILTERS","SCROLL_LEFT","SCROLL_RIGHT","groupExtend","Selection","Checkbox","SingleRow","MultipleRow","DEFAULT_TYPE","name","renderCellContent","props","column","row","type","formatter","value","key","React","columnType","getGridCellClassName","cx","className","resizing","moving","memo","idx","onClick","style","width","clickHandler","useCallback","tabIndex","cellClass","meta","isSelected","SELECTED","rowUtils","isEmptyRow","CHAR_ARROW_UP","String","fromCharCode","CHAR_ARROW_DOWN","UP1","UP2","DOWN1","DOWN2","FlashStyle","INITIAL_VALUE","useDirection","ref","useRef","prevKey","prevValue","prevColumn","prevDirection","current","direction","Number","isFinite","newValue","diff","dataType","decimals","formatting","toFixed","getDirection","useEffect","renderer","flashStyle","KEY","arrow","dirClass","arrowClass","Left","Right","None","Capitalize","defaultFormatting","align","capitalization","defaultOptions","PUNCTUATION_STR","DIGIT_STR","DECIMALS_AUTO","Space","DIGIT","TWO_DIGITS","THREE_DIGITS","FULL_PADDING","LEADING_FILL","Align","Center","Zero","roundDecimal","zeroPad","alignOnDecimals","undefined","isNaN","integral","fraction","Pad","part1","part2","toString","split","actualDecimals","length","parseFloat","toLocaleString","maxLength","slice","padLeft","pad","n","dp","len","charAt","replace","numberOr","fallback","e","preventDefault","stopPropagation","isExpanded","DEPTH","columns","rowExpanded","count","COUNT","result","depth","Math","abs","i","groupLevel","getValue","paddingLeft","getContent","FormatRegistry","RegistryOfCellRenderers","defaultFormatter","cellCSS","registerFormatter","component","registerRenderer","getCellRenderer","Type","React.createElement","isGroup","GroupCell","Cell","size","getScrollbarSize","outer","document","createElement","height","overflowY","position","top","left","inner","appendChild","body","outerWidth","offsetWidth","innerWidth","removeChild","CheckboxRenderer","BackgroundCellRenderer","numberOfDecimals","number","push","join","metaData","columnUtils","state","action","handlers","MISSING_HANDLER","DEFAULT_MODEL_STATE","headerHeight","rowHeight","minColumnWidth","groupColumnWidth","availableColumns","range","sortBy","groupBy","groupState","rowCount","scrollbarSize","scrollLeft","collapsedColumns","displayWidth","totalColumnWidth","selectionModel","_columns","_movingColumn","_groups","_overTheLine","_columnDragPlaceholder","_headingDepth","_headingResize","RESIZING","NOT_RESIZING","EMPTY_ARRAY","console","warn","MAX_OVER_THE_LINE","initialize","log","JSON","stringify","gridState","Action","getDisplayWidth","preserveExistingSort","newSortCriteria","sorted","DSC","ASC","concat","existingGroupBy","groupIdx","groupHelpers","indexOfCol","colName","sortDirection","sortCol","map","groupCol","updateGroupBy","updatedGroups","isHeading","updateGroupHeading","updateGroupColumn","lastSizedCol","getColumnPositions","splitKeys","columnResize","pos","groupColIdx","diffs","numCols","sign","absDiff","numSlotsToFill","min","each","floor","results","getColumnAdjustments","newState","targetCol","updates","updateColumn","_virtualLeft","groups","j","getColumnLeft","moveBoundaries","right","getColumnMoveBoundaries","replaceGroupColumn","isPlaceHolder","distance","oldPosLeft","canScroll","farLeft","rightLine","farRight","newPosLeft","max","overTheLineRight","_updateColumnPosition","movingColumn","finalIdx","from","findIndex","c","col","splice","reorderColumns","replaceColumnHeadings","groupRow","groupedRow","model","columnMap","groupByIdx","newGroupState","stateEntry","find","groupVal","toggleGroupState","lo","hi","scrollDistance","maxScroll","label","updatedCollapsedColumns","filter","initModel","preCols","sortable","keyedColumns","toKeyedColumn","toColumn","sortMap","sortUtils","sortByToMap","maxHeadingDepth","heading","Array","isArray","group","groupColumn","nonGroupedColumns","groupedColumns","rest","arrayUtils","partition","Error","groupCount","groupCols","extractGroupColumn","headings","locked","renderWidth","renderLeft","addColumnToHeadings","columnKey","hidden","collapsedHeading","header","collapsed","splitIntoGroups","sumWidth","forEach","flatMap","firstColumn","cssText","innerText","w","getColumnWidth","visibleColumns","unsizedCols","sizedCols","list","test1","test2","results1","misses","results2","defaultCount","defaultWidth","lockedGroupWidth","scrollGroupWidth","colHeading","columnKeysToColumns","measure","buildColumnMap","compositeKey","k","parseInt","updatedGroup","colWidth","columnKeysToIndices","reduce","sum","updateColumnHeading","widthAdjustment","positionsLeft","positionsRight","columnPosition","insertionIdx","insertionGroupIdx","groupColCount","earlierGroupColCount","lastGroup","adjustment","fromGroupIdx","fromColumnIdx","toGroupIdx","toColumnIdx","cloneGroup","shiftLeft","columnIdx","removeColumnFromGroup","addColumnToGroup","moveGroupColumn","headingUpdates","subHeadingUpdates","columnUpdates","keys","groupHeadingIdx","headingColIdx","h","getHeadingPosition","updatedHeading","updatedH","indexOf","updatedColumn","getColumnPosition","targetColumn","replacementColumn","indices","every","presenter","t","getFormatter","getWidth","minWidth","add","val1","val2","endsWith","string","subString","str","colHeader","colHeaderLabel","lastHeading","hide","d","head","colHeadingLabel","isCollapsed","collapsible","lowerDepth","lastLowerDepth","clientHeight","contentHeight","horizontalScrollbar","scrollbarNeeded","verticalScrollbar","contentSize","containerSize","NOOP","allProps","Component","onDrag","onDragStart","onDragEnd","children","child","x","y","dragState","handleMouseDown","newDragState","button","clientX","clientY","window","addEventListener","onMouseUp","onMouseMove","deltaX","deltaY","cleanUp","drag","removeEventListener","cloneElement","onMouseDown","Direction","multiColumnSort","SortIcon","createContext","dispatch","useContext","GridContext","isHidden","Label","propClassName","onResize","onMove","onContextMenu","dragging","wasDragging","el","handleResize","getWidthFromMouseEvent","pageX","getBoundingClientRect","display","SortIndicator","ToggleIcon","resizeable","Draggable","ColHeader","onRemoveColumn","expandState","onToggle","expanded","onToggleGroupState","handleClick","expandStates","fill","all","expandStatesfromGroupState","columnClassName","classes","forwardRef","columnGroup","colGroupHeaderRenderer","colHeaderRenderer","ignoreHeadings","onColumnMove","showContextMenu","containerEl","useImperativeHandle","handleColumnResize","phase","handleRemoveGroupBy","handleHeaderCellClick","handleToggleGroupState","renderGroupHeader","isValidElement","GroupbyHeaderCell","renderCell","HeaderCell","handleGroupHeaderCellClick","item","bottomless","renderColHeadings","reverse","whiteSpace","renderHeaderCells","propStyle","scrollingHeader","handleColumnMove","ColumnGroupHeader","_dialogOpen","_popups","specialKeyHandler","keyCode","closeAllPopups","ReactDOM","unmountComponentAtNode","querySelector","outsideClickHandler","popupContainers","querySelectorAll","contains","target","popupClosed","PopupService","popupOpened","render","keepWithinThePage","container","firstChild","overflowH","innerHeight","overflowW","dataView","onClearFilter","onFilterOpen","onFilterClose","showFilter","onFilter","rootEl","closeFilter","hidePopup","hideFilter","setTimeout","handleKeyDown","filterUtils","STARTS_WITH","clearFilter","handleNumberFilterChange","handleFilter","getFilter","requestAnimationFrame","showPopup","round","moveFilter","movePopup","MultiColumnFilter","onHide","onClose","onApplyFilter","getFilterType","NumberFilter","SetFilter","isActive","includesColumn","padding","onKeyDown","NOT_IN","serverFilter","setShowFilter","useState","getFilterData","setFilterRange","newFilter","addFilter","isNumeric","handleClearFilter","values","DataTypes","ROW_DATA","ColumnFilter","Header","gridModel","handleContextMenu","callbackPropsDispatch","rangeSelect","shiftKey","keepExistingSelection","ctrlKey","metaKey","handleDoubleClick","cellIdx","selected","cells","transform","onDoubleClick","byKey","key1","key2","cssCanvas","overflow","cssCanvasContent","firstVisibleRow","rows","contentEl","RENDER_IDX","gridRows","absIdx","sort","abs_idx","Row","fixed","NULL_FORMATTER","ColumnBearer","headingDepth","INITIAL_RANGE","initialData","offset","_keys","free","used","keyCount","usedKey","setKeys","mergedRows","mergeAndPurge","setRange","reset","setData","update","applyUpdates","deselected","IDX","input","rowIdx","wasSelected","nowSelected","includes","nowDeselected","dolly","applySelection","setSize","emptyRow","incomingRows","freeKeys","usedKeys","low","high","rowKey","maxKey","shift","freeIdx","createLogger","logColor","green","cssViewport","bottom","cssViewportContent","Viewport","onFilterChange","scrollingCanvas","scrollableContainerEl","verticalScrollContainer","scrollTop","data","dispatchData","useReducer","dataReducer","viewportSize","ceil","subscribe","msg","setSrollTop","unsubscribe","firstRow","handleVerticalScroll","callback","timeoutHandler","raf","useThrottledScroll","numberOfRowsInViewport","handleHorizontalScroll","currentTarget","horizontalScrollingRequired","maxContentHeight","emptyRows","colGroup","onScroll","Canvas","onSelectionChange","onSelectCell","ContextMenuActions","SortAscending","SortAddAscending","SortDescending","SortAddDescending","GroupBy","GroupByReplace","GridContextMenu","handleMenuAction","doAction","this","location","options","ContextMenu","menuItems","sortCriteria","MenuItem","Separator","showFilters","useContextMenu","setShowFilters","handleContextMenuAction","logger","Grid","showHeaders","initialShowFilters","onSingleSelect","inlineFilter","overTheLine","inputWidth","inputHeight","setFilter","handleScroll","params","handleSelectionChange","select","gridReducer","modelReducer","scroll","setGroupState","filterHeight","headingHeight","totalHeaderHeight","isEmpty","emptyDisplay","showHeaderWhenEmpty","Provider","InlineFilter","Motion","defaultStyle","spring","interpolatingStyle"],"mappings":"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"}