{
  "version": 3,
  "sources": ["../../src/store/event-emitter.ts"],
  "sourcesContent": ["const MAX_LISTENERS = 10;\n\nexport class EventEmitter {\n  constructor() {\n    this._events = {};\n    this._maxListeners = MAX_LISTENERS;\n  }\n\n  addListener(type, listener) {\n    let m;\n\n    if (!isFunction(listener)) {\n      throw TypeError('listener must be a function');\n    }\n\n    if (!this._events) {\n      this._events = {};\n    }\n\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (this._events.newListener) {\n      this.emit('newListener', type, listener);\n    }\n\n    if (!this._events[type]) {\n      // Optimize the case of one listener. Don't need the extra array object.\n      this._events[type] = listener;\n    } else if (Array.isArray(this._events[type])) {\n      // If we've already got an array, just append.\n      this._events[type].push(listener);\n    } else {\n      // Adding the second element, need to change to array.\n      this._events[type] = [this._events[type], listener];\n    }\n\n    // Check for listener leak\n    if (Array.isArray(this._events[type]) && !this._events[type].warned) {\n      if (!isUndefined(this._maxListeners)) {\n        m = this._maxListeners;\n      } else {\n        m = MAX_LISTENERS;\n      }\n\n      if (m && m > 0 && this._events[type].length > m) {\n        this._events[type].warned = true;\n        console.error(\n          '(node) warning: possible EventEmitter memory ' +\n            'leak detected. %d listeners added. ' +\n            'Use emitter.setMaxListeners() to increase limit.',\n          this._events[type].length\n        );\n      }\n    }\n\n    return this;\n  }\n\n  removeListener(type, listener) {\n    let list, position, length, i;\n\n    if (!isFunction(listener)) {\n      throw TypeError('listener must be a function');\n    }\n\n    if (!this._events || !this._events[type]) {\n      return this;\n    }\n\n    list = this._events[type];\n    length = list.length;\n    position = -1;\n\n    if (list === listener || (isFunction(list.listener) && list.listener === listener)) {\n      delete this._events[type];\n      if (this._events.removeListener) {\n        this.emit('removeListener', type, listener);\n      }\n    } else if (Array.isArray(list)) {\n      for (i = length; i-- > 0; ) {\n        if (list[i] === listener || (list[i].listener && list[i].listener === listener)) {\n          position = i;\n          break;\n        }\n      }\n\n      if (position < 0) {\n        return this;\n      }\n\n      if (list.length === 1) {\n        list.length = 0;\n        delete this._events[type];\n      } else {\n        list.splice(position, 1);\n      }\n\n      if (this._events.removeListener) {\n        this.emit('removeListener', type, listener);\n      }\n    }\n\n    return this;\n  }\n\n  removeAllListeners(type) {\n    if (!this._events) {\n      return this;\n    }\n\n    const listeners = this._events[type];\n\n    if (isFunction(listeners)) {\n      this.removeListener(type, listeners);\n    } else if (listeners) {\n      // LIFO order\n      while (listeners.length) {\n        this.removeListener(type, listeners[listeners.length - 1]);\n      }\n    }\n    delete this._events[type];\n\n    return this;\n  }\n\n  emit(type, ...args) {\n    if (!this._events) {\n      this._events = {};\n    }\n\n    // If there is no 'error' event listener then throw.\n    if (type === 'error') {\n      if (!this._events.error || (isObject(this._events.error) && !this._events.error.length)) {\n        const err = arguments[1];\n        if (err instanceof Error) {\n          throw err; // Unhandled 'error' event\n        } else {\n          // At least give some kind of context to the user\n          throw new Error('Uncaught, unspecified \"error\" event. (' + err + ')');\n        }\n      }\n    }\n\n    const handler = this._events[type];\n\n    if (isUndefined(handler)) {\n      return false;\n    }\n\n    if (isFunction(handler)) {\n      switch (args.length) {\n        // fast cases\n        case 0:\n          handler.call(this);\n          break;\n        case 1:\n          handler.call(this, type, args[0]);\n          break;\n        case 2:\n          handler.call(this, type, args[0], args[1]);\n          break;\n        // slower\n        default:\n          handler.call(this, type, ...args);\n      }\n    } else if (Array.isArray(handler)) {\n      handler.slice().forEach((listener) => listener.call(this, type, ...args));\n    }\n\n    return true;\n  }\n\n  once(type, listener) {\n    const handler = (evtName, message) => {\n      this.removeListener(evtName, handler);\n      listener(evtName, message);\n    };\n\n    this.on(type, handler);\n  }\n\n  on(type, listener) {\n    return this.addListener(type, listener);\n  }\n}\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n"],
  "mappings": "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",
  "names": []
}
