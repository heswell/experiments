{
  "version": 3,
  "sources": ["../../src/store/columnUtils.ts"],
  "sourcesContent": ["import {\n  functor,\n  overrideColName,\n  SET_FILTER_DATA_COLUMNS,\n  BIN_FILTER_DATA_COLUMNS\n} from './filter.js';\n\nconst SORT_ASC = 'asc';\n\nexport const setFilterColumnMeta = metaData(SET_FILTER_DATA_COLUMNS);\nexport const binFilterColumnMeta = metaData(BIN_FILTER_DATA_COLUMNS);\n\nexport function mapSortCriteria(sortCriteria, columnMap) {\n  return sortCriteria.map((s) => {\n    if (typeof s === 'string') {\n      return [columnMap[s], 'asc'];\n    } else if (Array.isArray(s)) {\n      const [columnName, sortDir] = s;\n      return [columnMap[columnName], sortDir || SORT_ASC];\n    } else {\n      throw Error('columnUtils.mapSortCriteria invalid input');\n    }\n  });\n}\n\nexport const toKeyedColumn = (column, key) =>\n  typeof column === 'string'\n    ? { key, name: column }\n    : typeof column.key === 'number'\n    ? column\n    : { ...column, key };\n\nexport const toColumn = (column) => (typeof column === 'string' ? { name: column } : column);\n\nexport function buildColumnMap(columns) {\n  if (columns) {\n    return columns.reduce((map, column, i) => {\n      if (typeof column === 'string') {\n        map[column] = i;\n      } else if (typeof column.key === 'number') {\n        map[column.name] = column.key;\n      } else {\n        map[column.name] = i;\n      }\n      return map;\n    }, {});\n  } else {\n    return null;\n  }\n}\n\nexport function projectColumns(map, columns, meta) {\n  const length = columns.length;\n  const { IDX, RENDER_IDX, DEPTH, COUNT, KEY, SELECTED } = meta;\n  return (startIdx, offset, selectedRows = []) =>\n    (row, i) => {\n      // selectedRows are indices of rows within underlying dataset (not sorted or filtered)\n      // row is the original row from this set, with original index in IDX pos, which might\n      // be overwritten with a different value below if rows are sorted/filtered\n      const baseRowIdx = row[IDX];\n\n      const out = [];\n      for (let i = 0; i < length; i++) {\n        const colIdx = map[columns[i].name];\n        out[i] = row[colIdx];\n      }\n\n      out[IDX] = startIdx + i + offset;\n      out[RENDER_IDX] = 0;\n      out[DEPTH] = 0;\n      out[COUNT] = 0;\n      // assume row[0] is key for now\n      out[KEY] = row[0];\n      out[SELECTED] = selectedRows.includes(baseRowIdx) ? 1 : 0;\n      return out;\n    };\n}\n\nexport function projectColumnsFilter(map, columns, meta, filter) {\n  const length = columns.length;\n  const { IDX, RENDER_IDX, DEPTH, COUNT, KEY, SELECTED } = meta;\n\n  // this is filterset specific where first col is always value\n  const fn = filter ? functor(map, overrideColName(filter, 'name'), true) : () => true;\n  return (startIdx) => (row, i) => {\n    const out = [];\n    for (let i = 0; i < length; i++) {\n      const colIdx = map[columns[i].name];\n      out[i] = row[colIdx];\n    }\n    // assume row[0] is key for now\n    // out.push(startIdx+i, 0, 0, row[0]);\n    out[IDX] = startIdx + i;\n    out[RENDER_IDX] = 0;\n    out[DEPTH] = 0;\n    out[COUNT] = 0;\n    out[KEY] = row[0];\n    out[SELECTED] = fn(row) ? 1 : 0;\n\n    return out;\n  };\n}\n\nexport function getFilterType(column) {\n  return column.filter || getDataType(column);\n}\n\n// {name: 'Price', 'type': {name: 'price'}, 'aggregate': 'avg'},\n// {name: 'MarketCap', 'type': {name: 'number','format': 'currency'}, 'aggregate': 'sum'},\n\nexport function getDataType({ type = null }) {\n  if (type === null) {\n    return 'set';\n  } else if (typeof type === 'string') {\n    return type;\n  } else {\n    switch (type.name) {\n      case 'price':\n        return 'number';\n      default:\n        return type.name;\n    }\n  }\n}\n\n//TODO cache result by length\nexport function metaData(columns) {\n  const start =\n    columns.length === 0\n      ? -1\n      : Math.max(\n          ...columns.map((column, idx) => (typeof column.key === 'number' ? column.key : idx))\n        );\n  return {\n    IDX: start + 1,\n    RENDER_IDX: start + 2,\n    DEPTH: start + 3,\n    COUNT: start + 4,\n    KEY: start + 5,\n    SELECTED: start + 6,\n    PARENT_IDX: start + 7,\n    IDX_POINTER: start + 8,\n    FILTER_COUNT: start + 9,\n    NEXT_FILTER_IDX: start + 10,\n    count: start + 11\n  };\n}\n"],
  "mappings": "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",
  "names": ["i"]
}
