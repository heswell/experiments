{
  "version": 3,
  "sources": ["../../src/store/table.ts"],
  "sourcesContent": ["/*global fetch */\nimport { EventEmitter } from './event-emitter.js';\nimport { buildColumnMap } from './columnUtils.js';\n\nconst defaultUpdateConfig = {\n  applyUpdates: false,\n  applyInserts: false,\n  interval: 500\n};\n\nexport default class Table extends EventEmitter {\n  constructor(config) {\n    super();\n\n    const { name, columns = null, primaryKey, dataPath, data, updates = {} } = config;\n\n    this.name = name;\n    this.primaryKey = primaryKey;\n    this.columns = columns;\n    this.keys = {};\n    this.index = {};\n    this.rows = [];\n    this.updateConfig = {\n      ...defaultUpdateConfig,\n      ...updates\n    };\n    this.columnMap = buildColumnMap(columns);\n    this.columnCount = 0;\n    this.status = null;\n\n    // console.log(`Table\n    //     columns = ${JSON.stringify(columns,null,2)}\n    //     columnMap = ${JSON.stringify(this.columnMap,null,2)}\n    //     `)\n\n    if (data) {\n      this.parseData(data);\n    } else if (dataPath) {\n      this.loadData(dataPath);\n    }\n\n    this.installDataGenerators(config);\n  }\n\n  update(rowIdx, ...updates) {\n    const results = [];\n    let row = this.rows[rowIdx];\n    for (let i = 0; i < updates.length; i += 2) {\n      const colIdx = updates[i];\n      const value = updates[i + 1];\n      results.push(colIdx, row[colIdx], value);\n      row[colIdx] = value;\n    }\n    this.emit('rowUpdated', rowIdx, results);\n  }\n\n  insert(data) {\n    let columnnameList = this.columns ? this.columns.map((c) => c.name) : null;\n    const idx = this.rows.length;\n    let row = this.rowFromData(idx, data, columnnameList);\n    this.rows.push(row);\n    this.emit('rowInserted', idx, row);\n  }\n\n  remove(key) {\n    if (this.keys[key]) {\n      const index = this.indices[key];\n      delete this.keys[key];\n      delete this.indices[key];\n      this.rows.splice(index, 1);\n\n      for (let k in this.indices) {\n        if (this.indices[k] > index) {\n          this.indices[k] -= 1;\n        }\n      }\n\n      this.emit('rowRemoved', this.name, key);\n    }\n  }\n\n  clear() {}\n\n  toString() {\n    const out = ['\\n' + this.name];\n    out.splice.apply(\n      out,\n      [1, 0].concat(\n        this.rows.map(function (row) {\n          return row.toString();\n        })\n      )\n    );\n    return out.join('\\n');\n  }\n\n  async loadData(url) {\n    fetch(url, {})\n      .then((data) => data.json())\n      .then((json) => {\n        console.log(`Table.loadData: got ${json.length} rows`);\n        this.parseData(json);\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  }\n\n  parseData(data) {\n    let columnnameList = this.columns ? this.columns.map((c) => c.name) : null;\n    const rows = [];\n    for (let i = 0; i < data.length; i++) {\n      let row = this.rowFromData(i, data[i], columnnameList);\n      rows.push(row);\n    }\n    this.rows = rows;\n\n    if (this.columns === null) {\n      this.columns = columnsFromColumnMap(this.inputColumnMap);\n      this.columnMap = buildColumnMap(this.columns);\n    }\n    this.status = 'ready';\n    this.emit('ready');\n    if (this.updateConfig && this.updateConfig.applyUpdates !== false) {\n      setTimeout(() => {\n        this.applyUpdates();\n      }, 1000);\n    }\n    // move this\n    if (this.updateConfig && this.updateConfig.applyInserts !== false) {\n      setTimeout(() => {\n        this.applyInserts();\n      }, 10000);\n    }\n  }\n\n  rowFromData(idx, data, columnnameList) {\n    // 2 metadata items for each row, the idx and unique key\n    const { index, primaryKey = null, columnMap: map } = this;\n\n    if (Array.isArray(data)) {\n      const key = data[map[this.primaryKey]];\n      index[key] = idx;\n      return [...data, idx, key];\n    } else {\n      // This allows us to load data from objects as rows, without predefined columns, where\n      // not every row may have every column. How would we handle primary key ?\n      const columnMap = map || (this.columnMap = {});\n      const colnames = columnnameList || Object.getOwnPropertyNames(data);\n      // why start with idx in 0 ?\n      const row = [idx];\n      let colIdx;\n      let key;\n\n      for (let i = 0; i < colnames.length; i++) {\n        const name = colnames[i];\n        const value = data[name];\n        if ((colIdx = columnMap[name]) === undefined) {\n          colIdx = columnMap[name] = this.columnCount++;\n        }\n        row[colIdx] = value;\n        // If we don't know the primary key, assume it is the first column for now\n        if (name === primaryKey || (primaryKey === null && i === 0)) {\n          key = value;\n          index[value] = idx;\n        }\n      }\n      // doesn't this risk pushing the metadata into the wrong slots if not every row has every\n      // field// TODO why do we need metadata fields in table itself ?\n      row.push(idx, key);\n      return row;\n    }\n  }\n\n  //TODO move all these methods into an external helper\n  applyInserts() {\n    const idx = this.rows.length;\n    const newRow = this.createRow(idx);\n    if (newRow) {\n      this.insert(newRow);\n    } else {\n      console.log(`createRow did not return a new row`);\n    }\n\n    setTimeout(() => this.applyInserts(), this.updateConfig.insertInterval | 100);\n  }\n\n  applyUpdates() {\n    const { rows, columnMap } = this;\n    // const count = Math.round(rows.length / 50);\n    const count = 100;\n\n    for (let i = 0; i < count; i++) {\n      const rowIdx = getRandomInt(rows.length - 1);\n      const update = this.updateRow(rowIdx, rows[rowIdx], columnMap);\n      if (update) {\n        this.update(rowIdx, ...update);\n      }\n    }\n\n    setTimeout(() => this.applyUpdates(), this.updateConfig.interval);\n  }\n\n  createRow(idx) {\n    console.warn(`createRow ${idx} must be implemented as a plugin`);\n  }\n\n  updateRow(/*idx, row, columnMap*/) {\n    return null;\n  }\n\n  async installDataGenerators(/*config*/) {\n    //console.warn(`installDataGenerators must be implemented by a more specific subclass`);\n  }\n}\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nfunction columnsFromColumnMap(columnMap) {\n  const columnNames = Object.getOwnPropertyNames(columnMap);\n\n  return columnNames\n    .map((name) => ({ name, key: columnMap[name] }))\n    .sort(byKey)\n    .map(({ name }) => ({ name }));\n}\n\nfunction byKey(col1, col2) {\n  return col1.key - col2.key;\n}\n"],
  "mappings": "AACA,SAAS,oBAAoB;AAC7B,SAAS,sBAAsB;AAE/B,MAAM,sBAAsB;AAAA,EAC1B,cAAc;AAAA,EACd,cAAc;AAAA,EACd,UAAU;AACZ;AAEA,MAAO,cAA4B,aAAa;AAAA,EAC9C,YAAY,QAAQ;AAClB,UAAM;AAEN,UAAM,EAAE,MAAM,UAAU,MAAM,YAAY,UAAU,MAAM,UAAU,CAAC,EAAE,IAAI;AAE3E,SAAK,OAAO;AACZ,SAAK,aAAa;AAClB,SAAK,UAAU;AACf,SAAK,OAAO,CAAC;AACb,SAAK,QAAQ,CAAC;AACd,SAAK,OAAO,CAAC;AACb,SAAK,eAAe;AAAA,MAClB,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AACA,SAAK,YAAY,eAAe,OAAO;AACvC,SAAK,cAAc;AACnB,SAAK,SAAS;AAOd,QAAI,MAAM;AACR,WAAK,UAAU,IAAI;AAAA,IACrB,WAAW,UAAU;AACnB,WAAK,SAAS,QAAQ;AAAA,IACxB;AAEA,SAAK,sBAAsB,MAAM;AAAA,EACnC;AAAA,EAEA,OAAO,WAAW,SAAS;AACzB,UAAM,UAAU,CAAC;AACjB,QAAI,MAAM,KAAK,KAAK;AACpB,aAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK,GAAG;AAC1C,YAAM,SAAS,QAAQ;AACvB,YAAM,QAAQ,QAAQ,IAAI;AAC1B,cAAQ,KAAK,QAAQ,IAAI,SAAS,KAAK;AACvC,UAAI,UAAU;AAAA,IAChB;AACA,SAAK,KAAK,cAAc,QAAQ,OAAO;AAAA,EACzC;AAAA,EAEA,OAAO,MAAM;AACX,QAAI,iBAAiB,KAAK,UAAU,KAAK,QAAQ,IAAI,CAAC,MAAM,EAAE,IAAI,IAAI;AACtE,UAAM,MAAM,KAAK,KAAK;AACtB,QAAI,MAAM,KAAK,YAAY,KAAK,MAAM,cAAc;AACpD,SAAK,KAAK,KAAK,GAAG;AAClB,SAAK,KAAK,eAAe,KAAK,GAAG;AAAA,EACnC;AAAA,EAEA,OAAO,KAAK;AACV,QAAI,KAAK,KAAK,MAAM;AAClB,YAAM,QAAQ,KAAK,QAAQ;AAC3B,aAAO,KAAK,KAAK;AACjB,aAAO,KAAK,QAAQ;AACpB,WAAK,KAAK,OAAO,OAAO,CAAC;AAEzB,eAAS,KAAK,KAAK,SAAS;AAC1B,YAAI,KAAK,QAAQ,KAAK,OAAO;AAC3B,eAAK,QAAQ,MAAM;AAAA,QACrB;AAAA,MACF;AAEA,WAAK,KAAK,cAAc,KAAK,MAAM,GAAG;AAAA,IACxC;AAAA,EACF;AAAA,EAEA,QAAQ;AAAA,EAAC;AAAA,EAET,WAAW;AACT,UAAM,MAAM,CAAC,OAAO,KAAK,IAAI;AAC7B,QAAI,OAAO;AAAA,MACT;AAAA,MACA,CAAC,GAAG,CAAC,EAAE;AAAA,QACL,KAAK,KAAK,IAAI,SAAU,KAAK;AAC3B,iBAAO,IAAI,SAAS;AAAA,QACtB,CAAC;AAAA,MACH;AAAA,IACF;AACA,WAAO,IAAI,KAAK,IAAI;AAAA,EACtB;AAAA,EAEA,MAAM,SAAS,KAAK;AAClB,UAAM,KAAK,CAAC,CAAC,EACV,KAAK,CAAC,SAAS,KAAK,KAAK,CAAC,EAC1B,KAAK,CAAC,SAAS;AACd,cAAQ,IAAI,uBAAuB,KAAK,aAAa;AACrD,WAAK,UAAU,IAAI;AAAA,IACrB,CAAC,EACA,MAAM,CAAC,QAAQ;AACd,cAAQ,MAAM,GAAG;AAAA,IACnB,CAAC;AAAA,EACL;AAAA,EAEA,UAAU,MAAM;AACd,QAAI,iBAAiB,KAAK,UAAU,KAAK,QAAQ,IAAI,CAAC,MAAM,EAAE,IAAI,IAAI;AACtE,UAAM,OAAO,CAAC;AACd,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACpC,UAAI,MAAM,KAAK,YAAY,GAAG,KAAK,IAAI,cAAc;AACrD,WAAK,KAAK,GAAG;AAAA,IACf;AACA,SAAK,OAAO;AAEZ,QAAI,KAAK,YAAY,MAAM;AACzB,WAAK,UAAU,qBAAqB,KAAK,cAAc;AACvD,WAAK,YAAY,eAAe,KAAK,OAAO;AAAA,IAC9C;AACA,SAAK,SAAS;AACd,SAAK,KAAK,OAAO;AACjB,QAAI,KAAK,gBAAgB,KAAK,aAAa,iBAAiB,OAAO;AACjE,iBAAW,MAAM;AACf,aAAK,aAAa;AAAA,MACpB,GAAG,GAAI;AAAA,IACT;AAEA,QAAI,KAAK,gBAAgB,KAAK,aAAa,iBAAiB,OAAO;AACjE,iBAAW,MAAM;AACf,aAAK,aAAa;AAAA,MACpB,GAAG,GAAK;AAAA,IACV;AAAA,EACF;AAAA,EAEA,YAAY,KAAK,MAAM,gBAAgB;AAErC,UAAM,EAAE,OAAO,aAAa,MAAM,WAAW,IAAI,IAAI;AAErD,QAAI,MAAM,QAAQ,IAAI,GAAG;AACvB,YAAM,MAAM,KAAK,IAAI,KAAK;AAC1B,YAAM,OAAO;AACb,aAAO,CAAC,GAAG,MAAM,KAAK,GAAG;AAAA,IAC3B,OAAO;AAGL,YAAM,YAAY,QAAQ,KAAK,YAAY,CAAC;AAC5C,YAAM,WAAW,kBAAkB,OAAO,oBAAoB,IAAI;AAElE,YAAM,MAAM,CAAC,GAAG;AAChB,UAAI;AACJ,UAAI;AAEJ,eAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,cAAM,OAAO,SAAS;AACtB,cAAM,QAAQ,KAAK;AACnB,aAAK,SAAS,UAAU,WAAW,QAAW;AAC5C,mBAAS,UAAU,QAAQ,KAAK;AAAA,QAClC;AACA,YAAI,UAAU;AAEd,YAAI,SAAS,cAAe,eAAe,QAAQ,MAAM,GAAI;AAC3D,gBAAM;AACN,gBAAM,SAAS;AAAA,QACjB;AAAA,MACF;AAGA,UAAI,KAAK,KAAK,GAAG;AACjB,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EAGA,eAAe;AACb,UAAM,MAAM,KAAK,KAAK;AACtB,UAAM,SAAS,KAAK,UAAU,GAAG;AACjC,QAAI,QAAQ;AACV,WAAK,OAAO,MAAM;AAAA,IACpB,OAAO;AACL,cAAQ,IAAI,oCAAoC;AAAA,IAClD;AAEA,eAAW,MAAM,KAAK,aAAa,GAAG,KAAK,aAAa,iBAAiB,GAAG;AAAA,EAC9E;AAAA,EAEA,eAAe;AACb,UAAM,EAAE,MAAM,UAAU,IAAI;AAE5B,UAAM,QAAQ;AAEd,aAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC9B,YAAM,SAAS,aAAa,KAAK,SAAS,CAAC;AAC3C,YAAM,SAAS,KAAK,UAAU,QAAQ,KAAK,SAAS,SAAS;AAC7D,UAAI,QAAQ;AACV,aAAK,OAAO,QAAQ,GAAG,MAAM;AAAA,MAC/B;AAAA,IACF;AAEA,eAAW,MAAM,KAAK,aAAa,GAAG,KAAK,aAAa,QAAQ;AAAA,EAClE;AAAA,EAEA,UAAU,KAAK;AACb,YAAQ,KAAK,aAAa,qCAAqC;AAAA,EACjE;AAAA,EAEA,YAAmC;AACjC,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,wBAAkC;AAAA,EAExC;AACF;AAEA,SAAS,aAAa,KAAK;AACzB,SAAO,KAAK,MAAM,KAAK,OAAO,IAAI,KAAK,MAAM,GAAG,CAAC;AACnD;AAEA,SAAS,qBAAqB,WAAW;AACvC,QAAM,cAAc,OAAO,oBAAoB,SAAS;AAExD,SAAO,YACJ,IAAI,CAAC,UAAU,EAAE,MAAM,KAAK,UAAU,MAAM,EAAE,EAC9C,KAAK,KAAK,EACV,IAAI,CAAC,EAAE,KAAK,OAAO,EAAE,KAAK,EAAE;AACjC;AAEA,SAAS,MAAM,MAAM,MAAM;AACzB,SAAO,KAAK,MAAM,KAAK;AACzB;",
  "names": []
}
