{
  "version": 3,
  "sources": ["../../src/store/sort.ts"],
  "sourcesContent": ["import { mapSortCriteria } from './columnUtils.js';\nimport { ASC } from './types.js';\n\nconst EMPTY_MAP = {};\n\nexport function sortableFilterSet(filterSet) {\n  if (filterSet.length === 0) {\n    return filterSet;\n  } else if (Array.isArray(filterSet[0])) {\n    return filterSet;\n  } else {\n    return filterSet.map((idx) => [idx, null]);\n  }\n}\n\nexport function sortExtend(sortSet, rows, sortCols, newSortCols, columnMap) {\n  sort2ColsAdd1(sortSet, rows, newSortCols, columnMap);\n}\n\nexport function sort(sortSet, rows, sortCols, columnMap) {\n  const sortCriteria = mapSortCriteria(sortCols, columnMap);\n  const count = sortCriteria.length;\n  const sortFn = count === 1 ? sort1 : count === 2 ? sort2 : count === 3 ? sort3 : sortAll;\n  sortFn(sortSet, rows, sortCriteria);\n}\n\nfunction sort2ColsAdd1(sortSet, rows, sortCols, columnMap) {\n  const len = sortSet.length;\n  const sortCriteria = mapSortCriteria(sortCols, columnMap);\n  const [colIdx2] = sortCriteria[1];\n  for (let i = 0; i < len; i++) {\n    sortSet[i][2] = rows[sortSet[i][0]][colIdx2];\n  }\n  sortSet.sort((a, b) => {\n    return a[1] > b[1] ? 1 : b[1] > a[1] ? -1 : a[2] > b[2] ? 1 : b[2] > a[2] ? -1 : 0;\n  });\n}\n\nfunction sort1(sortSet, rows, [[colIdx, direction]]) {\n  const len = sortSet.length;\n  for (let i = 0; i < len; i++) {\n    const idx = sortSet[i][0];\n    sortSet[i][1] = rows[idx][colIdx];\n  }\n  if (direction === ASC) {\n    sortSet.sort((a, b) => {\n      return a[1] > b[1] ? 1 : b[1] > a[1] ? -1 : 0;\n    });\n  } else {\n    sortSet.sort((a, b) => {\n      return a[1] > b[1] ? -1 : b[1] > a[1] ? 1 : 0;\n    });\n  }\n}\n\nfunction sort2(sortSet, rows, sortCriteria) {\n  const len = rows.length;\n  const [colIdx1] = sortCriteria[0];\n  const [colIdx2] = sortCriteria[1];\n  for (let i = 0; i < len; i++) {\n    sortSet[i][0] = i;\n    sortSet[i][1] = rows[i][colIdx1];\n    sortSet[i][2] = rows[i][colIdx2];\n  }\n  sortSet.sort((a, b) => {\n    return a[1] > b[1] ? 1 : b[1] > a[1] ? -1 : a[2] > b[2] ? 1 : b[2] > a[2] ? -1 : 0;\n  });\n}\n\nfunction sort3(/*sortSet,rows,sortCriteria*/) {}\nfunction sortAll(/*sortSet,rows,sortCriteria*/) {}\n\nexport function binarySearch(items, item, comparator) {\n  let l = 0;\n  let h = items.length - 1;\n  let m;\n  let comparison;\n\n  while (l <= h) {\n    m = (l + h) >>> 1; /* equivalent to Math.floor((l + h) / 2) but faster */\n    comparison = comparator(items[m], item);\n    if (comparison < 0) {\n      l = m + 1;\n    } else if (comparison > 0) {\n      h = m - 1;\n    } else {\n      return m;\n    }\n  }\n  return ~l;\n}\n\nexport function binaryInsert(rows, row, comparator) {\n  var i = binarySearch(rows, row, comparator);\n  /* if the binarySearch return value was zero or positive, a matching object was found */\n  /* if the return value was negative, the bitwise complement of the return value is the correct index for this object */\n  if (i < 0) {\n    i = ~i;\n  }\n  rows.splice(i, 0, row);\n  return i;\n}\n\nfunction processTail(tail, row, tailGateKeeper, n, compare) {\n  const diff = tailGateKeeper === null ? -1 : compare(row, tailGateKeeper);\n\n  if (diff > 0 || tail.length < n) {\n    binaryInsert(tail, row, compare);\n    if (tail.length > n) {\n      tail.shift();\n    }\n    tailGateKeeper = tail[0];\n  }\n  return tailGateKeeper;\n}\n\n// this is always called with a single col sort\nexport function sortedLowestAndHighest(rows, sortCriteria, offset, n = 1000) {\n  const s1 = new Date().getTime();\n  const compare = sortBy(sortCriteria);\n  const head = rows.slice(0, n).sort(compare);\n  const tail = [];\n  const len = rows.length;\n\n  let headGateKeeper = head[n - 1];\n  let tailGateKeeper = null;\n\n  for (let i = n; i < len; i++) {\n    if (compare(rows[i], headGateKeeper) < 0) {\n      binaryInsert(head, rows[i], compare);\n      // We need to remove largest item from head, does it belong in tail ?\n      tailGateKeeper = processTail(tail, head.pop(), tailGateKeeper, n, compare);\n      headGateKeeper = head[n - 1];\n    } else {\n      tailGateKeeper = processTail(tail, rows[i], tailGateKeeper, n, compare);\n    }\n  }\n\n  for (let i = 0; i < head.length; i++) {\n    const row = head[i].slice();\n    row[0] = i + offset;\n    head[i] = row;\n  }\n\n  for (let i = 0, idx = len - n; i < tail.length; i++, idx++) {\n    const row = tail[i].slice();\n    row[0] = idx + offset;\n    tail[i] = row;\n  }\n\n  const s2 = new Date().getTime();\n  console.log(`lowest ${n} took ${s2 - s1} ms , producing ${head.length} lowest `);\n\n  return [head, tail];\n}\n\nexport function sortByToMap(sortCriteria = null) {\n  return sortCriteria === null\n    ? EMPTY_MAP\n    : sortCriteria.reduce((map, col, i) => {\n        if (typeof col === 'string') {\n          map[col] = i + 1;\n        } else {\n          const [colName, sortDir] = col;\n          map[colName] = sortDir === ASC ? i + 1 : -1 * (i + 1);\n        }\n        return map;\n      }, {});\n}\n\nexport function sortReversed(cols1, cols2, colCount = cols1.length) {\n  if (cols1 && cols2 && cols1.length > 0 && cols2.length === colCount) {\n    for (let i = 0; i < cols1.length; i++) {\n      let [col1, direction1 = ASC] = cols1[i];\n      let [col2, direction2 = ASC] = cols2[i];\n      if (col1 !== col2 || direction1 === direction2) {\n        return false;\n      }\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n\nexport function GROUP_ROW_TEST(group, row, [colIdx, direction]) {\n  if (group === row) {\n    return 0;\n  } else {\n    let a1 = direction === 'dsc' ? row[colIdx] : group[colIdx];\n    let b1 = direction === 'dsc' ? group[colIdx] : row[colIdx];\n    if (b1 === null || a1 > b1) {\n      return 1;\n    } else if (a1 == null || a1 < b1) {\n      return -1;\n    }\n  }\n}\n\nfunction ROW_SORT_TEST(a, b, [colIdx, direction]) {\n  if (a === b) {\n    return 0;\n  } else {\n    let a1 = direction === 'dsc' ? b[colIdx] : a[colIdx];\n    let b1 = direction === 'dsc' ? a[colIdx] : b[colIdx];\n    if (b1 === null || a1 > b1) {\n      return 1;\n    } else if (a1 == null || a1 < b1) {\n      return -1;\n    }\n  }\n}\n\n// sort null as low. not high\nexport function sortBy(cols, test = ROW_SORT_TEST) {\n  return function (a, b) {\n    for (let i = 0, result = 0, len = cols.length; i < len; i++) {\n      if ((result = test(a, b, cols[i]))) {\n        return result;\n      }\n    }\n    return 0;\n  };\n}\n\n// sorter is the sort comparator used to sort rows, we want to know\n// where row would be positioned in this sorted array. Return the\n// last valid position.\nexport function sortPosition(rows, sorter, row, positionWithinRange = 'last-available') {\n  function selectFromRange(pos) {\n    const len = rows.length;\n    const matches = (p) => sorter(rows[p], row) === 0;\n\n    //TODO this will depend on the sort direction\n    if (positionWithinRange === 'last-available') {\n      while (pos < len && matches(pos)) {\n        pos += 1;\n      }\n    } else if (positionWithinRange === 'first-available') {\n      while (pos > 0 && matches(pos - 1)) {\n        pos -= 1;\n      }\n    }\n\n    return pos;\n  }\n\n  function find(lo, hi) {\n    let mid = lo + Math.floor((hi - lo) / 2);\n    let pos = sorter(rows[mid], row);\n\n    if (lo === mid) {\n      return selectFromRange(pos >= 0 ? lo : hi);\n    }\n    if (pos >= 0) {\n      hi = mid;\n    } else {\n      lo = mid;\n    }\n    return find(lo, hi);\n  }\n\n  if (rows.length === 0) {\n    return 0;\n  } else {\n    return find(0, rows.length);\n  }\n}\n"],
  "mappings": "AAAA,SAAS,uBAAuB;AAChC,SAAS,WAAW;AAEpB,MAAM,YAAY,CAAC;AAEZ,SAAS,kBAAkB,WAAW;AAC3C,MAAI,UAAU,WAAW,GAAG;AAC1B,WAAO;AAAA,EACT,WAAW,MAAM,QAAQ,UAAU,EAAE,GAAG;AACtC,WAAO;AAAA,EACT,OAAO;AACL,WAAO,UAAU,IAAI,CAAC,QAAQ,CAAC,KAAK,IAAI,CAAC;AAAA,EAC3C;AACF;AAEO,SAAS,WAAW,SAAS,MAAM,UAAU,aAAa,WAAW;AAC1E,gBAAc,SAAS,MAAM,aAAa,SAAS;AACrD;AAEO,SAAS,KAAK,SAAS,MAAM,UAAU,WAAW;AACvD,QAAM,eAAe,gBAAgB,UAAU,SAAS;AACxD,QAAM,QAAQ,aAAa;AAC3B,QAAM,SAAS,UAAU,IAAI,QAAQ,UAAU,IAAI,QAAQ,UAAU,IAAI,QAAQ;AACjF,SAAO,SAAS,MAAM,YAAY;AACpC;AAEA,SAAS,cAAc,SAAS,MAAM,UAAU,WAAW;AACzD,QAAM,MAAM,QAAQ;AACpB,QAAM,eAAe,gBAAgB,UAAU,SAAS;AACxD,QAAM,CAAC,OAAO,IAAI,aAAa;AAC/B,WAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC5B,YAAQ,GAAG,KAAK,KAAK,QAAQ,GAAG,IAAI;AAAA,EACtC;AACA,UAAQ,KAAK,CAAC,GAAG,MAAM;AACrB,WAAO,EAAE,KAAK,EAAE,KAAK,IAAI,EAAE,KAAK,EAAE,KAAK,KAAK,EAAE,KAAK,EAAE,KAAK,IAAI,EAAE,KAAK,EAAE,KAAK,KAAK;AAAA,EACnF,CAAC;AACH;AAEA,SAAS,MAAM,SAAS,MAAM,CAAC,CAAC,QAAQ,SAAS,CAAC,GAAG;AACnD,QAAM,MAAM,QAAQ;AACpB,WAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC5B,UAAM,MAAM,QAAQ,GAAG;AACvB,YAAQ,GAAG,KAAK,KAAK,KAAK;AAAA,EAC5B;AACA,MAAI,cAAc,KAAK;AACrB,YAAQ,KAAK,CAAC,GAAG,MAAM;AACrB,aAAO,EAAE,KAAK,EAAE,KAAK,IAAI,EAAE,KAAK,EAAE,KAAK,KAAK;AAAA,IAC9C,CAAC;AAAA,EACH,OAAO;AACL,YAAQ,KAAK,CAAC,GAAG,MAAM;AACrB,aAAO,EAAE,KAAK,EAAE,KAAK,KAAK,EAAE,KAAK,EAAE,KAAK,IAAI;AAAA,IAC9C,CAAC;AAAA,EACH;AACF;AAEA,SAAS,MAAM,SAAS,MAAM,cAAc;AAC1C,QAAM,MAAM,KAAK;AACjB,QAAM,CAAC,OAAO,IAAI,aAAa;AAC/B,QAAM,CAAC,OAAO,IAAI,aAAa;AAC/B,WAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC5B,YAAQ,GAAG,KAAK;AAChB,YAAQ,GAAG,KAAK,KAAK,GAAG;AACxB,YAAQ,GAAG,KAAK,KAAK,GAAG;AAAA,EAC1B;AACA,UAAQ,KAAK,CAAC,GAAG,MAAM;AACrB,WAAO,EAAE,KAAK,EAAE,KAAK,IAAI,EAAE,KAAK,EAAE,KAAK,KAAK,EAAE,KAAK,EAAE,KAAK,IAAI,EAAE,KAAK,EAAE,KAAK,KAAK;AAAA,EACnF,CAAC;AACH;AAEA,SAAS,QAAqC;AAAC;AAC/C,SAAS,UAAuC;AAAC;AAE1C,SAAS,aAAa,OAAO,MAAM,YAAY;AACpD,MAAI,IAAI;AACR,MAAI,IAAI,MAAM,SAAS;AACvB,MAAI;AACJ,MAAI;AAEJ,SAAO,KAAK,GAAG;AACb,QAAK,IAAI,MAAO;AAChB,iBAAa,WAAW,MAAM,IAAI,IAAI;AACtC,QAAI,aAAa,GAAG;AAClB,UAAI,IAAI;AAAA,IACV,WAAW,aAAa,GAAG;AACzB,UAAI,IAAI;AAAA,IACV,OAAO;AACL,aAAO;AAAA,IACT;AAAA,EACF;AACA,SAAO,CAAC;AACV;AAEO,SAAS,aAAa,MAAM,KAAK,YAAY;AAClD,MAAI,IAAI,aAAa,MAAM,KAAK,UAAU;AAG1C,MAAI,IAAI,GAAG;AACT,QAAI,CAAC;AAAA,EACP;AACA,OAAK,OAAO,GAAG,GAAG,GAAG;AACrB,SAAO;AACT;AAEA,SAAS,YAAY,MAAM,KAAK,gBAAgB,GAAG,SAAS;AAC1D,QAAM,OAAO,mBAAmB,OAAO,KAAK,QAAQ,KAAK,cAAc;AAEvE,MAAI,OAAO,KAAK,KAAK,SAAS,GAAG;AAC/B,iBAAa,MAAM,KAAK,OAAO;AAC/B,QAAI,KAAK,SAAS,GAAG;AACnB,WAAK,MAAM;AAAA,IACb;AACA,qBAAiB,KAAK;AAAA,EACxB;AACA,SAAO;AACT;AAGO,SAAS,uBAAuB,MAAM,cAAc,QAAQ,IAAI,KAAM;AAC3E,QAAM,KAAK,IAAI,KAAK,EAAE,QAAQ;AAC9B,QAAM,UAAU,OAAO,YAAY;AACnC,QAAM,OAAO,KAAK,MAAM,GAAG,CAAC,EAAE,KAAK,OAAO;AAC1C,QAAM,OAAO,CAAC;AACd,QAAM,MAAM,KAAK;AAEjB,MAAI,iBAAiB,KAAK,IAAI;AAC9B,MAAI,iBAAiB;AAErB,WAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC5B,QAAI,QAAQ,KAAK,IAAI,cAAc,IAAI,GAAG;AACxC,mBAAa,MAAM,KAAK,IAAI,OAAO;AAEnC,uBAAiB,YAAY,MAAM,KAAK,IAAI,GAAG,gBAAgB,GAAG,OAAO;AACzE,uBAAiB,KAAK,IAAI;AAAA,IAC5B,OAAO;AACL,uBAAiB,YAAY,MAAM,KAAK,IAAI,gBAAgB,GAAG,OAAO;AAAA,IACxE;AAAA,EACF;AAEA,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACpC,UAAM,MAAM,KAAK,GAAG,MAAM;AAC1B,QAAI,KAAK,IAAI;AACb,SAAK,KAAK;AAAA,EACZ;AAEA,WAAS,IAAI,GAAG,MAAM,MAAM,GAAG,IAAI,KAAK,QAAQ,KAAK,OAAO;AAC1D,UAAM,MAAM,KAAK,GAAG,MAAM;AAC1B,QAAI,KAAK,MAAM;AACf,SAAK,KAAK;AAAA,EACZ;AAEA,QAAM,KAAK,IAAI,KAAK,EAAE,QAAQ;AAC9B,UAAQ,IAAI,UAAU,UAAU,KAAK,qBAAqB,KAAK,gBAAgB;AAE/E,SAAO,CAAC,MAAM,IAAI;AACpB;AAEO,SAAS,YAAY,eAAe,MAAM;AAC/C,SAAO,iBAAiB,OACpB,YACA,aAAa,OAAO,CAAC,KAAK,KAAK,MAAM;AACnC,QAAI,OAAO,QAAQ,UAAU;AAC3B,UAAI,OAAO,IAAI;AAAA,IACjB,OAAO;AACL,YAAM,CAAC,SAAS,OAAO,IAAI;AAC3B,UAAI,WAAW,YAAY,MAAM,IAAI,IAAI,MAAM,IAAI;AAAA,IACrD;AACA,WAAO;AAAA,EACT,GAAG,CAAC,CAAC;AACX;AAEO,SAAS,aAAa,OAAO,OAAO,WAAW,MAAM,QAAQ;AAClE,MAAI,SAAS,SAAS,MAAM,SAAS,KAAK,MAAM,WAAW,UAAU;AACnE,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,UAAI,CAAC,MAAM,aAAa,GAAG,IAAI,MAAM;AACrC,UAAI,CAAC,MAAM,aAAa,GAAG,IAAI,MAAM;AACrC,UAAI,SAAS,QAAQ,eAAe,YAAY;AAC9C,eAAO;AAAA,MACT;AAAA,IACF;AACA,WAAO;AAAA,EACT,OAAO;AACL,WAAO;AAAA,EACT;AACF;AAEO,SAAS,eAAe,OAAO,KAAK,CAAC,QAAQ,SAAS,GAAG;AAC9D,MAAI,UAAU,KAAK;AACjB,WAAO;AAAA,EACT,OAAO;AACL,QAAI,KAAK,cAAc,QAAQ,IAAI,UAAU,MAAM;AACnD,QAAI,KAAK,cAAc,QAAQ,MAAM,UAAU,IAAI;AACnD,QAAI,OAAO,QAAQ,KAAK,IAAI;AAC1B,aAAO;AAAA,IACT,WAAW,MAAM,QAAQ,KAAK,IAAI;AAChC,aAAO;AAAA,IACT;AAAA,EACF;AACF;AAEA,SAAS,cAAc,GAAG,GAAG,CAAC,QAAQ,SAAS,GAAG;AAChD,MAAI,MAAM,GAAG;AACX,WAAO;AAAA,EACT,OAAO;AACL,QAAI,KAAK,cAAc,QAAQ,EAAE,UAAU,EAAE;AAC7C,QAAI,KAAK,cAAc,QAAQ,EAAE,UAAU,EAAE;AAC7C,QAAI,OAAO,QAAQ,KAAK,IAAI;AAC1B,aAAO;AAAA,IACT,WAAW,MAAM,QAAQ,KAAK,IAAI;AAChC,aAAO;AAAA,IACT;AAAA,EACF;AACF;AAGO,SAAS,OAAO,MAAM,OAAO,eAAe;AACjD,SAAO,SAAU,GAAG,GAAG;AACrB,aAAS,IAAI,GAAG,SAAS,GAAG,MAAM,KAAK,QAAQ,IAAI,KAAK,KAAK;AAC3D,UAAK,SAAS,KAAK,GAAG,GAAG,KAAK,EAAE,GAAI;AAClC,eAAO;AAAA,MACT;AAAA,IACF;AACA,WAAO;AAAA,EACT;AACF;AAKO,SAAS,aAAa,MAAM,QAAQ,KAAK,sBAAsB,kBAAkB;AACtF,WAAS,gBAAgB,KAAK;AAC5B,UAAM,MAAM,KAAK;AACjB,UAAM,UAAU,CAAC,MAAM,OAAO,KAAK,IAAI,GAAG,MAAM;AAGhD,QAAI,wBAAwB,kBAAkB;AAC5C,aAAO,MAAM,OAAO,QAAQ,GAAG,GAAG;AAChC,eAAO;AAAA,MACT;AAAA,IACF,WAAW,wBAAwB,mBAAmB;AACpD,aAAO,MAAM,KAAK,QAAQ,MAAM,CAAC,GAAG;AAClC,eAAO;AAAA,MACT;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAEA,WAAS,KAAK,IAAI,IAAI;AACpB,QAAI,MAAM,KAAK,KAAK,OAAO,KAAK,MAAM,CAAC;AACvC,QAAI,MAAM,OAAO,KAAK,MAAM,GAAG;AAE/B,QAAI,OAAO,KAAK;AACd,aAAO,gBAAgB,OAAO,IAAI,KAAK,EAAE;AAAA,IAC3C;AACA,QAAI,OAAO,GAAG;AACZ,WAAK;AAAA,IACP,OAAO;AACL,WAAK;AAAA,IACP;AACA,WAAO,KAAK,IAAI,EAAE;AAAA,EACpB;AAEA,MAAI,KAAK,WAAW,GAAG;AACrB,WAAO;AAAA,EACT,OAAO;AACL,WAAO,KAAK,GAAG,KAAK,MAAM;AAAA,EAC5B;AACF;",
  "names": []
}
